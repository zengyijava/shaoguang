-----------V73.06-V73.07 START ------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='73.07';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'WEB包更改');
    COMMIT;
  END IF;
END;
/

/*WEB升级脚本 START*/
/*WEB升级脚本 END*/

/*网关升级脚本 START*/
/*网关升级脚本 END*/


--增加版本信息--
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
    VERSIONSTR:='7.3.7.607.SP7';
    DBVERSIONSTR:='73.07';
    WBSVERSIONSTR:='8.6.4.219';
    SPGATEVERSIONSTR:='6.1.52.344';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;

  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1.修复查询统计-统计报表，SP账号/机构/操作员/业务类型统计报表，页面查询不出数据<br/>2.修复移动办公-员工通讯录管理-员工通讯录，员工手机号码修改不生效');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1.修复查询统计-统计报表，SP账号/机构/操作员/业务类型统计报表，页面查询不出数据<br/>2.修复移动办公-员工通讯录管理-员工通讯录，员工手机号码修改不生效' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;

  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;

  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'WEB更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/

/*
 * S_RD_MTTASKSUPP、GW_MTTASKSUPPV1、GW_MTTASKSUPPV2、GW_MTTASKSUPPV3存储过程编译报错优化
 */
--PROMPT
--PROMPT CREATING PROCEDURE S_WR_MTTASK
--PROMPT ==============================
--PROMPT
CREATE OR REPLACE PROCEDURE S_WR_MTTASK
 (
    PIUID          IN NUMBER,
    PIPTMSGID      IN NUMBER,
    PISENDSTATUS   IN NUMBER,
    PIRETFLAG      IN NUMBER,
    PIPKTOTAL      IN NUMBER,
    PIPHONECOUNT   IN NUMBER,
    PISPLITLEN_P   IN NUMBER,
    PIMULTILEN1_P  IN NUMBER,
    PIMULTILEN2_P  IN NUMBER,
    PISIGNLEN_P    IN NUMBER,
    PIECID         IN NUMBER,
    PIUSERID       IN VARCHAR2,
    PISPGATE       IN VARCHAR2,
    PICPNO         IN VARCHAR2,
    PIRECVMTTIME   IN VARCHAR2,
    PIMESSAGE      IN VARCHAR2,
    PISHOUJI       IN VARCHAR2,
    PIFEEFLAG      IN NUMBER,
    PISENDLEVEL    IN NUMBER,
    PITASKID       IN NUMBER,
    PIERCODE       IN VARCHAR2,
    PITPUDHI       IN NUMBER,
    PILONGMSGSEQ   IN NUMBER,
    PIMSGFMT       IN NUMBER,
    PIUNICOM       IN NUMBER,
    PIMOBILEAREA   IN NUMBER,
    PIPKNUMBER     IN NUMBER,
    PISVRTYPE      IN VARCHAR2,
    PIP1      IN VARCHAR2,
    PIP2      IN VARCHAR2,
    PIP3      IN VARCHAR2,
    PIP4      IN VARCHAR2,
    PIUSERMSGID    IN NUMBER DEFAULT 0,
    PIMODULEID     IN NUMBER DEFAULT 0,
    PIATTIME       IN NUMBER DEFAULT 0,
    PIVALIDTIME    IN NUMBER DEFAULT 0,
    PISENDTYPE     IN NUMBER DEFAULT 1,
    PIBATCHID      IN NUMBER DEFAULT 0,
    PIAREACODE     IN NUMBER DEFAULT 0
 )
AS
--临时变量
PITMPMSGID NUMBER(22,0);
PILOCATION PLS_INTEGER;
PISTART PLS_INTEGER;
PIRESULTPHONE VARCHAR(21);
PISTRSPLIT VARCHAR(2);
PILEN PLS_INTEGER;
PIRESULTMSG VARCHAR(720);
PIPKNUM PLS_INTEGER;
PITMPNUM PLS_INTEGER;
ICOUNT PLS_INTEGER;
PISHOUJI_P VARCHAR2(3500);
PIRECVMTTIME_P TIMESTAMP(6);
PIPTMSGID_P NUMBER(22,0);

PISPLITLEN PLS_INTEGER;
PIMULTILEN1 PLS_INTEGER;
PIMULTILEN2 PLS_INTEGER;
PISIGNLEN PLS_INTEGER;

BEGIN
--变量赋值
PILEN := LENGTH(PIMESSAGE)-PISIGNLEN_P;
PITMPNUM := 0;
PIPKNUM := 1;
PISTRSPLIT := ',';
PISHOUJI_P :=PISHOUJI;
PIPTMSGID_P:=PIPTMSGID;


IF PIRECVMTTIME IS NULL THEN
   PIRECVMTTIME_P:=SYSTIMESTAMP;
ELSE
   PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
END IF;
--清空临时表,如果临时表不存在直接返回不处理
/*SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_MTTASK');
IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASK';
ELSE
  RETURN;
END IF;
*/
--验证手机号合法性
IF (PISHOUJI_P IS NULL) THEN
  PISHOUJI_P := ' ';
END IF;
IF /*(PISHOUJI_P IS NULL) OR */(PIPHONECOUNT < 1) THEN
   RETURN;
END IF;

--变量赋值
IF PIMSGFMT=4 OR PIMSGFMT=248 OR PIMSGFMT=246 THEN
  PISPLITLEN:=140;
  PIMULTILEN1:=134;
  PIMULTILEN2:=134;
  PISIGNLEN:=0;
ELSE
  PISPLITLEN  :=PISPLITLEN_P;
  PIMULTILEN1 :=PIMULTILEN1_P;
  PIMULTILEN2 :=PIMULTILEN2_P;
  PISIGNLEN   :=PISIGNLEN_P;
END IF;
IF PIMSGFMT=25 THEN
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID=PIPTMSGID_P;
  IF ICOUNT<1 THEN
    INSERT INTO MT_TASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
    RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
    UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
    VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
    PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
    PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
  END IF;
  RETURN;
END IF;
IF PIPHONECOUNT = 1 --单发
THEN
 SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID=PIPTMSGID_P;
  --IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PIPTMSGID_P)
  IF ICOUNT<1 THEN
    IF PIPKTOTAL = 1 THEN
      INSERT INTO MT_TASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
      VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
      PIRETFLAG,PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
      PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
    ELSE
      PIPKNUM := 1;
      PITMPMSGID := PIPTMSGID_P;
      IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
        PIRESULTMSG := SUBSTR(PIMESSAGE,1,PISPLITLEN);
        PITMPMSGID := PITMPMSGID;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID=PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID, PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
        PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
        PITMPMSGID := PITMPMSGID+17179869184;
        PIPKNUM := PIPKNUM+1;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
      ELSE
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          IF PIPKNUM = PIPKTOTAL THEN
             PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
             PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSIF PIPKNUM = PIPKTOTAL-1 THEN
            IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
               PITMPNUM := PILEN-1;
               --DBMS_OUTPUT.PUT_LINE('123');
            ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
               PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
               --DBMS_OUTPUT.PUT_LINE('456');
            END IF;
            PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
               --DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
          END IF;
          ICOUNT:=0;
          SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID = PITMPMSGID;
          IF ICOUNT<1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
            PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
          --EXECUTE IMMEDIATE STR;
          PIPKNUM := PIPKNUM+1;
        END LOOP;--END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
      END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1;
      INSERT INTO MT_TASK ("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,
      A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE FROM TMP_MTTASK A;
      COMMIT;
    END IF;--END IF OF IF PIPKTOTAL = 1
  --ELSE  --MSGID存在是写入MSGIDTEST表
  --  INSERT INTO MSGIDTEST(MSGID) VALUES(PIPTMSGID);
  END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PIPTMSGID_P)
ELSE --群发
    PISHOUJI_P := PISTRSPLIT||PISHOUJI_P||PISTRSPLIT;
    PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT);
  IF PIPKTOTAL < 1 THEN--没有短信内容
    RETURN;
  END IF;

  IF PIPKTOTAL >= 1 --需要拆分长短信
  THEN
    WHILE PILOCATION <> 0 LOOP--拆分手机号码
        PISTART := PILOCATION;
        PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT,PISTART+1);
      IF PILOCATION > 0 THEN
        PIRESULTPHONE := SUBSTR(PISHOUJI_P,PISTART+1,PILOCATION-PISTART-1);--拆分后的字符
        IF (PIRESULTPHONE IS NULL) THEN
          PIRESULTPHONE := ' ';
        END IF;
        PITMPMSGID := PIPTMSGID_P;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          IF PIPKTOTAL = 1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIMESSAGE,PISENDSTATUS,
            PIRETFLAG, PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          ELSE
            PIPKNUM := 1;
            IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
              PIRESULTMSG := SUBSTR(PIMESSAGE,1, PISPLITLEN);--拆分后的字符
              PITMPMSGID := PITMPMSGID;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID, PISPGATE,PICPNO,PIRESULTPHONE, PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG, PIPKNUM, PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF;
              PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
              PITMPMSGID := PITMPMSGID+17179869184;
              PIPKNUM := PIPKNUM+1;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
            ELSE
              WHILE PIPKNUM <= PIPKTOTAL LOOP--PIPKNUM:1    PIPKTOTAL 2
                IF PIPKNUM = PIPKTOTAL THEN
                  PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSIF PIPKNUM = PIPKTOTAL-1 THEN
                  IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
                    PITMPNUM := PILEN-1;
                  ELSE
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                    PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
                     ----第一条
                  END IF; --END IF OF PILEN-(PIPKNUM-1)*PIMULTILEN1 > PIMULTILEN2 AND PILEN-(PIPKNUM-1)*PIMULTILEN1 <= PIMULTILEN1
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSE
                  PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                END IF; --END IF OF IF PIPKNUM = PIPKTOTAL
                ICOUNT:=0;
                SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_TASK WHERE PTMSGID = PITMPMSGID;
                IF ICOUNT<1 THEN
                  INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                  RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                  UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                  VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                  PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                  PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
                END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
                PIPKNUM := PIPKNUM+1;
              END LOOP;-- END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
            END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1
          END  IF;--END IF OF IF PIPKTOTAL = 1
        END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
        PIPTMSGID_P := PIPTMSGID_P+1;
      END  IF; --END IF OF IF PILOCATION > 0
    END LOOP; --END WHILE OF WHILE PILOCATION <> 0
      INSERT INTO MT_TASK ("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,
      A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE FROM TMP_MTTASK A;
      COMMIT;
   END IF; --END IF OF IF PIPKTOTAL >= 1
END IF; --END IF OF IF PIPHONECOUNT = 1 --单发
END;
/

--PROMPT
--PROMPT CREATING PROCEDURE GW_WR_MTTASKV1
--PROMPT ==============================
--PROMPT
CREATE OR REPLACE PROCEDURE GW_WR_MTTASKV1
 (
    PIUID          IN NUMBER,
    PIPTMSGID      IN NUMBER,
    PISENDSTATUS   IN NUMBER,
    PIRETFLAG      IN NUMBER,
    PIPKTOTAL      IN NUMBER,
    PIPHONECOUNT   IN NUMBER,
    PISPLITLEN_P   IN NUMBER,
    PIMULTILEN1_P  IN NUMBER,
    PIMULTILEN2_P  IN NUMBER,
    PISIGNLEN_P    IN NUMBER,
    PIECID         IN NUMBER,
    PIUSERID       IN VARCHAR2,
    PISPGATE       IN VARCHAR2,
    PICPNO         IN VARCHAR2,
    PIRECVMTTIME   IN VARCHAR2,
    PIMESSAGE      IN VARCHAR2,
    PISHOUJI       IN VARCHAR2,
    PIFEEFLAG      IN NUMBER,
    PISENDLEVEL    IN NUMBER,
    PITASKID       IN NUMBER,
    PIERCODE       IN VARCHAR2,
    PITPUDHI       IN NUMBER,
    PILONGMSGSEQ   IN NUMBER,
    PIMSGFMT       IN NUMBER,
    PIUNICOM       IN NUMBER,
    PIMOBILEAREA   IN NUMBER,
    PIPKNUMBER     IN NUMBER,
    PISVRTYPE      IN VARCHAR2,
    PIP1      IN VARCHAR2,
    PIP2      IN VARCHAR2,
    PIP3      IN VARCHAR2,
    PIP4      IN VARCHAR2,
    PIUSERMSGID    IN NUMBER DEFAULT 0,
    PIMODULEID     IN NUMBER DEFAULT 0,
    PIATTIME       IN NUMBER DEFAULT 0,
    PIVALIDTIME    IN NUMBER DEFAULT 0,
    PISENDTYPE     IN NUMBER DEFAULT 1,
    PIBATCHID      IN NUMBER DEFAULT 0,
    PIAREACODE     IN NUMBER DEFAULT 0
 )
AS
--临时变量
PITMPMSGID NUMBER(22,0);
PILOCATION PLS_INTEGER;
PISTART PLS_INTEGER;
PIRESULTPHONE VARCHAR(21);
PISTRSPLIT VARCHAR(2);
PILEN PLS_INTEGER;
PIRESULTMSG VARCHAR(720);
PIPKNUM PLS_INTEGER;
PITMPNUM PLS_INTEGER;
ICOUNT PLS_INTEGER;
PISHOUJI_P VARCHAR2(3500);
PIRECVMTTIME_P TIMESTAMP(6);
PIPTMSGID_P NUMBER(22,0);

PISPLITLEN PLS_INTEGER;
PIMULTILEN1 PLS_INTEGER;
PIMULTILEN2 PLS_INTEGER;
PISIGNLEN PLS_INTEGER;

BEGIN
--变量赋值
PILEN := LENGTH(PIMESSAGE)-PISIGNLEN_P;
PITMPNUM := 0;
PIPKNUM := 1;
PISTRSPLIT := ',';
PISHOUJI_P :=PISHOUJI;
PIPTMSGID_P:=PIPTMSGID;


IF PIRECVMTTIME IS NULL THEN
   PIRECVMTTIME_P:=SYSTIMESTAMP;
ELSE
   PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
END IF;
--清空临时表,如果临时表不存在直接返回不处理
/*SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_MTTASK');
IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASK';
ELSE
  RETURN;
END IF;
*/
--验证手机号合法性
IF (PISHOUJI_P IS NULL) THEN
  PISHOUJI_P := ' ';
END IF;
IF /*(PISHOUJI_P IS NULL) OR */(PIPHONECOUNT < 1) THEN
   RETURN;
END IF;

--变量赋值
IF PIMSGFMT=4 OR PIMSGFMT=248 OR PIMSGFMT=246 THEN
  PISPLITLEN:=140;
  PIMULTILEN1:=134;
  PIMULTILEN2:=134;
  PISIGNLEN:=0;
ELSE
  PISPLITLEN  :=PISPLITLEN_P;
  PIMULTILEN1 :=PIMULTILEN1_P;
  PIMULTILEN2 :=PIMULTILEN2_P;
  PISIGNLEN   :=PISIGNLEN_P;
END IF;
IF PIMSGFMT=25 THEN
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  IF ICOUNT<1 THEN
    INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
    RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
    UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
    VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
    PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
    PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
  END IF;
  RETURN;
END IF;
IF PIPHONECOUNT = 1 --单发
THEN
 SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  --IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PIPTMSGID_P)
  IF ICOUNT<1 THEN
    IF PIPKTOTAL = 1 THEN
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
      VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
      PIRETFLAG,PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
      PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
    ELSE
      PIPKNUM := 1;
      PITMPMSGID := PIPTMSGID_P;
      IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
        PIRESULTMSG := SUBSTR(PIMESSAGE,1,PISPLITLEN);
        PITMPMSGID := PITMPMSGID;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID, PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
        PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
        PITMPMSGID := PITMPMSGID+17179869184;
        PIPKNUM := PIPKNUM+1;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
      ELSE
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          IF PIPKNUM = PIPKTOTAL THEN
             PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
             PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSIF PIPKNUM = PIPKTOTAL-1 THEN
            IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
               PITMPNUM := PILEN-1;
               --DBMS_OUTPUT.PUT_LINE('123');
            ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
               PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
               --DBMS_OUTPUT.PUT_LINE('456');
            END IF;
            PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
               --DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
          END IF;
          ICOUNT:=0;
          SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
          IF ICOUNT<1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
            PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
          --EXECUTE IMMEDIATE STR;
          PIPKNUM := PIPKNUM+1;
        END LOOP;--END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
      END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1;
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,
      A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE FROM TMP_MTTASK A;
      COMMIT;
    END IF;--END IF OF IF PIPKTOTAL = 1
  --ELSE  --MSGID存在是写入MSGIDTEST表
  --  INSERT INTO MSGIDTEST(MSGID) VALUES(PIPTMSGID);
  END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PIPTMSGID_P)
ELSE --群发
    PISHOUJI_P := PISTRSPLIT||PISHOUJI_P||PISTRSPLIT;
    PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT);
  IF PIPKTOTAL < 1 THEN--没有短信内容
    RETURN;
  END IF;

  IF PIPKTOTAL >= 1 --需要拆分长短信
  THEN
    WHILE PILOCATION <> 0 LOOP--拆分手机号码
        PISTART := PILOCATION;
        PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT,PISTART+1);
      IF PILOCATION > 0 THEN
        PIRESULTPHONE := SUBSTR(PISHOUJI_P,PISTART+1,PILOCATION-PISTART-1);--拆分后的字符
        IF (PIRESULTPHONE IS NULL) THEN
          PIRESULTPHONE := ' ';
        END IF;
        PITMPMSGID := PIPTMSGID_P;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          IF PIPKTOTAL = 1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIMESSAGE,PISENDSTATUS,
            PIRETFLAG, PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          ELSE
            PIPKNUM := 1;
            IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
              PIRESULTMSG := SUBSTR(PIMESSAGE,1, PISPLITLEN);--拆分后的字符
              PITMPMSGID := PITMPMSGID;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID, PISPGATE,PICPNO,PIRESULTPHONE, PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG, PIPKNUM, PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF;
              PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
              PITMPMSGID := PITMPMSGID+17179869184;
              PIPKNUM := PIPKNUM+1;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
            ELSE
              WHILE PIPKNUM <= PIPKTOTAL LOOP--PIPKNUM:1    PIPKTOTAL 2
                IF PIPKNUM = PIPKTOTAL THEN
                  PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSIF PIPKNUM = PIPKTOTAL-1 THEN
                  IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
                    PITMPNUM := PILEN-1;
                  ELSE
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                    PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
                     ----第一条
                  END IF; --END IF OF PILEN-(PIPKNUM-1)*PIMULTILEN1 > PIMULTILEN2 AND PILEN-(PIPKNUM-1)*PIMULTILEN1 <= PIMULTILEN1
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSE
                  PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                END IF; --END IF OF IF PIPKNUM = PIPKTOTAL
                ICOUNT:=0;
                SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
                IF ICOUNT<1 THEN
                  INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                  RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                  UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                  VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                  PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                  PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
                END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
                PIPKNUM := PIPKNUM+1;
              END LOOP;-- END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
            END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1
          END  IF;--END IF OF IF PIPKTOTAL = 1
        END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID)
        PIPTMSGID_P := PIPTMSGID_P+1;
      END  IF; --END IF OF IF PILOCATION > 0
    END LOOP; --END WHILE OF WHILE PILOCATION <> 0
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,
      A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE FROM TMP_MTTASK A;
      COMMIT;
   END IF; --END IF OF IF PIPKTOTAL >= 1
END IF; --END IF OF IF PIPHONECOUNT = 1 --单发
END;
/

--PROMPT
--PROMPT CREATING PROCEDURE S_RD_MTTASKSUPP
--PROMPT ==================================
--PROMPT
CREATE OR REPLACE PROCEDURE S_RD_MTTASKSUPP
(
  PIOLDMSGID IN NUMBER,
  PINEWMSGID  IN NUMBER,
  PISRCUID  IN NUMBER,
  PISRCUSRID  IN VARCHAR2,
  PISRCSPGATE  IN VARCHAR2,
  PISRCSPNUMBER IN  VARCHAR2,
  PIDESTUID  IN NUMBER,
  PIDESTUSRID  IN VARCHAR2,
  PIDESTSPGATE  IN VARCHAR2,
  PIDESTSPNUMBER  IN VARCHAR2,
  PIDESTFEEFLAG  IN NUMBER,
  PISPLITLEN  IN NUMBER,
  PIMULTILEN1  IN NUMBER,
  PIMULTILEN2  IN NUMBER,
  PINEWSIGNLEN  IN NUMBER,
  PIOLDSIGNLEN  IN NUMBER,
  PISIGNATURE  IN VARCHAR2,
  PINEWSIGNPOS IN NUMBER,
  PIOLDSIGNPOS IN NUMBER,
  PIENSPLITLEN IN NUMBER, --英文短信单条长度，小于等于0标识不支持英文短信
  PIENMULTILEN1  IN NUMBER, --英文长短信拆分长度
  PIENMULTILEN2  IN NUMBER, --英文长短信最后一条长度
  PINEWENSIGNLEN  IN NUMBER, --补发英文签名长度
  PIOLDENSIGNLEN  IN NUMBER, --原英文签名长度
  PIENSIGNATURE  IN VARCHAR2, --英文签名
  OUT_CURSOR      OUT SYS_REFCURSOR
  )
AS
  PISENDNUM NUMBER(11);
  PIPKTOTAL NUMBER(11);
  PIPKNUM   NUMBER(11);
  PIINITMSGID NUMBER(22);
  PISINGLEMSG VARCHAR2(720);
  PILONGMSG VARCHAR2(3000);
  PITOTALCNT NUMBER(11);
  PILONGMSGLEN NUMBER(11);
  PIECID NUMBER(11);
  PIPHONE VARCHAR2(21);
  PISENDLEVEL NUMBER(11);
  PITASKID NUMBER(11);
  PIRECVMTTIME TIMESTAMP;
  PISRCCPNO  VARCHAR2(21);
  PIDESTCPNO VARCHAR2(21);
  PITPUDHI NUMBER(11);
  PITPPID NUMBER(11);
  PILONGMSGSEQ NUMBER(11);
  PIMSGFMT NUMBER(11);
  PIUNICOM NUMBER(11);
  PIMOBILEAREA NUMBER(11);
  PISVRTYPE VARCHAR2(64);
  PIUSERMSGID NUMBER(22);
  PISENDTYPE NUMBER(11);
  PIP1 VARCHAR2(64);
  PIP2 VARCHAR2(64);
  PIP3 VARCHAR2(64);
  PIP4 VARCHAR2(64);
  PIMODULEID NUMBER(11);
  PIATTIME NUMBER(22);
  PIVALIDTIME NUMBER(22);
  PIBATCHID NUMBER(22);
  PIAREACODE NUMBER(11);
  ICOUNT NUMBER(11);
  PITEMPCNT1 NUMBER(11);
  PITEMPCNT2 NUMBER(11);

  PISPLITLEN_V NUMBER(11);
  PIMULTILEN1_V  NUMBER(11);
  PIMULTILEN2_V  NUMBER(11);
  PINEWSIGNLEN_V  NUMBER(11);
  PIOLDSIGNLEN_V  NUMBER(11);
  PISIGNATURE_V  VARCHAR2(22);
BEGIN

  /*--检查查临时表是否存在,如果存在则清空,不存在直接返回
  SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_RDMTTASK');
  IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_RDMTTASK';
  ELSE
    RETURN;
  END IF;
  */
  PILONGMSG:='';
  PIRECVMTTIME:= SYSTIMESTAMP;
  PISRCCPNO:= SUBSTR(PISRCSPNUMBER,LENGTH(PISRCSPGATE)+1,LENGTH(PISRCSPNUMBER)-LENGTH(PISRCSPGATE));
  PIDESTCPNO:= SUBSTR(PIDESTSPNUMBER,LENGTH(PIDESTSPGATE)+1,LENGTH(PIDESTSPNUMBER)-LENGTH(PIDESTSPGATE));
   --取补发帐号的费用
  SELECT SENDNUM INTO PISENDNUM FROM USERFEE WHERE USERID=PIDESTUSRID;

  --每次调用存储过程时候，先清空TMP_RDMTTASK会话级别的临时表
  EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_RDMTTASK';

  --该模式可以把原始MSGID返给用户--用旧的MSGID复制一份记录插入临时表
  INSERT INTO TMP_RDMTTASK("UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
  SELECT "UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
  FROM MT_TASK WHERE PTMSGID=PIOLDMSGID AND USERID=PISRCUSRID AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND INSTR(TRIM(SPGATE)||TRIM(CPNO),PISRCSPNUMBER)=1 ;
  PITEMPCNT1:=SQL%ROWCOUNT;

  DELETE FROM TMP_RDMTTASK WHERE UNICOM=5 AND MSGFMT=0;
  PITEMPCNT2:=SQL%ROWCOUNT;

  IF PITEMPCNT1 - PITEMPCNT2>0 THEN
    SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,
        TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
        MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
        SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE  INTO
        PIPKTOTAL,PIPKNUM,PIECID,PIPHONE,PISENDLEVEL,
        PITASKID,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,PIUNICOM,
        PIMOBILEAREA,PISVRTYPE,PITPPID,PIUSERMSGID,
        PISENDTYPE,PIP1,PIP2,PIP3,PIP4,PIMODULEID,PIATTIME,PIVALIDTIME,PIBATCHID,PIAREACODE
    FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
    --如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = PIMSGFMT AND 0 <= PIOLDENSIGNLEN) THEN
       PIOLDSIGNLEN_V:=PIOLDENSIGNLEN;
     ELSE
       PIOLDSIGNLEN_V:=PIOLDSIGNLEN;
     END IF; --IF (0 == PIMSGFMT AND 0 <= PIOLDENSIGNLEN) THEN
     --如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = PIMSGFMT AND 0 < PIENSPLITLEN) THEN
       PISPLITLEN_V:=PIENSPLITLEN;
       PIMULTILEN1_V:=PIENMULTILEN1;
       PIMULTILEN2_V:=PIENMULTILEN2;
       PINEWSIGNLEN_V:=PINEWENSIGNLEN;
       PISIGNATURE_V:=PIENSIGNATURE;
     ELSE
       PISPLITLEN_V:=PISPLITLEN;
       PIMULTILEN1_V:=PIMULTILEN1;
       PIMULTILEN2_V:=PIMULTILEN2;
       PINEWSIGNLEN_V:=PINEWSIGNLEN;
       PISIGNATURE_V:=PISIGNATURE;
     END IF;

     IF (PIPKTOTAL <= 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2)) THEN--对于非长短信补发的处理
        PILONGMSG:='';
        --取短信内容
        SELECT MESSAGE INTO PILONGMSG FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
        --更新替换MSGID
        UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN_V; --减去签名的净长度

        IF PIOLDSIGNPOS=0 THEN--去掉原短信的签名
          PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        ELSE
          PILONGMSG:=SUBSTR(PILONGMSG,1+PIOLDSIGNLEN_V,PILONGMSGLEN);
        END IF;

        PILONGMSGLEN := LENGTH(PILONGMSG);
        IF PILONGMSGLEN > 0 THEN
          --计算拆分条数
          IF PILONGMSGLEN<=PISPLITLEN_V THEN
          PIPKTOTAL:=1;
          ELSE
          PIPKTOTAL:=TRUNC(1+(PILONGMSGLEN-PIMULTILEN2_V+PIMULTILEN1_V-1)/(PIMULTILEN1_V));
          END IF;--END OF IF PILONGMSGLEN<=PISPLITLEN

          IF PINEWSIGNPOS=0 THEN--增加新的签名
            PILONGMSG := PILONGMSG||PISIGNATURE_V;
          ELSE
            PILONGMSG := PISIGNATURE_V||PILONGMSG;
          END IF;

          --调用插入存储过程
          S_WR_MTTASK(PIDESTUID,PINEWMSGID,2,1,PIPKTOTAL,1,
                  PISPLITLEN_V,PIMULTILEN1_V,PIMULTILEN2_V,PINEWSIGNLEN_V,PIECID,
                  PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,TO_CHAR(PIRECVMTTIME, 'YYYY-MM-DD HH24:MI:SS'),PILONGMSG,
                  PIPHONE,PIDESTFEEFLAG,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                  PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PIPKNUM,PISVRTYPE,
                  PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
        ELSE
          PILONGMSG:='';
        END IF;--END OF IF PILONGMSGLEN > 0
        PIPKNUM:=1;
    /*
    ELSIF (PIPKTOTAL > 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2) AND PITPUDHI=1) THEN--对标准协议长短信的补发
      PILONGMSG:='';
      --取短信内容
      SELECT MESSAGE INTO PILONGMSG FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
      --更新替换MSGID
      UPDATE MT_TASK SET PTMSGID=PINEWMSGID,RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
      IF (PIPKTOTAL=PIPKNUM)THEN ---如果是最后一条，去掉旧签名，加上新签名
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN; --减去签名的净长度
        PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        PILONGMSG := PILONGMSG||PISIGNATURE;
      END IF;
      PILONGMSGLEN := LENGTH(PILONGMSG);
      IF PILONGMSGLEN > 0 THEN
        --调用插入存储过程
        S_WR_MTTASKSR(PIDESTUID,PIOLDMSGID,2,1,PIPKTOTAL,1,PIECID,
                PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,TO_CHAR(PIRECVMTTIME, 'YYYY-MM-DD HH24:MI:SS'),PILONGMSG,
                PIPHONE,PIDESTFEEFLAG,PIPKNUM,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,
                PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
      ELSE
        PILONGMSG:='';
      END IF;--END OF IF PILONGMSGLEN > 0
    */
    ELSIF (PIPKTOTAL > 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2) AND PITPUDHI=0)THEN--对非标准长短信协议的处理
      PILONGMSG:='';
      --没有补发过且通道号跟源通道号相等
      SELECT COUNT(*) INTO ICOUNT FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID AND RESENDCNT<1 AND TRIM(SPGATE)=PISRCSPGATE;
      IF ICOUNT>0 THEN
        --循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
        --计算起始MSGID
        PIINITMSGID := PIOLDMSGID-(PIPKNUM-1)*17179869184;
        PIPKNUM := 1;
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          --取短信内容 --若长短信中间的某条缺失，则不补发(暂不考虑)
           SELECT MESSAGE INTO PISINGLEMSG FROM MT_TASK WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
          IF (PISINGLEMSG IS NOT NULL) THEN
            --更新替换MSGID
            UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
            --拼接短信内容
            PILONGMSG := PILONGMSG||PISINGLEMSG;
            PIPKNUM := PIPKNUM+1;
          ELSE
            PILONGMSG:='';
            PIPKNUM:=PIPKTOTAL;--用来跳出WHILE
          END IF;
        END LOOP;--END OF WHILE PIPKNUM <= PIPKTOTAL
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN_V ;--减去签名的净长度

        IF PIOLDSIGNPOS=0 THEN--去掉原短信的签名
          PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        ELSE
          PILONGMSG:=SUBSTR(PILONGMSG,1+PIOLDSIGNLEN_V,PILONGMSGLEN);
        END IF;

        PILONGMSGLEN := LENGTH(PILONGMSG);
        IF PILONGMSGLEN > 0 THEN
          --计算拆分条数
          IF PILONGMSGLEN<=PISPLITLEN_V THEN
          PIPKTOTAL:=1;
          ELSE
          PIPKTOTAL:=TRUNC(1+(PILONGMSGLEN-PIMULTILEN2_V+PIMULTILEN1_V-1)/(PIMULTILEN1_V));
          END IF;--END OF IF PILONGMSGLEN<=PISPLITLEN

          IF PINEWSIGNPOS=0 THEN--增加新的签名
            PILONGMSG := PILONGMSG||PISIGNATURE_V;
          ELSE
            PILONGMSG := PISIGNATURE_V||PILONGMSG;
          END IF;

          --调用插入存储过程
          S_WR_MTTASK(PIDESTUID,PINEWMSGID,2,1,PIPKTOTAL,1,
                  PISPLITLEN_V,PIMULTILEN1_V,PIMULTILEN2_V,PINEWSIGNLEN_V,PIECID,
                  PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,TO_CHAR(PIRECVMTTIME, 'YYYY-MM-DD HH24:MI:SS'),PILONGMSG,
                  PIPHONE,PIDESTFEEFLAG,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                  PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PIPKNUM,PISVRTYPE,
                  PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
        ELSE
          PILONGMSG:='';
        END IF;--END OF IF PILONGMSGLEN > 0
          PIPKNUM:=1;
      END IF;--END OF IF EXISTS(SELECT COUNT(*) FROM PITMP WHERE PTMSGID=PIOLDMSGID AND RESENDCNT<1 AND (TRIM(SPGATE)+TRIM(CPNO))=PISRCSPNUMBER)
    END  IF;--END OF IF PIPKTOTAL > 1
  END IF;--END OF IF PIPIROWCOUNT<>0
  --返回给上层数据
  OPEN OUT_CURSOR FOR
  SELECT PIDESTUID AS "UID",PINEWMSGID AS PTMSGID,ECID,TASKID,PIDESTUSRID AS USERID,PIDESTSPGATE AS SPGATE,
  PIDESTCPNO AS CPNO,PIPHONE AS PHONE,RETFLAG,PIDESTFEEFLAG AS FEEFLAG,1 AS PKNUMBER,PIPKTOTAL AS PKTOTAL,
  SENDSTATUS,1 AS SENDLEVEL,TO_DATE(TO_CHAR(PIRECVMTTIME, 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') AS RECVMTTIME,
  PILONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,
  PISVRTYPE AS SVRTYPE,PIP1 AS P1,PIP2 AS P2,PIP3 AS P3,PIP4 AS P4,PIUSERMSGID AS USERMSGID,PIMODULEID AS MODULEID,
  PIATTIME AS ATTIME,PIVALIDTIME AS VALIDTIME,SENDTYPE,BATCHID,AREACODE FROM TMP_RDMTTASK WHERE (PILONGMSG IS NOT NULL);
END;
/

----------S_RD_MTTASKSUPP  GW_MTTASKSUPPV1-----------------
--PROMPT
--PROMPT CREATING PROCEDURE S_RD_MTTASKSUPP
--PROMPT ==================================
--PROMPT
CREATE OR REPLACE PROCEDURE GW_MTTASKSUPPV1
(
  PIOLDMSGID IN NUMBER,
  PINEWMSGID  IN NUMBER,
  PISRCUID  IN NUMBER,
  PISRCUSRID  IN VARCHAR2,
  PISRCSPGATE  IN VARCHAR2,
  PISRCSPNUMBER IN  VARCHAR2,
  PIDESTUID  IN NUMBER,
  PIDESTUSRID  IN VARCHAR2,
  PIDESTSPGATE  IN VARCHAR2,
  PIDESTSPNUMBER  IN VARCHAR2,
  PIDESTFEEFLAG  IN NUMBER,
  PISPLITLEN  IN NUMBER,
  PIMULTILEN1  IN NUMBER,
  PIMULTILEN2  IN NUMBER,
  PINEWSIGNLEN  IN NUMBER,
  PIOLDSIGNLEN  IN NUMBER,
  PISIGNATURE  IN VARCHAR2,
  PINEWSIGNPOS IN NUMBER,
  PIOLDSIGNPOS IN NUMBER,
  PIENSPLITLEN IN NUMBER, --英文短信单条长度，小于等于0标识不支持英文短信
  PIENMULTILEN1  IN NUMBER, --英文长短信拆分长度
  PIENMULTILEN2  IN NUMBER, --英文长短信最后一条长度
  PINEWENSIGNLEN  IN NUMBER, --补发英文签名长度
  PIOLDENSIGNLEN  IN NUMBER, --原英文签名长度
  PIENSIGNATURE  IN VARCHAR2, --英文签名
  PIRECVMTTIME  IN VARCHAR2,
  OUT_CURSOR      OUT SYS_REFCURSOR
  )
AS
  PISENDNUM NUMBER(11);
  PIPKTOTAL NUMBER(11);
  PIPKNUM   NUMBER(11);
  PIINITMSGID NUMBER(22);
  PISINGLEMSG VARCHAR2(720);
  PILONGMSG VARCHAR2(3000);
  PITOTALCNT NUMBER(11);
  PILONGMSGLEN NUMBER(11);
  PIECID NUMBER(11);
  PIPHONE VARCHAR2(21);
  PISENDLEVEL NUMBER(11);
  PITASKID NUMBER(11);
  --PIRECVMTTIME TIMESTAMP;
  PISRCCPNO  VARCHAR2(21);
  PIDESTCPNO VARCHAR2(21);
  PITPUDHI NUMBER(11);
  PITPPID NUMBER(11);
  PILONGMSGSEQ NUMBER(11);
  PIMSGFMT NUMBER(11);
  PIUNICOM NUMBER(11);
  PIMOBILEAREA NUMBER(11);
  PISVRTYPE VARCHAR2(64);
  PIUSERMSGID NUMBER(22);
  PISENDTYPE NUMBER(11);
  PIP1 VARCHAR2(64);
  PIP2 VARCHAR2(64);
  PIP3 VARCHAR2(64);
  PIP4 VARCHAR2(64);
  PIMODULEID NUMBER(11);
  PIATTIME NUMBER(22);
  PIVALIDTIME NUMBER(22);
  PIBATCHID NUMBER(22);
  PIAREACODE NUMBER(11);
  ICOUNT NUMBER(11);
  PITEMPCNT1 NUMBER(11);
  PITEMPCNT2 NUMBER(11);

  PISPLITLEN_V NUMBER(11);
  PIMULTILEN1_V  NUMBER(11);
  PIMULTILEN2_V  NUMBER(11);
  PINEWSIGNLEN_V  NUMBER(11);
  PIOLDSIGNLEN_V  NUMBER(11);
  PISIGNATURE_V  VARCHAR2(22);
BEGIN

  /*--检查查临时表是否存在,如果存在则清空,不存在直接返回
  SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_RDMTTASK');
  IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_RDMTTASK';
  ELSE
    RETURN;
  END IF;
  */
  PILONGMSG:='';
  --PIRECVMTTIME:= SYSTIMESTAMP;
  PISRCCPNO:= SUBSTR(PISRCSPNUMBER,LENGTH(PISRCSPGATE)+1,LENGTH(PISRCSPNUMBER)-LENGTH(PISRCSPGATE));
  PIDESTCPNO:= NVL(SUBSTR(PIDESTSPNUMBER,LENGTH(PIDESTSPGATE)+1,LENGTH(PIDESTSPNUMBER)-LENGTH(PIDESTSPGATE)), ' ');
   --取补发帐号的费用
  SELECT SENDNUM INTO PISENDNUM FROM USERFEE WHERE USERID=PIDESTUSRID;

  --每次调用存储过程时候，先清空TMP_RDMTTASK会话级别的临时表
  EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_RDMTTASK';

  --该模式可以把原始MSGID返给用户--用旧的MSGID复制一份记录插入临时表
  INSERT INTO TMP_RDMTTASK("UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
  SELECT "UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
  FROM MT_TASK WHERE PTMSGID=PIOLDMSGID AND USERID=PISRCUSRID AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND INSTR(TRIM(SPGATE)||TRIM(CPNO),PISRCSPNUMBER)=1 ;
  PITEMPCNT1:=SQL%ROWCOUNT;

  DELETE FROM TMP_RDMTTASK WHERE UNICOM=5 AND MSGFMT=0;
  PITEMPCNT2:=SQL%ROWCOUNT;

  IF PITEMPCNT1 - PITEMPCNT2>0 THEN
    SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,
        TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
        MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
        SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE  INTO
        PIPKTOTAL,PIPKNUM,PIECID,PIPHONE,PISENDLEVEL,
        PITASKID,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,PIUNICOM,
        PIMOBILEAREA,PISVRTYPE,PITPPID,PIUSERMSGID,
        PISENDTYPE,PIP1,PIP2,PIP3,PIP4,PIMODULEID,PIATTIME,PIVALIDTIME,PIBATCHID,PIAREACODE
    FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
    --如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = PIMSGFMT AND 0 <= PIOLDENSIGNLEN) THEN
       PIOLDSIGNLEN_V:=PIOLDENSIGNLEN;
     ELSE
       PIOLDSIGNLEN_V:=PIOLDSIGNLEN;
     END IF; --IF (0 == PIMSGFMT AND 0 <= PIOLDENSIGNLEN) THEN
     --如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = PIMSGFMT AND 0 < PIENSPLITLEN) THEN
       PISPLITLEN_V:=PIENSPLITLEN;
       PIMULTILEN1_V:=PIENMULTILEN1;
       PIMULTILEN2_V:=PIENMULTILEN2;
       PINEWSIGNLEN_V:=PINEWENSIGNLEN;
       PISIGNATURE_V:=PIENSIGNATURE;
     ELSE
       PISPLITLEN_V:=PISPLITLEN;
       PIMULTILEN1_V:=PIMULTILEN1;
       PIMULTILEN2_V:=PIMULTILEN2;
       PINEWSIGNLEN_V:=PINEWSIGNLEN;
       PISIGNATURE_V:=PISIGNATURE;
     END IF;

     if (0 = PINEWSIGNLEN_V) THEN
       PISIGNATURE_V:='';
     END IF;

     IF (PIPKTOTAL <= 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2)) THEN--对于非长短信补发的处理
        PILONGMSG:='';
        --取短信内容
        SELECT MESSAGE INTO PILONGMSG FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
        --更新替换MSGID
        UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN_V; --减去签名的净长度

        IF PIOLDSIGNPOS=0 THEN--去掉原短信的签名
          PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        ELSE
          PILONGMSG:=SUBSTR(PILONGMSG,1+PIOLDSIGNLEN_V,PILONGMSGLEN);
        END IF;

        PILONGMSGLEN := LENGTH(PILONGMSG);
        IF PILONGMSGLEN > 0 THEN
          --计算拆分条数
          IF PILONGMSGLEN<=PISPLITLEN_V THEN
          PIPKTOTAL:=1;
          ELSE
          PIPKTOTAL:=TRUNC(1+(PILONGMSGLEN-PIMULTILEN2_V+PIMULTILEN1_V-1)/(PIMULTILEN1_V));
          END IF;--END OF IF PILONGMSGLEN<=PISPLITLEN

          IF PINEWSIGNPOS=0 THEN--增加新的签名
            PILONGMSG := PILONGMSG||PISIGNATURE_V;
          ELSE
            PILONGMSG := PISIGNATURE_V||PILONGMSG;
          END IF;

          --调用插入存储过程
          S_WR_MTTASK(PIDESTUID,PINEWMSGID,2,1,PIPKTOTAL,1,
                  PISPLITLEN_V,PIMULTILEN1_V,PIMULTILEN2_V,PINEWSIGNLEN_V,PIECID,
                  PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,PIRECVMTTIME,PILONGMSG,
                  PIPHONE,PIDESTFEEFLAG,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                  PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PIPKNUM,PISVRTYPE,
                  PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
        ELSE
          PILONGMSG:='';
        END IF;--END OF IF PILONGMSGLEN > 0
        PIPKNUM:=1;
    /*
    ELSIF (PIPKTOTAL > 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2) AND PITPUDHI=1) THEN--对标准协议长短信的补发
      PILONGMSG:='';
      --取短信内容
      SELECT MESSAGE INTO PILONGMSG FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
      --更新替换MSGID
      UPDATE MT_TASK SET PTMSGID=PINEWMSGID,RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
      IF (PIPKTOTAL=PIPKNUM)THEN ---如果是最后一条，去掉旧签名，加上新签名
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN; --减去签名的净长度
        PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        PILONGMSG := PILONGMSG||PISIGNATURE;
      END IF;
      PILONGMSGLEN := LENGTH(PILONGMSG);
      IF PILONGMSGLEN > 0 THEN
        --调用插入存储过程
        S_WR_MTTASKSR(PIDESTUID,PIOLDMSGID,2,1,PIPKTOTAL,1,PIECID,
                PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,TO_CHAR(PIRECVMTTIME, 'YYYY-MM-DD HH24:MI:SS'),PILONGMSG,
                PIPHONE,PIDESTFEEFLAG,PIPKNUM,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,
                PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
      ELSE
        PILONGMSG:='';
      END IF;--END OF IF PILONGMSGLEN > 0
    */
    ELSIF (PIPKTOTAL > 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2) AND PITPUDHI=0)THEN--对非标准长短信协议的处理
      PILONGMSG:='';
      --没有补发过且通道号跟源通道号相等
      SELECT COUNT(*) INTO ICOUNT FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID AND RESENDCNT<1 AND TRIM(SPGATE)=PISRCSPGATE;
      IF ICOUNT>0 THEN
        --循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
        --计算起始MSGID
        PIINITMSGID := PIOLDMSGID-(PIPKNUM-1)*17179869184;
        PIPKNUM := 1;
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          --取短信内容 --若长短信中间的某条缺失，则不补发(暂不考虑)
           SELECT MESSAGE INTO PISINGLEMSG FROM MT_TASK WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
          IF (PISINGLEMSG IS NOT NULL) THEN
            --更新替换MSGID
            UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
            --拼接短信内容
            PILONGMSG := PILONGMSG||PISINGLEMSG;
            PIPKNUM := PIPKNUM+1;
          ELSE
            PILONGMSG:='';
            PIPKNUM:=PIPKTOTAL;--用来跳出WHILE
          END IF;
        END LOOP;--END OF WHILE PIPKNUM <= PIPKTOTAL
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN_V ;--减去签名的净长度

        IF PIOLDSIGNPOS=0 THEN--去掉原短信的签名
          PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        ELSE
          PILONGMSG:=SUBSTR(PILONGMSG,1+PIOLDSIGNLEN_V,PILONGMSGLEN);
        END IF;

        PILONGMSGLEN := LENGTH(PILONGMSG);
        IF PILONGMSGLEN > 0 THEN
          --计算拆分条数
          IF PILONGMSGLEN<=PISPLITLEN_V THEN
          PIPKTOTAL:=1;
          ELSE
          PIPKTOTAL:=TRUNC(1+(PILONGMSGLEN-PIMULTILEN2_V+PIMULTILEN1_V-1)/(PIMULTILEN1_V));
          END IF;--END OF IF PILONGMSGLEN<=PISPLITLEN

          IF PINEWSIGNPOS=0 THEN--增加新的签名
            PILONGMSG := PILONGMSG||PISIGNATURE_V;
          ELSE
            PILONGMSG := PISIGNATURE_V||PILONGMSG;
          END IF;

          --调用插入存储过程
          S_WR_MTTASK(PIDESTUID,PINEWMSGID,2,1,PIPKTOTAL,1,
                  PISPLITLEN_V,PIMULTILEN1_V,PIMULTILEN2_V,PINEWSIGNLEN_V,PIECID,
                  PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,PIRECVMTTIME,PILONGMSG,
                  PIPHONE,PIDESTFEEFLAG,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                  PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PIPKNUM,PISVRTYPE,
                  PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
        ELSE
          PILONGMSG:='';
        END IF;--END OF IF PILONGMSGLEN > 0
          PIPKNUM:=1;
      END IF;--END OF IF EXISTS(SELECT COUNT(*) FROM PITMP WHERE PTMSGID=PIOLDMSGID AND RESENDCNT<1 AND (TRIM(SPGATE)+TRIM(CPNO))=PISRCSPNUMBER)
    END  IF;--END OF IF PIPKTOTAL > 1
  END IF;--END OF IF PIPIROWCOUNT<>0
  --返回给上层数据
  OPEN OUT_CURSOR FOR
  SELECT PIDESTUID AS "UID",PINEWMSGID AS PTMSGID,ECID,TASKID,PIDESTUSRID AS USERID,PIDESTSPGATE AS SPGATE,
  PIDESTCPNO AS CPNO,PIPHONE AS PHONE,RETFLAG,PIDESTFEEFLAG AS FEEFLAG,1 AS PKNUMBER,PIPKTOTAL AS PKTOTAL,
  SENDSTATUS,1 AS SENDLEVEL,
  PILONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,
  PISVRTYPE AS SVRTYPE,PIP1 AS P1,PIP2 AS P2,PIP3 AS P3,PIP4 AS P4,PIUSERMSGID AS USERMSGID,PIMODULEID AS MODULEID,
  PIATTIME AS ATTIME,PIVALIDTIME AS VALIDTIME,SENDTYPE,BATCHID,AREACODE FROM TMP_RDMTTASK WHERE (PILONGMSG IS NOT NULL);
END;
/

CREATE OR REPLACE PROCEDURE GW_MTTASKSUPPV2
(
  PIOLDMSGID IN NUMBER,
  PINEWMSGID  IN NUMBER,
  PISRCUID  IN NUMBER,
  PISRCUSRID  IN VARCHAR2,
  PISRCSPGATE  IN VARCHAR2,
  PISRCSPNUMBER IN  VARCHAR2,
  PIDESTUID  IN NUMBER,
  PIDESTUSRID  IN VARCHAR2,
  PIDESTSPGATE  IN VARCHAR2,
  PIDESTSPNUMBER  IN VARCHAR2,
  PIDESTFEEFLAG  IN NUMBER,
  PISPLITLEN  IN NUMBER,
  PIMULTILEN1  IN NUMBER,
  PIMULTILEN2  IN NUMBER,
  PINEWSIGNLEN  IN NUMBER,
  PIOLDSIGNLEN  IN NUMBER,
  PISIGNATURE  IN VARCHAR2,
  PINEWSIGNPOS IN NUMBER,
  PIOLDSIGNPOS IN NUMBER,
  PIENSPLITLEN IN NUMBER, --英文短信单条长度，小于等于0标识不支持英文短信
  PIENMULTILEN1  IN NUMBER, --英文长短信拆分长度
  PIENMULTILEN2  IN NUMBER, --英文长短信最后一条长度
  PINEWENSIGNLEN  IN NUMBER, --补发英文签名长度
  PIOLDENSIGNLEN  IN NUMBER, --原英文签名长度
  PIENSIGNATURE  IN VARCHAR2, --英文签名
  PIRECVMTTIME  IN VARCHAR2,
  OUT_CURSOR      OUT SYS_REFCURSOR
  )
AS
  PISENDNUM NUMBER(11);
  PIPKTOTAL NUMBER(11);
  PIPKNUM   NUMBER(11);
  PIINITMSGID NUMBER(22);
  PISINGLEMSG VARCHAR2(720);
  PISINGLEMSG1 VARCHAR2(720);
  PILONGMSG VARCHAR2(3000);
  PITOTALCNT NUMBER(11);
  PILONGMSGLEN NUMBER(11);
  PIECID NUMBER(11);
  PIPHONE VARCHAR2(21);
  PISENDLEVEL NUMBER(11);
  PITASKID NUMBER(11);
  --PIRECVMTTIME TIMESTAMP;
  PISRCCPNO  VARCHAR2(21);
  PIDESTCPNO VARCHAR2(21);
  PITPUDHI NUMBER(11);
  PITPPID NUMBER(11);
  PILONGMSGSEQ NUMBER(11);
  PIMSGFMT NUMBER(11);
  PIUNICOM NUMBER(11);
  PIMOBILEAREA NUMBER(11);
  PISVRTYPE VARCHAR2(64);
  PIUSERMSGID NUMBER(22);
  PISENDTYPE NUMBER(11);
  PIP1 VARCHAR2(64);
  PIP2 VARCHAR2(64);
  PIP3 VARCHAR2(64);
  PIP4 VARCHAR2(64);
  PIMODULEID NUMBER(11);
  PIATTIME NUMBER(22);
  PIVALIDTIME NUMBER(22);
  PIBATCHID NUMBER(22);
  PIAREACODE NUMBER(11);
  ICOUNT NUMBER(11);
  PITEMPCNT1 NUMBER(11);
  PITEMPCNT2 NUMBER(11);

  PISPLITLEN_V NUMBER(11);
  PIMULTILEN1_V  NUMBER(11);
  PIMULTILEN2_V  NUMBER(11);
  PINEWSIGNLEN_V  NUMBER(11);
  PIOLDSIGNLEN_V  NUMBER(11);
  PISIGNATURE_V  VARCHAR2(22);
  PIPTMSGID_P  NUMBER(22);
BEGIN

  /*--检查查临时表是否存在,如果存在则清空,不存在直接返回
  SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_RDMTTASK');
  IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_RDMTTASK';
  ELSE
    RETURN;
  END IF;
  */
  PILONGMSG:='';
  --PIRECVMTTIME:= SYSTIMESTAMP;
  PISRCCPNO:= SUBSTR(PISRCSPNUMBER,LENGTH(PISRCSPGATE)+1,LENGTH(PISRCSPNUMBER)-LENGTH(PISRCSPGATE));
  PIDESTCPNO:= NVL(SUBSTR(PIDESTSPNUMBER,LENGTH(PIDESTSPGATE)+1,LENGTH(PIDESTSPNUMBER)-LENGTH(PIDESTSPGATE)), ' ');
   --取补发帐号的费用
  --SELECT SENDNUM INTO PISENDNUM FROM USERFEE WHERE USERID=PIDESTUSRID;

  --每次调用存储过程时候，先清空TMP_RDMTTASK会话级别的临时表
  EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_RDMTTASK';

  --该模式可以把原始MSGID返给用户--用旧的MSGID复制一份记录插入临时表
  INSERT INTO TMP_RDMTTASK("UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
  SELECT "UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
  FROM GW_MT_TASK_BAK WHERE PTMSGID=PIOLDMSGID AND USERID=PISRCUSRID AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND INSTR(TRIM(SPGATE)||TRIM(CPNO),PISRCSPNUMBER)=1 ;
  PITEMPCNT1:=NVL(SQL%ROWCOUNT,0);

  IF PITEMPCNT1<=0 THEN
  INSERT INTO TMP_RDMTTASK("UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
  SELECT "UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
  FROM MT_TASK WHERE PTMSGID=PIOLDMSGID AND USERID=PISRCUSRID AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND INSTR(TRIM(SPGATE)||TRIM(CPNO),PISRCSPNUMBER)=1 ;
  PITEMPCNT1:=NVL(SQL%ROWCOUNT,0);
  END IF;

  DELETE FROM TMP_RDMTTASK WHERE UNICOM=5 AND MSGFMT=0;
  PITEMPCNT2:=NVL(SQL%ROWCOUNT,0);

  IF PITEMPCNT1 - PITEMPCNT2>0 THEN
    SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,
        TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
        MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
        SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE  INTO
        PIPKTOTAL,PIPKNUM,PIECID,PIPHONE,PISENDLEVEL,
        PITASKID,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,PIUNICOM,
        PIMOBILEAREA,PISVRTYPE,PITPPID,PIUSERMSGID,
        PISENDTYPE,PIP1,PIP2,PIP3,PIP4,PIMODULEID,PIATTIME,PIVALIDTIME,PIBATCHID,PIAREACODE
    FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
    --如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = PIMSGFMT AND 0 <= PIOLDENSIGNLEN) THEN
       PIOLDSIGNLEN_V:=PIOLDENSIGNLEN;
     ELSE
       PIOLDSIGNLEN_V:=PIOLDSIGNLEN;
     END IF; --IF (0 == PIMSGFMT AND 0 <= PIOLDENSIGNLEN) THEN
     --如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = PIMSGFMT AND 0 < PIENSPLITLEN) THEN
       PISPLITLEN_V:=PIENSPLITLEN;
       PIMULTILEN1_V:=PIENMULTILEN1;
       PIMULTILEN2_V:=PIENMULTILEN2;
       PINEWSIGNLEN_V:=PINEWENSIGNLEN;
       PISIGNATURE_V:=PIENSIGNATURE;
     ELSE
       PISPLITLEN_V:=PISPLITLEN;
       PIMULTILEN1_V:=PIMULTILEN1;
       PIMULTILEN2_V:=PIMULTILEN2;
       PINEWSIGNLEN_V:=PINEWSIGNLEN;
       PISIGNATURE_V:=PISIGNATURE;
     END IF;

     if (0 = PINEWSIGNLEN_V) THEN
       PISIGNATURE_V:='';
     END IF;

     IF (PIPKTOTAL <= 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2)) THEN--对于非长短信补发的处理
        PILONGMSG:='';
        --取短信内容
        SELECT MESSAGE INTO PILONGMSG FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
        --更新替换MSGID
        UPDATE GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
        UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN_V; --减去签名的净长度

        IF PIOLDSIGNPOS=0 THEN--去掉原短信的签名
          PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        ELSE
          PILONGMSG:=SUBSTR(PILONGMSG,1+PIOLDSIGNLEN_V,PILONGMSGLEN);
        END IF;

        PILONGMSGLEN := LENGTH(PILONGMSG);
        IF PILONGMSGLEN > 0 THEN
          --计算拆分条数
          IF PILONGMSGLEN<=PISPLITLEN_V THEN
          PIPKTOTAL:=1;
          ELSE
          PIPKTOTAL:=TRUNC(1+(PILONGMSGLEN-PIMULTILEN2_V+PIMULTILEN1_V-1)/(PIMULTILEN1_V));
          END IF;--END OF IF PILONGMSGLEN<=PISPLITLEN

          IF PINEWSIGNPOS=0 THEN--增加新的签名
            PILONGMSG := TRIM(PILONGMSG)||PISIGNATURE_V;
          ELSE
            PILONGMSG := PISIGNATURE_V||TRIM(PILONGMSG);
          END IF;

          --调用插入存储过程
          S_WR_MTTASK(PIDESTUID,PINEWMSGID,2,1,PIPKTOTAL,1,
                  PISPLITLEN_V,PIMULTILEN1_V,PIMULTILEN2_V,PINEWSIGNLEN_V,PIECID,
                  PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,PIRECVMTTIME,PILONGMSG,
                  PIPHONE,PIDESTFEEFLAG,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                  PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PIPKNUM,PISVRTYPE,
                  PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
        ELSE
          PILONGMSG:='';
        END IF;--END OF IF PILONGMSGLEN > 0
        PIPKNUM:=1;
    /*
    ELSIF (PIPKTOTAL > 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2) AND PITPUDHI=1) THEN--对标准协议长短信的补发
      PILONGMSG:='';
      --取短信内容
      SELECT MESSAGE INTO PILONGMSG FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
      --更新替换MSGID
      UPDATE MT_TASK SET PTMSGID=PINEWMSGID,RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
      IF (PIPKTOTAL=PIPKNUM)THEN ---如果是最后一条，去掉旧签名，加上新签名
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN; --减去签名的净长度
        PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        PILONGMSG := PILONGMSG||PISIGNATURE;
      END IF;
      PILONGMSGLEN := LENGTH(PILONGMSG);
      IF PILONGMSGLEN > 0 THEN
        --调用插入存储过程
        S_WR_MTTASKSR(PIDESTUID,PIOLDMSGID,2,1,PIPKTOTAL,1,PIECID,
                PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,TO_CHAR(PIRECVMTTIME, 'YYYY-MM-DD HH24:MI:SS'),PILONGMSG,
                PIPHONE,PIDESTFEEFLAG,PIPKNUM,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,
                PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
      ELSE
        PILONGMSG:='';
      END IF;--END OF IF PILONGMSGLEN > 0
    */
    ELSIF (PIPKTOTAL > 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2) AND PITPUDHI=0)THEN--对非标准长短信协议的处理
      PILONGMSG:=' ';
      --没有补发过且通道号跟源通道号相等
      SELECT COUNT(*) INTO ICOUNT FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID AND RESENDCNT<1 AND TRIM(SPGATE)=PISRCSPGATE;
      IF ICOUNT>0 THEN
        --循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
        --计算起始MSGID
        PIINITMSGID := PIOLDMSGID-(PIPKNUM-1)*17179869184;
        PIPKNUM := 1;
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          --取短信内容 --若长短信中间的某条缺失，则不补发(暂不考虑)
          BEGIN
          SELECT MESSAGE INTO PISINGLEMSG FROM GW_MT_TASK_BAK WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
          exception
            when no_data_found then
              PISINGLEMSG := ' ';
          end;
          IF PISINGLEMSG = ' ' THEN
            --拼接短信内容
            BEGIN
            SELECT MESSAGE INTO PISINGLEMSG1 FROM MT_TASK WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                PISINGLEMSG1:=' ';
            END;
            IF NVL(LENGTH(LTRIM(PISINGLEMSG1)),0)>0 THEN
             --更新替换MSGID
            PILONGMSG := NVL(PILONGMSG,' ')||NVL(PISINGLEMSG1,' ');
            UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
            END IF;--IF LENGTH(PISINGLEMSG1)>0 THEN
          ELSE
            PILONGMSG := NVL(PILONGMSG,' ')||NVL(PISINGLEMSG,' ');
            UPDATE GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
          END IF;
            --拼接短信内容
           PIPKNUM := PIPKNUM+1;
        END LOOP;--END OF WHILE PIPKNUM <= PIPKTOTAL
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN_V ;--减去签名的净长度

        IF PIOLDSIGNPOS=0 THEN--去掉原短信的签名
          PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        ELSE
          PILONGMSG:=SUBSTR(PILONGMSG,1+PIOLDSIGNLEN_V,PILONGMSGLEN);
        END IF;

        PILONGMSGLEN := LENGTH(PILONGMSG);
        IF PILONGMSGLEN > 0 THEN
          --计算拆分条数
          IF PILONGMSGLEN<=PISPLITLEN_V THEN
          PIPKTOTAL:=1;
          ELSE
          PIPKTOTAL:=TRUNC(1+(PILONGMSGLEN-PIMULTILEN2_V+PIMULTILEN1_V-1)/(PIMULTILEN1_V));
          END IF;--END OF IF PILONGMSGLEN<=PISPLITLEN

          IF PINEWSIGNPOS=0 THEN--增加新的签名
            PILONGMSG := TRIM(PILONGMSG)||PISIGNATURE_V;
          ELSE
            PILONGMSG := PISIGNATURE_V||TRIM(PILONGMSG);
          END IF;

          --调用插入存储过程
          S_WR_MTTASK(PIDESTUID,PINEWMSGID,2,1,PIPKTOTAL,1,
                  PISPLITLEN_V,PIMULTILEN1_V,PIMULTILEN2_V,PINEWSIGNLEN_V,PIECID,
                  PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,PIRECVMTTIME,PILONGMSG,
                  PIPHONE,PIDESTFEEFLAG,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                  PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PIPKNUM,PISVRTYPE,
                  PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
        ELSE
          PILONGMSG:='';
        END IF;--END OF IF PILONGMSGLEN > 0
          PIPKNUM:=1;
      END IF;--END OF IF EXISTS(SELECT COUNT(*) FROM PITMP WHERE PTMSGID=PIOLDMSGID AND RESENDCNT<1 AND (TRIM(SPGATE)+TRIM(CPNO))=PISRCSPNUMBER)
    END  IF;--END OF IF PIPKTOTAL > 1
  END IF;--END OF IF PIPIROWCOUNT<>0
  --返回给上层数据
  PIPTMSGID_P:=PINEWMSGID;
  UPDATE TMP_RDMTTASK SET PTNEWMSGID=PIPTMSGID_P WHERE PTMSGID=PIOLDMSGID;

  OPEN OUT_CURSOR FOR
  SELECT "UID",PTNEWMSGID AS PTMSGID,ECID,TASKID,PIDESTUSRID AS USERID,PIDESTSPGATE AS SPGATE,
  PIDESTCPNO AS CPNO,PHONE,RETFLAG,PIDESTFEEFLAG AS FEEFLAG,1 AS PKNUMBER,PIPKTOTAL AS PKTOTAL,
  SENDSTATUS,1 AS SENDLEVEL,
  PILONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,
  SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,
  ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE FROM TMP_RDMTTASK WHERE (PILONGMSG IS NOT NULL);
END;
/

--PROMPT
--PROMPT CREATING PROCEDURE GW_MTTASKSUPPV3
--PROMPT ================================
--PROMPT
CREATE OR REPLACE PROCEDURE GW_MTTASKSUPPV3
(
  PIOLDMSGID IN NUMBER,
  PINEWMSGID  IN NUMBER,
  PISRCUID  IN NUMBER,
  PISRCUSRID  IN VARCHAR2,
  PISRCSPGATE  IN VARCHAR2,
  PISRCSPNUMBER IN  VARCHAR2,
  PIDESTUID  IN NUMBER,
  PIDESTUSRID  IN VARCHAR2,
  PIDESTSPGATE  IN VARCHAR2,
  PIDESTSPNUMBER  IN VARCHAR2,
  PIDESTFEEFLAG  IN NUMBER,
  PISPLITLEN  IN NUMBER,
  PIMULTILEN1  IN NUMBER,
  PIMULTILEN2  IN NUMBER,
  PINEWSIGNLEN  IN NUMBER,
  PIOLDSIGNLEN  IN NUMBER,
  PISIGNATURE  IN VARCHAR2,
  PINEWSIGNPOS IN NUMBER,
  PIOLDSIGNPOS IN NUMBER,
  PIENSPLITLEN IN NUMBER, --英文短信单条长度，小于等于0标识不支持英文短信
  PIENMULTILEN1  IN NUMBER, --英文长短信拆分长度
  PIENMULTILEN2  IN NUMBER, --英文长短信最后一条长度
  PINEWENSIGNLEN  IN NUMBER, --补发英文签名长度
  PIOLDENSIGNLEN  IN NUMBER, --原英文签名长度
  PIENSIGNATURE  IN VARCHAR2, --英文签名
  PIRECVMTTIME  IN VARCHAR2,
  OUT_CURSOR      OUT SYS_REFCURSOR
  )
AS
  PISENDNUM NUMBER(11);
  PIPKTOTAL NUMBER(11);
  PIPKNUM   NUMBER(11);
  PIINITMSGID NUMBER(22);
  PISINGLEMSG VARCHAR2(720);
  PISINGLEMSG1 VARCHAR2(720);
  PILONGMSG VARCHAR2(3000);
  PITOTALCNT NUMBER(11);
  PILONGMSGLEN NUMBER(11);
  PIECID NUMBER(11);
  PIPHONE VARCHAR2(21);
  PISENDLEVEL NUMBER(11);
  PITASKID NUMBER(11);
  --PIRECVMTTIME TIMESTAMP;
  PISRCCPNO  VARCHAR2(21);
  PIDESTCPNO VARCHAR2(21);
  PITPUDHI NUMBER(11);
  PITPPID NUMBER(11);
  PILONGMSGSEQ NUMBER(11);
  PIMSGFMT NUMBER(11);
  PIUNICOM NUMBER(11);
  PIMOBILEAREA NUMBER(11);
  PISVRTYPE VARCHAR2(64);
  PIUSERMSGID NUMBER(22);
  PISENDTYPE NUMBER(11);
  PIP1 VARCHAR2(64);
  PIP2 VARCHAR2(64);
  PIP3 VARCHAR2(64);
  PIP4 VARCHAR2(64);
  PIMODULEID NUMBER(11);
  PIATTIME NUMBER(22);
  PIVALIDTIME NUMBER(22);
  PIBATCHID NUMBER(22);
  PIAREACODE NUMBER(11);
  ICOUNT NUMBER(11);
  PITEMPCNT1 NUMBER(11);
  PITEMPCNT2 NUMBER(11);

  PISPLITLEN_V NUMBER(11);
  PIMULTILEN1_V  NUMBER(11);
  PIMULTILEN2_V  NUMBER(11);
  PINEWSIGNLEN_V  NUMBER(11);
  PIOLDSIGNLEN_V  NUMBER(11);
  PISIGNATURE_V  VARCHAR2(22);
  PIPTMSGID_P  NUMBER(22);
BEGIN

  /*--检查查临时表是否存在,如果存在则清空,不存在直接返回
  SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_RDMTTASK');
  IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_RDMTTASK';
  ELSE
    RETURN;
  END IF;
  */
  PILONGMSG:='';
  --PIRECVMTTIME:= SYSTIMESTAMP;
  PISRCCPNO:= SUBSTR(PISRCSPNUMBER,LENGTH(PISRCSPGATE)+1,LENGTH(PISRCSPNUMBER)-LENGTH(PISRCSPGATE));
  PIDESTCPNO:= NVL(SUBSTR(PIDESTSPNUMBER,LENGTH(PIDESTSPGATE)+1,LENGTH(PIDESTSPNUMBER)-LENGTH(PIDESTSPGATE)), ' ');
   --取补发帐号的费用
  --SELECT SENDNUM INTO PISENDNUM FROM USERFEE WHERE USERID=PIDESTUSRID;

  --每次调用存储过程时候，先清空TMP_RDMTTASK会话级别的临时表
  EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_RDMTTASK';

  --该模式可以把原始MSGID返给用户--用旧的MSGID复制一份记录插入临时表
  INSERT INTO TMP_RDMTTASK("UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
  SELECT "UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
  FROM GW_MT_TASK_BAK WHERE PTMSGID=PIOLDMSGID AND USERID=PISRCUSRID AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND INSTR(TRIM(SPGATE)||TRIM(CPNO),PISRCSPNUMBER)=1 ;
  PITEMPCNT1:=NVL(SQL%ROWCOUNT,0);

  IF PITEMPCNT1<=0 THEN
  INSERT INTO TMP_RDMTTASK("UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
  SELECT "UID",PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
  SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
  DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
  MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
  P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
  FROM MT_TASK WHERE PTMSGID=PIOLDMSGID AND USERID=PISRCUSRID AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND INSTR(TRIM(SPGATE)||TRIM(CPNO),PISRCSPNUMBER)=1 ;
  PITEMPCNT1:=NVL(SQL%ROWCOUNT,0);
  END IF;

  DELETE FROM TMP_RDMTTASK WHERE UNICOM=5 AND MSGFMT=0;
  PITEMPCNT2:=NVL(SQL%ROWCOUNT,0);

  IF PITEMPCNT1 - PITEMPCNT2>0 THEN
    SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,
        TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
        MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
        SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE  INTO
        PIPKTOTAL,PIPKNUM,PIECID,PIPHONE,PISENDLEVEL,
        PITASKID,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,PIUNICOM,
        PIMOBILEAREA,PISVRTYPE,PITPPID,PIUSERMSGID,
        PISENDTYPE,PIP1,PIP2,PIP3,PIP4,PIMODULEID,PIATTIME,PIVALIDTIME,PIBATCHID,PIAREACODE
    FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
    --如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = PIMSGFMT AND 0 <= PIOLDENSIGNLEN) THEN
       PIOLDSIGNLEN_V:=PIOLDENSIGNLEN;
     ELSE
       PIOLDSIGNLEN_V:=PIOLDSIGNLEN;
     END IF; --IF (0 == PIMSGFMT AND 0 <= PIOLDENSIGNLEN) THEN
     --如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = PIMSGFMT AND 0 < PIENSPLITLEN) THEN
       PISPLITLEN_V:=PIENSPLITLEN;
       PIMULTILEN1_V:=PIENMULTILEN1;
       PIMULTILEN2_V:=PIENMULTILEN2;
       PINEWSIGNLEN_V:=PINEWENSIGNLEN;
       PISIGNATURE_V:=PIENSIGNATURE;
     ELSE
       PISPLITLEN_V:=PISPLITLEN;
       PIMULTILEN1_V:=PIMULTILEN1;
       PIMULTILEN2_V:=PIMULTILEN2;
       PINEWSIGNLEN_V:=PINEWSIGNLEN;
       PISIGNATURE_V:=PISIGNATURE;
     END IF;

     if (0 = PINEWSIGNLEN_V) THEN
       PISIGNATURE_V:='';
     END IF;

     IF (PIPKTOTAL <= 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2)) THEN--对于非长短信补发的处理
        PILONGMSG:='';
        --取短信内容
        SELECT MESSAGE INTO PILONGMSG FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
        --更新替换MSGID
        UPDATE GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
        UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN_V; --减去签名的净长度

        IF PIOLDSIGNPOS=0 THEN--去掉原短信的签名
          PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        ELSE
          PILONGMSG:=SUBSTR(PILONGMSG,1+PIOLDSIGNLEN_V,PILONGMSGLEN);
        END IF;

        PILONGMSGLEN := LENGTH(PILONGMSG);
        IF PILONGMSGLEN > 0 THEN
          --计算拆分条数
          IF PILONGMSGLEN<=PISPLITLEN_V THEN
          PIPKTOTAL:=1;
          ELSE
          PIPKTOTAL:=TRUNC(1+(PILONGMSGLEN-PIMULTILEN2_V+PIMULTILEN1_V-1)/(PIMULTILEN1_V));
          END IF;--END OF IF PILONGMSGLEN<=PISPLITLEN

          IF PINEWSIGNPOS=0 THEN--增加新的签名
            PILONGMSG := TRIM(PILONGMSG)||PISIGNATURE_V;
          ELSE
            PILONGMSG := PISIGNATURE_V||TRIM(PILONGMSG);
          END IF;

          --调用插入存储过程
          GW_WR_MTTASKV1(PIDESTUID,PINEWMSGID,2,1,PIPKTOTAL,1,
                  PISPLITLEN_V,PIMULTILEN1_V,PIMULTILEN2_V,PINEWSIGNLEN_V,PIECID,
                  PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,PIRECVMTTIME,PILONGMSG,
                  PIPHONE,PIDESTFEEFLAG,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                  PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PIPKNUM,PISVRTYPE,
                  PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
        ELSE
          PILONGMSG:='';
        END IF;--END OF IF PILONGMSGLEN > 0
        PIPKNUM:=1;
    /*
    ELSIF (PIPKTOTAL > 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2) AND PITPUDHI=1) THEN--对标准协议长短信的补发
      PILONGMSG:='';
      --取短信内容
      SELECT MESSAGE INTO PILONGMSG FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID;
      --更新替换MSGID
      UPDATE MT_TASK SET PTMSGID=PINEWMSGID,RESENDCNT=1 WHERE PTMSGID=PIOLDMSGID;
      IF (PIPKTOTAL=PIPKNUM)THEN ---如果是最后一条，去掉旧签名，加上新签名
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN; --减去签名的净长度
        PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        PILONGMSG := PILONGMSG||PISIGNATURE;
      END IF;
      PILONGMSGLEN := LENGTH(PILONGMSG);
      IF PILONGMSGLEN > 0 THEN
        --调用插入存储过程
        GW_WR_MTTASKSRV1(PIDESTUID,PIOLDMSGID,2,1,PIPKTOTAL,1,PIECID,
                PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,TO_CHAR(PIRECVMTTIME, 'YYYY-MM-DD HH24:MI:SS'),PILONGMSG,
                PIPHONE,PIDESTFEEFLAG,PIPKNUM,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,
                PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
      ELSE
        PILONGMSG:='';
      END IF;--END OF IF PILONGMSGLEN > 0
    */
    ELSIF (PIPKTOTAL > 1 AND ((PIPKTOTAL <= PISENDNUM AND PIDESTFEEFLAG=1) OR PIDESTFEEFLAG=2) AND PITPUDHI=0)THEN--对非标准长短信协议的处理
      PILONGMSG:=' ';
      --没有补发过且通道号跟源通道号相等
      SELECT COUNT(*) INTO ICOUNT FROM TMP_RDMTTASK WHERE PTMSGID=PIOLDMSGID AND RESENDCNT<1 AND TRIM(SPGATE)=PISRCSPGATE;
      IF ICOUNT>0 THEN
        --循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
        --计算起始MSGID
        PIINITMSGID := PIOLDMSGID-(PIPKNUM-1)*17179869184;
        PIPKNUM := 1;
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          --取短信内容 --若长短信中间的某条缺失，则不补发(暂不考虑)
          BEGIN
          SELECT MESSAGE INTO PISINGLEMSG FROM GW_MT_TASK_BAK WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
          exception
            when no_data_found then
              PISINGLEMSG := ' ';
          end;
          IF PISINGLEMSG = ' ' THEN
            --拼接短信内容
            BEGIN
            SELECT MESSAGE INTO PISINGLEMSG1 FROM MT_TASK WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                PISINGLEMSG1:=' ';
            END;
            IF NVL(LENGTH(LTRIM(PISINGLEMSG1)),0)>0 THEN
             --更新替换MSGID
            PILONGMSG := NVL(PILONGMSG,' ')||NVL(PISINGLEMSG1,' ');
            UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
            END IF;--IF LENGTH(PISINGLEMSG1)>0 THEN
          ELSE
            PILONGMSG := NVL(PILONGMSG,' ')||NVL(PISINGLEMSG,' ');
            UPDATE GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=PIINITMSGID+(PIPKNUM-1)*17179869184;
          END IF;
            --拼接短信内容
           PIPKNUM := PIPKNUM+1;
        END LOOP;--END OF WHILE PIPKNUM <= PIPKTOTAL
        PILONGMSGLEN := LENGTH(PILONGMSG)-PIOLDSIGNLEN_V ;--减去签名的净长度

        IF PIOLDSIGNPOS=0 THEN--去掉原短信的签名
          PILONGMSG:=SUBSTR(PILONGMSG,1,PILONGMSGLEN);
        ELSE
          PILONGMSG:=SUBSTR(PILONGMSG,1+PIOLDSIGNLEN_V,PILONGMSGLEN);
        END IF;

        PILONGMSGLEN := LENGTH(PILONGMSG);
        IF PILONGMSGLEN > 0 THEN
          --计算拆分条数
          IF PILONGMSGLEN<=PISPLITLEN_V THEN
          PIPKTOTAL:=1;
          ELSE
          PIPKTOTAL:=TRUNC(1+(PILONGMSGLEN-PIMULTILEN2_V+PIMULTILEN1_V-1)/(PIMULTILEN1_V));
          END IF;--END OF IF PILONGMSGLEN<=PISPLITLEN

          IF PINEWSIGNPOS=0 THEN--增加新的签名
            PILONGMSG := TRIM(PILONGMSG)||PISIGNATURE_V;
          ELSE
            PILONGMSG := PISIGNATURE_V||TRIM(PILONGMSG);
          END IF;

          --调用插入存储过程
          GW_WR_MTTASKV1(PIDESTUID,PINEWMSGID,2,1,PIPKTOTAL,1,
                  PISPLITLEN_V,PIMULTILEN1_V,PIMULTILEN2_V,PINEWSIGNLEN_V,PIECID,
                  PIDESTUSRID,PIDESTSPGATE,PIDESTCPNO,PIRECVMTTIME,PILONGMSG,
                  PIPHONE,PIDESTFEEFLAG,PISENDLEVEL,PITASKID,' ',PITPUDHI,
                  PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PIPKNUM,PISVRTYPE,
                  PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
        ELSE
          PILONGMSG:='';
        END IF;--END OF IF PILONGMSGLEN > 0
          PIPKNUM:=1;
      END IF;--END OF IF EXISTS(SELECT COUNT(*) FROM PITMP WHERE PTMSGID=PIOLDMSGID AND RESENDCNT<1 AND (TRIM(SPGATE)+TRIM(CPNO))=PISRCSPNUMBER)
    END  IF;--END OF IF PIPKTOTAL > 1
  END IF;--END OF IF PIPIROWCOUNT<>0
  --返回给上层数据
  PIPTMSGID_P:=PINEWMSGID;
  UPDATE TMP_RDMTTASK SET PTNEWMSGID=PIPTMSGID_P WHERE PTMSGID=PIOLDMSGID;

  OPEN OUT_CURSOR FOR
  SELECT "UID",PTNEWMSGID AS PTMSGID,ECID,TASKID,PIDESTUSRID AS USERID,PIDESTSPGATE AS SPGATE,
  PIDESTCPNO AS CPNO,PHONE,RETFLAG,PIDESTFEEFLAG AS FEEFLAG,1 AS PKNUMBER,PIPKTOTAL AS PKTOTAL,
  SENDSTATUS,1 AS SENDLEVEL,
  PILONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,
  SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,
  ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE FROM TMP_RDMTTASK WHERE (PILONGMSG IS NOT NULL);
END;
/

--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V73.06-V73.07 END------------------------