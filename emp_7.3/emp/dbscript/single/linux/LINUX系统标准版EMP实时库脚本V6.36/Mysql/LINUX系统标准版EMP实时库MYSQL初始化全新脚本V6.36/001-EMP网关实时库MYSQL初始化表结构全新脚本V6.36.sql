DROP TABLE IF EXISTS `LF_VERSION`;
/*EMP产品版本版本信息表*/
CREATE TABLE LF_VERSION
(
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,		/*自增ID*/
	PRODUCT_ID INT DEFAULT 0 NOT NULL,	/*产品编号:1000：EMP系统*/
	PROCESS_ID INT DEFAULT 0 NOT NULL,	/*程序编号:1000: EMP-WEB,2000: EMP_GATEWAY,3000: SMT_SPGATE*/
	MODULE_ID INT DEFAULT 0	NOT NULL,	/*模块编号模块编号四位（WEB前端模块以1开头，WBS以2开头，SPGATE以3开头）*/
	MODULE_NAME VARCHAR(32) DEFAULT '' NOT NULL,/*模块名称*/
	VERSION VARCHAR(16) DEFAULT '0' NOT NULL,/*模块版本号*/
	UPDATETIME DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',/*更新时间*/
	CREATETIME DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',	/*创建时间*/
	MEMO VARCHAR(128) DEFAULT '' NOT NULL /*备注*/
) ENGINE=INNODB DEFAULT CHARSET=UTF8;

DROP TABLE IF EXISTS `LF_VERSION_HIS`;
/*EMP产品版本版本信息历史表,LF_VERSION_HIS*/ 
CREATE TABLE LF_VERSION_HIS
(
	ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,     /*自增ID*/
	PRODUCT_ID INT DEFAULT 0 NOT NULL, /*产品编号1000：EMP系统*/
	PROCESS_ID INT DEFAULT 0 NOT NULL, /*程序编号1000: EMP-WEB,2000: EMP_GATEWAY,3000: SMT_SPGATE*/
	MODULE_ID INT DEFAULT 0	NOT NULL,  /*模块编号四位（WEB前端模块以1开头，WBS以2开头，SPGATE以3开头）*/
	MODULE_NAME VARCHAR(32) DEFAULT '' NOT NULL,/*模块名称*/
	VERSION VARCHAR(16) DEFAULT '0' NOT NULL,/*模块版本号*/
	UPDATETIME DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',/*更新时间*/
	CREATETIME DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',/*创建时间*/
	MEMO VARCHAR(128) DEFAULT '' NOT NULL /*备注*/
) ENGINE=INNODB DEFAULT CHARSET=UTF8;

DROP TABLE IF EXISTS `LF_DB_SCRIPT`;
/*EMP产品数据库版本信息表*/
CREATE TABLE LF_DB_SCRIPT
(
ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,/*自增ID*/
VERSION VARCHAR(16) DEFAULT '0' NOT NULL, /*脚本版本号*/
UPDATETIME DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',	  /*更新时间*/
CREATETIME DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',	  /*创建时间*/
CURRENT_NO INT DEFAULT 0 NOT NULL,			/*当前脚本序号 */
TOTAL INT DEFAULT 0	NOT NULL,			/*总脚本个数 */
STATE INT DEFAULT -1 NOT NULL,	/*1执行中；2执行成功；*/
MEMO VARCHAR(128) DEFAULT '' NOT NULL /*备注*/
) ENGINE=INNODB DEFAULT CHARSET=UTF8;

DROP PROCEDURE IF EXISTS `LF_PVERV0`;
CREATE PROCEDURE `LF_PVERV0`(
    VERSIONSTR VARCHAR(32),
    DBVERSIONSTR VARCHAR(32),
	WBSVERSION VARCHAR(32),
    SPGATEVERSION VARCHAR(32),
    NUM INT,
    TOTALSTR INT
)
BEGIN
		/*EMP产品版本记录*/
		IF NOT EXISTS(SELECT * FROM LF_VERSION WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
			/*EMP-WEB*/
			INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
			VALUES(1000,1000,VERSIONSTR,NOW(),NOW(),'EMP-WEB');
		END IF;
		IF NOT EXISTS(SELECT * FROM LF_VERSION WHERE VERSION=WBSVERSION AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
			/*EMP_GATEWAY*/
			INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
			VALUES(1000,2000,WBSVERSION,NOW(),NOW(),'EMP_GATEWAY');
		END IF;
		IF NOT EXISTS(SELECT * FROM LF_VERSION WHERE VERSION=SPGATEVERSION AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
			/*SMT_SPGATE*/
			INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
			VALUES(1000,3000,SPGATEVERSION,NOW(),NOW(),'SMT_SPGATE');
		END IF;
		/*EMP产品版本历史记录*/
		IF NOT EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
			/*EMP-WEB*/
			INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
			VALUES(1000,1000,VERSIONSTR,NOW(),NOW(),'EMP-WEB');
		END IF;
		IF NOT EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSION AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
			/*EMP_GATEWAY*/
			INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
			VALUES(1000,2000,WBSVERSION,NOW(),NOW(),'EMP_GATEWAY');
		END IF;
		IF NOT EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSION AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
			/*SMT_SPGATE*/
			INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
			VALUES(1000,3000,SPGATEVERSION,NOW(),NOW(),'SMT_SPGATE');
		END IF;
		IF NOT EXISTS(SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR AND CURRENT_NO=NUM AND TOTAL=TOTALSTR) THEN
			/*EMP产品数据库版本信息表*/
			INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
			VALUES(DBVERSIONSTR,NOW(),NOW(),NUM,TOTALSTR,1,'1号脚本');
		END IF;

END;
CALL LF_PVERV0('6.7.0.352','6.36','8.4.14.168','6.1.23.316',1,3);
DROP PROCEDURE IF EXISTS `LF_PVERV0`;

/*
MYSQL DATA TRANSFER
SOURCE HOST: 192.169.1.22
SOURCE DATABASE: WJ_AA
TARGET HOST: 192.169.1.22
TARGET DATABASE: WJ_AA
DATE: 2013-03-25 16:14:16
*/

-- ----------------------------
-- TABLE STRUCTURE FOR A_CHANNELMAP
-- ----------------------------
CREATE TABLE `A_CHANNELMAP` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_A_CHMAP_CPNO` (`CPNO`),
  UNIQUE KEY `IX_A_CHMAP_SPNO` (`SPNUMBER`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_CMDQUE
-- ----------------------------
CREATE TABLE `A_CMDQUE` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `GWNO` INT(11) NOT NULL DEFAULT '0',
  `GWTYPE` INT(11) NOT NULL DEFAULT '4000',
  `CMDTYPE` INT(11) NOT NULL DEFAULT '0',
  `CMDINFO` VARCHAR(512) NOT NULL DEFAULT '',
  `CMDPARAM` VARCHAR(1024) NOT NULL DEFAULT '',
  `DEALSTATUS` INT(11) NOT NULL DEFAULT '1',
  `RESULTCODE` VARCHAR(32) NOT NULL DEFAULT 'SUCCESS',
  `REQTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DONETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_CMDQUE_HIS
-- ----------------------------
CREATE TABLE `A_CMDQUE_HIS` (
  `ID` INT(11) NOT NULL DEFAULT '0',
  `GWNO` INT(11) NOT NULL DEFAULT '0',
  `GWTYPE` INT(11) NOT NULL DEFAULT '200',
  `CMDTYPE` INT(11) NOT NULL DEFAULT '0',
  `CMDINFO` VARCHAR(512) NOT NULL DEFAULT '',
  `CMDPARAM` VARCHAR(1024) NOT NULL DEFAULT '',
  `DEALSTATUS` INT(11) NOT NULL DEFAULT '1',
  `RESULTCODE` VARCHAR(32) NOT NULL DEFAULT 'SUCCESS',
  `REQTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DONETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00'
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_GWACCOUNT
-- ----------------------------
CREATE TABLE `A_GWACCOUNT` (
  `GWNO` INT(11) NOT NULL DEFAULT '100',
  `PTACCUID` INT(11) NOT NULL DEFAULT '0',
  `PTACCID` VARCHAR(11) NOT NULL DEFAULT '',
  `PTACCPWD` VARCHAR(32) NOT NULL DEFAULT '',
  `SPACCID` VARCHAR(32) NOT NULL DEFAULT '',
  `SPACCPWD` VARCHAR(32) NOT NULL DEFAULT '',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `SERVICETYPE` VARCHAR(32) NOT NULL DEFAULT '',
  `FEEUSERTYPE` INT(11) NOT NULL DEFAULT '2',
  `SPIP` VARCHAR(32) NOT NULL DEFAULT '',
  `SPPORT` INT(11) NOT NULL DEFAULT '7890',
  `SPEEDLIMIT` INT(11) NOT NULL DEFAULT '100',
  `PROTOCOLCODE` INT(11) NOT NULL DEFAULT '5',
  `PTPORT` INT(11) NOT NULL DEFAULT '7892',
  `PTIP` VARCHAR(32) NOT NULL DEFAULT '127.0.0.1',
  `PTACCNAME` VARCHAR(64) NOT NULL DEFAULT '',
  `PROTOCOLPARAM` VARCHAR(1024) NOT NULL DEFAULT '',
  `SPTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEURL` VARCHAR(256) NOT NULL DEFAULT '',		                              
  `BALANCE` INT(11)	NOT NULL DEFAULT 0,		                                  
  `BALANCETH` INT(11)	NOT NULL DEFAULT 0,	                                  
  `UPDATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SPFEEFLAG` INT(11) NOT NULL DEFAULT 1,
  `PTNODE` VARCHAR(1024)	NOT NULL DEFAULT '' ,           
  PRIMARY KEY  (`GWNO`,`PTACCUID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_GWDBCONF
-- ----------------------------
CREATE TABLE `A_GWDBCONF` (
  `DBTYPE` INT(11) DEFAULT '2',
  `DBIP` VARCHAR(64) NOT NULL DEFAULT '127.0.0.1',
  `DBPORT` INT(11) NOT NULL DEFAULT '1433',
  `DBNAME` VARCHAR(64) NOT NULL DEFAULT 'EMPSVR',
  `DBUSER` VARCHAR(64) NOT NULL DEFAULT 'EMPSVR',
  `DBPWD` VARCHAR(64) NOT NULL DEFAULT '123456'
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_GWLOGS
-- ----------------------------
CREATE TABLE `A_GWLOGS` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `GWNO` INT(11) NOT NULL DEFAULT '0',
  `GWTYPE` INT(11) NOT NULL DEFAULT '200',
  `LOGTYPE` INT(11) NOT NULL DEFAULT '0',
  `LOGLEVEL` INT(11) NOT NULL DEFAULT '0',
  `LOGTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `LOGS` VARCHAR(4000) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_GWPARAMCONF
-- ----------------------------
CREATE TABLE `A_GWPARAMCONF` (
  `GWTYPE` INT(11) NOT NULL DEFAULT '0',
  `PARAMITEM` VARCHAR(64) NOT NULL DEFAULT '',
  `PARAMNAME` VARCHAR(64) NOT NULL DEFAULT '',
  `PARAMATTRIBUTE` INT(11) NOT NULL DEFAULT '0',
  `PARAMMEMO` VARCHAR(256) NOT NULL DEFAULT '',
  `DEFAULTVALUE` VARCHAR(256) NOT NULL DEFAULT '',
  `VALUERANGE` VARCHAR(256) NOT NULL DEFAULT '',
  `CONTROLTYPE` INT(11) NOT NULL DEFAULT '0',
  `HKPARAMNAME` varchar(256) NOT NULL DEFAULT '',
  `HKPARAMMEMO` varchar(512) NOT NULL DEFAULT '',
  `ENPARAMNAME` varchar(256) NOT NULL DEFAULT '',
  `ENPARAMMEMO` varchar(512) NOT NULL DEFAULT '',
  PRIMARY KEY  (`GWTYPE`,`PARAMITEM`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_GWPARAMTMPL
-- ----------------------------
CREATE TABLE `A_GWPARAMTMPL` (
  `GWTYPE` INT(11) NOT NULL DEFAULT '0',
  `PARAMITEM` VARCHAR(64) DEFAULT '',
  `PARAMVALUE` VARCHAR(255) DEFAULT ''
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_GWPARAMVALUE
-- ----------------------------
CREATE TABLE `A_GWPARAMVALUE` (
  `GWNO` INT(11) NOT NULL DEFAULT '0',
  `GWTYPE` INT(11) NOT NULL DEFAULT '0',
  `PARAMITEM` VARCHAR(64) NOT NULL DEFAULT '',
  `PARAMVALUE` VARCHAR(256) NOT NULL DEFAULT '',
  PRIMARY KEY  (`GWNO`,`GWTYPE`,`PARAMITEM`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_GWSPBIND
-- ----------------------------
CREATE TABLE `A_GWSPBIND` (
  `PTACCUID` INT(11) NOT NULL DEFAULT '0',
  `GATEID` INT(11) NOT NULL DEFAULT '0'
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_PROINFO
-- ----------------------------
CREATE TABLE `A_PROINFO` (
  `SERIALNUM` VARCHAR(32) NOT NULL DEFAULT '',
  `PROTYPE` INT(11) NOT NULL DEFAULT '1',
  `PROSTATUS` INT(11) NOT NULL DEFAULT '100',
  `VALIDDAYS` INT(11) NOT NULL DEFAULT '0',
  `CORPNAME` VARCHAR(128) NOT NULL DEFAULT '',
  `STATUSINFO` VARCHAR(1024) NOT NULL DEFAULT '',
  `SENDSPEED` INT(11) NOT NULL DEFAULT '100',
  PRIMARY KEY  (`SERIALNUM`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_PROTOCOLTMPL
-- ----------------------------
CREATE TABLE `A_PROTOCOLTMPL` (
  `PROTOCOLCODE` INT(11) NOT NULL DEFAULT '5',
  `PROTOCOL` VARCHAR(32) NOT NULL DEFAULT 'CMPP2X',
  `PROTOCOLPARAM` VARCHAR(1024) NOT NULL DEFAULT '',
  PRIMARY KEY  (`PROTOCOLCODE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_SMSFWDCONF
-- ----------------------------
CREATE TABLE `A_SMSFWDCONF` (
  `PROTOCOLCODE` VARCHAR(64) NOT NULL DEFAULT '',
  `PROTOCOLNAME` VARCHAR(128) NOT NULL DEFAULT '',
  `FWDSNDURL` VARCHAR(256) NOT NULL DEFAULT '',
  `FWDRECVURL` VARCHAR(256) NOT NULL DEFAULT '',
  `FWDACCOUNT` VARCHAR(32) NOT NULL DEFAULT '',
  `FWDPASSWD` VARCHAR(32) NOT NULL DEFAULT '',
  PRIMARY KEY  (`PROTOCOLCODE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_SMSMSGIDMAP
-- ----------------------------
CREATE TABLE `A_SMSMSGIDMAP` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERMSGID` VARCHAR(64) NOT NULL DEFAULT '',
  `PITIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_SMSPUSHBIND
-- ----------------------------
CREATE TABLE `A_SMSPUSHBIND` (
  `PROTOCOLCODE` VARCHAR(64) NOT NULL DEFAULT '',
  `USERUID` INT(11) NOT NULL DEFAULT '0'
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR A_SMSPUSHCONF
-- ----------------------------
CREATE TABLE `A_SMSPUSHCONF` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `PROTOCOLCODE` VARCHAR(64) NOT NULL DEFAULT '',
  `PROTOCOLNAME` VARCHAR(128) NOT NULL DEFAULT '',
  `PUSHURL` VARCHAR(256) NOT NULL DEFAULT '',
  `PUSHACCOUNT` VARCHAR(32) NOT NULL DEFAULT '',
  `PUSHPASSWD` VARCHAR(32) NOT NULL DEFAULT '',
  `PUSHKEY` VARCHAR(256) NOT NULL DEFAULT '',
  `PUSHFLAG` INT(11) NOT NULL DEFAULT '0',
  `MAXBATCHNUM` INT(11) NOT NULL DEFAULT '1',
  PRIMARY KEY  (`ID`,`PROTOCOLCODE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR AGENTACCOUNT
-- ----------------------------
CREATE TABLE `AGENTACCOUNT` (
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `PRIVILEGE` INT(11) NOT NULL DEFAULT '11',
  `USERFEEFLAG` INT(11) NOT NULL DEFAULT '1',
  `DESCRIPTION` VARCHAR(100) NOT NULL DEFAULT '代理帐号',
  `PRIVILEGEINFO` VARCHAR(500) NOT NULL DEFAULT '',
  PRIMARY KEY  (`LOGINID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR ATTIME_TASK
-- ----------------------------
CREATE TABLE `ATTIME_TASK` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `BMTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR BATCH_MT_REQ
-- ----------------------------
CREATE TABLE `BATCH_MT_REQ` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `MSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `BMTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `SERVICETYPE` VARCHAR(11) NOT NULL DEFAULT '',
  `SENDTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `SA` VARCHAR(21) NOT NULL DEFAULT '',
  `TITLE` VARCHAR(500) DEFAULT NULL,
  `MSG` VARCHAR(3000) NOT NULL DEFAULT '',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `REMOTEURL` VARCHAR(256) NOT NULL DEFAULT '',
  `LOCALPATH` VARCHAR(256) NOT NULL DEFAULT '',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `ATTIME` VARCHAR(14) NOT NULL DEFAULT '',
  `VALIDTIME` VARCHAR(14) NOT NULL DEFAULT '',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ATTIMEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TOTALNUM` INT(11) NOT NULL DEFAULT '0',
  `SENDNUM` INT(11) NOT NULL DEFAULT '0',
  `TASKTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  `CLUPATH`  VARCHAR(256)	NOT NULL DEFAULT '',
  `CLUGWNO`  INT(11)	NOT NULL DEFAULT '0',     
  PRIMARY KEY  (`ID`),
  KEY `IX_BATCH_MT_REQ_BATCHID` (`BATCHID`),
  UNIQUE KEY `IX_BMPTID` (`BMTMSGID`),
  KEY `IX_LOGINID` (`LOGINID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR BATCH_MT_REQ_HIS
-- ----------------------------
CREATE TABLE `BATCH_MT_REQ_HIS` (
  `ID` INT(11) NOT NULL DEFAULT '0',
  `MSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `BMTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `SERVICETYPE` VARCHAR(10) NOT NULL DEFAULT '',
  `SENDTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `SA` VARCHAR(21) NOT NULL DEFAULT '',
  `TITLE` VARCHAR(500) DEFAULT NULL,
  `MSG` VARCHAR(3000) NOT NULL DEFAULT '',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `REMOTEURL` VARCHAR(256) NOT NULL DEFAULT '',
  `LOCALPATH` VARCHAR(256) NOT NULL DEFAULT '',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `ATTIME` VARCHAR(14) NOT NULL DEFAULT '',
  `VALIDTIME` VARCHAR(14) NOT NULL DEFAULT '',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ATTIMEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL,
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TOTALNUM` INT(11) NOT NULL DEFAULT '0',
  `SENDNUM` INT(11) NOT NULL DEFAULT '0',
  `TASKTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  `CLUPATH`  VARCHAR(256)	NOT NULL DEFAULT '',
  `CLUGWNO`  INT(11)	NOT NULL DEFAULT '0', 
  KEY `IX_BATCH_MTREQHIS_BATCHID` (`BATCHID`),
  KEY `IX_BATHIS_RECVTIME` (`RECVTIME`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR GT_PORT_USED
-- ----------------------------
CREATE TABLE `GT_PORT_USED` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `SPISUNCM` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `ROUTEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MOBIAREA` VARCHAR(32) NOT NULL DEFAULT '',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `GATESEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PORTTYPE` INT(11) NOT NULL DEFAULT '0',
  `STATUS` INT(11) NOT NULL DEFAULT '0',
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `FEEFLAG` INT(11) NOT NULL DEFAULT '1',
  `SIGNSTR` VARCHAR(20) NOT NULL DEFAULT '',
  `SIGNLEN` INT(11) NOT NULL DEFAULT '0',
  `MAXWORDS` INT(11) NOT NULL DEFAULT '360',
  `SINGLELEN` INT(11) NOT NULL DEFAULT '70',
  `MULTILEN1` INT(11) NOT NULL DEFAULT '67',
  `MULTILEN2` INT(11) NOT NULL DEFAULT '67',
  `USERCODE` VARCHAR(10) NOT NULL DEFAULT '',
  `GATETYPE` INT(11) NOT NULL DEFAULT '1',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `SENDTMSPAN` VARCHAR(512) NOT NULL DEFAULT '',
  `FORBIDTMSPAN` VARCHAR(512) NOT NULL DEFAULT '',
  `SENDTIMEBEGIN` VARCHAR(8) NOT NULL DEFAULT '00:00:00',
  `SENDTIMEEND` VARCHAR(8) NOT NULL DEFAULT '23:59:59',
  `MEMO` VARCHAR(100) NOT NULL DEFAULT '',
  `ENSIGNSTR` VARCHAR(20) NOT NULL DEFAULT ' ' ,
  `ENSIGNLEN` INT(11) NOT NULL DEFAULT '20' ,
  `ENMAXWORDS` INT(11) NOT NULL DEFAULT '720',
  `ENSINGLELEN` INT(11) NOT NULL DEFAULT '160',
  `ENMULTILEN1` INT(11) NOT NULL DEFAULT '153',
  `ENMULTILEN2` INT(11) NOT NULL DEFAULT '133',
  PRIMARY KEY  (`SPGATE`,`CPNO`,`SPISUNCM`,`ROUTEFLAG`,`MOBIAREA`,`USERID`,`GATESEQ`,`GATETYPE`),
  UNIQUE KEY `IX_GT_PORT_USED` (`ID`),
  KEY `IX_GT_PORT_USED_LOGINID` (`LOGINID`),
  KEY `IX_GT_PORT_USED_USERID` (`USERID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR HTTPERRCODE
-- ----------------------------
CREATE TABLE `HTTPERRCODE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `ERRSTATUS` VARCHAR(16) NOT NULL DEFAULT '',
  `PROTOCOLTYPE` VARCHAR(32) NOT NULL DEFAULT '',
  `ERRCODE` VARCHAR(8) NOT NULL DEFAULT '',
  `DESCRPTINFO` VARCHAR(128) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_USERDATA_UID` (`ERRSTATUS`,`PROTOCOLTYPE`,`ERRCODE`,`DESCRPTINFO`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR KEYWORD_BLACK
-- ----------------------------
CREATE TABLE `KEYWORD_BLACK` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `KEYWORD` VARCHAR(64) NOT NULL DEFAULT '',
  `KEYTYPE` INT(11) NOT NULL DEFAULT '1',
  `KEYLEVEL` INT(11) NOT NULL DEFAULT '1',
  `OPTTYPE` INT(11) NOT NULL DEFAULT '0',
  `CREATTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `COMMENTS` VARCHAR(512) NOT NULL DEFAULT '',
  PRIMARY KEY  (`KEYWORD`),
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR KF_CORPBASE
-- ----------------------------
CREATE TABLE `KF_CORPBASE` (
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `CORPACCOUNT` VARCHAR(32) NOT NULL DEFAULT '0',
  `CORPNAME` VARCHAR(128) NOT NULL DEFAULT '',
  `LICENSE` VARCHAR(10) NOT NULL DEFAULT '0',
  `OPTYPE` VARCHAR(8) NOT NULL DEFAULT '0',
  `STATUS` INT(11) NOT NULL DEFAULT '0',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `ECCPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `ECSIGN` VARCHAR(16) NOT NULL DEFAULT '',
  `MAXPERDAY` INT(11) NOT NULL DEFAULT '10000000',
  `WHITEVER` INT(11) NOT NULL DEFAULT '0',
  `ORDERTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `CANCELTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MODITIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `EXPANLIMIT` INT(11) NOT NULL DEFAULT '10',
  `STAFFLIMIT` INT(11) NOT NULL DEFAULT '10',
  `MAINNOLIMIT` INT(11) NOT NULL DEFAULT '10',
  `NEEDSIGN` INT(11) NOT NULL DEFAULT '1',
  `WHTLEVEL` INT(11) NOT NULL DEFAULT '0',
  `SPEEDLIMIT` INT(11) NOT NULL DEFAULT '1000',
  `ORDERNUM` INT(11) NOT NULL DEFAULT '0',
  `EXPRIEDDATE` VARCHAR(10) NOT NULL DEFAULT '',
  `ECMANGER` VARCHAR(11) NOT NULL DEFAULT '',
  `ECMEMO` VARCHAR(100) NOT NULL DEFAULT '',
  `ECIDBAK` INT(11) NOT NULL DEFAULT '0',
  `CORPACCOUNTBAK` VARCHAR(32) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ECID`),
  UNIQUE KEY `IX_KF_CORPBASE_CORPACCOUNT` (`CORPACCOUNT`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR KF_PARAMS
-- ----------------------------
CREATE TABLE `KF_PARAMS` (
  `PARACODE` INT(11) NOT NULL DEFAULT '0',
  `PARAVAL1` INT(11) NOT NULL DEFAULT '0',
  `PARAVAL2` VARCHAR(256) NOT NULL DEFAULT '',
  `PARAINFO` VARCHAR(100) NOT NULL DEFAULT '',
  PRIMARY KEY  (`PARACODE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_BUFINFO
-- ----------------------------
CREATE TABLE `M_MON_BUFINFO` (
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `ENDCNT` INT(11) NOT NULL DEFAULT '0',
  `MOTOTALRECV` INT(11) NOT NULL DEFAULT '0',
  `MTTOTALSND` INT(11) NOT NULL DEFAULT '0',
  `WRMOBUF` INT(11) NOT NULL DEFAULT '0',
  `UPDMOBUF` INT(11) NOT NULL DEFAULT '0',
  `UPDRPTBUF` INT(11) NOT NULL DEFAULT '0',
  `WRRPTBUF` INT(11) NOT NULL DEFAULT '0',
  `ENDRSPBUF` INT(11) NOT NULL DEFAULT '0',
  `SMTSNDBUF` VARCHAR(256) NOT NULL DEFAULT '',
  `NMTSNDBUF` INT(11) NOT NULL DEFAULT '0',
  `MTWAITBUF` INT(11) NOT NULL DEFAULT '0',
  `PRECNT` INT(11) NOT NULL DEFAULT '0',
  `MTTOTALRECV` INT(11) NOT NULL DEFAULT '0',
  `MOTOTALSND` INT(11) NOT NULL DEFAULT '0',
  `WRMTTASKBUF` INT(11) NOT NULL DEFAULT '0',
  `WRMTTMBUF` INT(11) NOT NULL DEFAULT '0',
  `WRMTVFYBUF` INT(11) NOT NULL DEFAULT '0',
  `WRMTLVLBUF` INT(11) NOT NULL DEFAULT '0',
  `PRERSPBUF` INT(11) NOT NULL DEFAULT '0',
  `PRERSPTMPBUF` INT(11) NOT NULL DEFAULT '0',
  `MOSNDBUF` INT(11) NOT NULL DEFAULT '0',
  `RPTSNDBUF` INT(11) NOT NULL DEFAULT '0',
  `MORPTWAITBUF` INT(11) NOT NULL DEFAULT '0',
  `LOGFILENUM` INT(11) NOT NULL DEFAULT '0',
  `LOGBUF` INT(11) NOT NULL DEFAULT '0',
  `RECVBUF` INT(11) NOT NULL DEFAULT '0',
  `RESNDBUF` INT(11) NOT NULL DEFAULT '0',
  `SUPPSNDBUF` INT(11) NOT NULL DEFAULT '0',
  `MONLOGBUF` INT(11) NOT NULL DEFAULT '0',
  `UPDATETIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  UNIQUE KEY `ID` (`ID`),
  KEY `ID_2` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_LOGINFO
-- ----------------------------
CREATE TABLE `M_MON_LOGINFO` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `LOGTYPE` INT(11) NOT NULL DEFAULT '0',
  `LOGS` VARCHAR(4000) NOT NULL DEFAULT '',
  `UPDATETIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_MONLOG
-- ----------------------------
CREATE TABLE `M_MON_MONLOG` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `LOGTYPE` INT(11) NOT NULL DEFAULT '0',
  `LOGS` VARCHAR(4000) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_MONMSG
-- ----------------------------
CREATE TABLE `M_MON_MONMSG` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `MSGTYPE` INT(11) NOT NULL DEFAULT '0',
  `MSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `MOBILE` VARCHAR(256) NOT NULL DEFAULT '',
  `MOBILETYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT '0',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `SENDSTATUS` INT(11) NOT NULL DEFAULT '1',
  `RESENDCNT` INT(11) NOT NULL DEFAULT '0',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_PTINFO
-- ----------------------------
CREATE TABLE `M_MON_PTINFO` (
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `PTNAME` VARCHAR(128) NOT NULL DEFAULT '',
  `PTIP` VARCHAR(4000) NOT NULL DEFAULT '',
  `PTPORT` INT(11) NOT NULL DEFAULT '9001',
  `PTTYPE` INT(11) NOT NULL DEFAULT '100',
  `PTSTATUS` INT(11) NOT NULL DEFAULT '0',
  `MONUSERID` VARCHAR(11) NOT NULL DEFAULT '',
  `MONUSERPWD` VARCHAR(32) NOT NULL DEFAULT '',
  `MONFREQ` INT(11) NOT NULL DEFAULT '5',
  `MAXRPTDELAY` INT(11) NOT NULL DEFAULT '65',
  `WARNPHONE` VARCHAR(256) NOT NULL DEFAULT '',
  `LINKMAN` VARCHAR(256) NOT NULL DEFAULT '',
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  UNIQUE KEY `ID` (`ID`),
  KEY `ID_2` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_SPGATEINFO
-- ----------------------------
CREATE TABLE `M_MON_SPGATEINFO` (
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `USERNAME` VARCHAR(128) NOT NULL DEFAULT '',
  `JTYPE` VARCHAR(64) NOT NULL DEFAULT '直连用户(CMPP)',
  `LINKNUM` INT(11) NOT NULL DEFAULT '1',
  `LOGINIP` VARCHAR(64) NOT NULL DEFAULT '',
  `ONLINESTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MTHAVESND` INT(11) NOT NULL DEFAULT '0',
  `MTREMAINED` INT(11) NOT NULL DEFAULT '0',
  `MTRECVSPD` INT(11) NOT NULL DEFAULT '0',
  `MOTOTALRECV` INT(11) NOT NULL DEFAULT '0',
  `MOHAVESND` INT(11) NOT NULL DEFAULT '0',
  `MOREMAINED` INT(11) NOT NULL DEFAULT '0',
  `MOSNDSPD` INT(11) NOT NULL DEFAULT '0',
  `RPTTOTALRECV` INT(11) NOT NULL DEFAULT '0',
  `RPTHAVESND` INT(11) NOT NULL DEFAULT '0',
  `RPTREMAINED` INT(11) NOT NULL DEFAULT '0',
  `RPTSNDSPD` INT(11) NOT NULL DEFAULT '0',
  `SNDERCNT` INT(11) NOT NULL DEFAULT '0',
  `LASTSNDERTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `LOGININTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `LOGINOUTTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `UPDATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY  (`PTCODE`,`USERID`),
  UNIQUE KEY `ID` (`ID`),
  KEY `ID_2` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_SYS_HIS
-- ----------------------------
CREATE TABLE `M_MON_SYS_HIS` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `CPUUSAGE` INT(11) NOT NULL DEFAULT '0',
  `MEMUSAGE` INT(11) NOT NULL DEFAULT '0',
  `VMEMUSAGE` INT(11) NOT NULL DEFAULT '0',
  `DISKFREESPACE` INT(11) NOT NULL DEFAULT '0',
  `UPDATETIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_SYSINFO
-- ----------------------------
CREATE TABLE `M_MON_SYSINFO` (
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `CPUUSAGE` INT(11) NOT NULL DEFAULT '0',
  `MEMUSAGE` INT(11) NOT NULL DEFAULT '0',
  `VMEMUSAGE` INT(11) NOT NULL DEFAULT '0',
  `DISKFREESPACE` INT(11) NOT NULL DEFAULT '0',
  `UPDATETIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  UNIQUE KEY `ID` (`ID`),
  KEY `ID_2` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_THREAD_HIS
-- ----------------------------
CREATE TABLE `M_MON_THREAD_HIS` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `THRID` INT(11) NOT NULL DEFAULT '0',
  `THRNAME` VARCHAR(256) NOT NULL DEFAULT '',
  `THRSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `ERRORCNT` INT(11) NOT NULL DEFAULT '0',
  `LASTERRORTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `THRLOGS` VARCHAR(2048) NOT NULL DEFAULT '',
  `LASTRUNTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `THISRUNTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `UPDATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

CREATE TABLE `M_MON_BUF_HIS`
 (`ID`           BIGINT(20)         NOT NULL AUTO_INCREMENT,
  `PTCODE`       VARCHAR(32)     NOT NULL  DEFAULT '',
  `ENDCNT`       INT(11)         NOT NULL  DEFAULT 0,
  `MOTOTALRECV`  INT(11)         NOT NULL  DEFAULT 0,
  `MTTOTALSND`   INT(11)         NOT NULL  DEFAULT 0,
  `WRMOBUF`      INT(11)         NOT NULL  DEFAULT 0,
  `UPDMOBUF`     INT(11)         NOT NULL  DEFAULT 0,
  `UPDRPTBUF`    INT(11)         NOT NULL  DEFAULT 0,
  `WRRPTBUF`     INT(11)         NOT NULL  DEFAULT 0,
  `ENDRSPBUF`    INT(11)         NOT NULL  DEFAULT 0,
  `SMTSNDBUF`    VARCHAR(256)    NOT NULL  DEFAULT '',
  `NMTSNDBUF`    INT(11)         NOT NULL  DEFAULT 0,
  `MTWAITBUF`    INT(11)         NOT NULL  DEFAULT 0,
  `PRECNT`       INT(11)         NOT NULL  DEFAULT 0,
  `MTTOTALRECV`  INT(11)         NOT NULL  DEFAULT 0,
  `MOTOTALSND`   INT(11)         NOT NULL  DEFAULT 0,
  `WRMTTASKBUF`  INT(11)         NOT NULL  DEFAULT 0,
  `WRMTTMBUF`    INT(11)         NOT NULL  DEFAULT 0,
  `WRMTVFYBUF`   INT(11)         NOT NULL  DEFAULT 0,
  `WRMTLVLBUF`   INT(11)         NOT NULL  DEFAULT 0,
  `PRERSPBUF`    INT(11)         NOT NULL  DEFAULT 0,
  `PRERSPTMPBUF` INT(11)         NOT NULL  DEFAULT 0,
  `MOSNDBUF`     INT(11)         NOT NULL  DEFAULT 0,
  `RPTSNDBUF`    INT(11)         NOT NULL  DEFAULT 0,
  `MORPTWAITBUF` INT(11)         NOT NULL  DEFAULT 0,
  `LOGFILENUM`   INT(11)         NOT NULL  DEFAULT 0,
  `LOGBUF`       INT(11)         NOT NULL  DEFAULT 0,
  `RECVBUF`      INT(11)         NOT NULL  DEFAULT 0,
  `RESNDBUF`     INT(11)         NOT NULL  DEFAULT 0,
  `SUPPSNDBUF`   INT(11)         NOT NULL  DEFAULT 0,
  `MONLOGBUF`    INT(11)         NOT NULL  DEFAULT 0,
  `UPDATETIME`   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  KEY `ID` (`ID`)
 )ENGINE=INNODB DEFAULT CHARSET=GBK;
 
-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_THREADINFO
-- ----------------------------
CREATE TABLE `M_MON_THREADINFO` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `THRID` INT(11) NOT NULL DEFAULT '0',
  `THRNAME` VARCHAR(256) NOT NULL DEFAULT '',
  `THRSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `ERRORCNT` INT(11) NOT NULL DEFAULT '0',
  `LASTERRORTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `THRLOGS` VARCHAR(2048) NOT NULL DEFAULT '',
  `LASTRUNTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `THISRUNTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `UPDATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY  (`THRID`),
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_USER_HIS
-- ----------------------------
CREATE TABLE `M_MON_USER_HIS` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `USERNAME` VARCHAR(128) NOT NULL DEFAULT '',
  `USERPRIVILEGE` INT(11) NOT NULL DEFAULT '0',
  `JTYPE` VARCHAR(64) NOT NULL DEFAULT '直连用户(CMPP)',
  `LINKNUM` INT(11) NOT NULL DEFAULT '1',
  `LOGINIP` VARCHAR(64) NOT NULL DEFAULT '',
  `ONLINESTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `USERFEE` INT(11) NOT NULL DEFAULT '0',
  `FIXFAILURERATE` INT(11) NOT NULL DEFAULT '0',
  `FAILURENUM` INT(11) NOT NULL DEFAULT '0',
  `FAILURERATE` INT(11) NOT NULL DEFAULT '0',
  `BINDINFO` VARCHAR(2000) NOT NULL DEFAULT '',
  `MTTOTALSND` INT(11) NOT NULL DEFAULT '0',
  `MTHAVESND` INT(11) NOT NULL DEFAULT '0',
  `MTREMAINED` INT(11) NOT NULL DEFAULT '0',
  `MTSNDINFO` VARCHAR(2000) NOT NULL DEFAULT '',
  `MTSNDSPD` INT(11) NOT NULL DEFAULT '0',
  `MOTOTALRECV` INT(11) NOT NULL DEFAULT '0',
  `MOREMAINED` INT(11) NOT NULL DEFAULT '0',
  `MORPTRECVSPD` INT(11) NOT NULL DEFAULT '0',
  `MOTMOUTCNT` INT(11) NOT NULL DEFAULT '0',
  `RPTTOTALRECV` INT(11) NOT NULL DEFAULT '0',
  `RPTREMAINED` INT(11) NOT NULL DEFAULT '0',
  `RPTTMOUTCNT` INT(11) NOT NULL DEFAULT '0',
  `LOGININTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `LOGINOUTTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `UPDATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR M_MON_USERINFO
-- ----------------------------
CREATE TABLE `M_MON_USERINFO` (
  `PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `USERNAME` VARCHAR(128) NOT NULL DEFAULT '',
  `USERPRIVILEGE` INT(11) NOT NULL DEFAULT '0',
  `JTYPE` VARCHAR(64) NOT NULL DEFAULT '直连用户(CMPP)',
  `LINKNUM` INT(11) NOT NULL DEFAULT '1',
  `LOGINIP` VARCHAR(64) NOT NULL DEFAULT '',
  `ONLINESTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `USERFEE` INT(11) NOT NULL DEFAULT '0',
  `FIXFAILURERATE` INT(11) NOT NULL DEFAULT '0',
  `FAILURENUM` INT(11) NOT NULL DEFAULT '0',
  `FAILURERATE` INT(11) NOT NULL DEFAULT '0',
  `BINDINFO` VARCHAR(2000) NOT NULL DEFAULT '',
  `MTTOTALSND` INT(11) NOT NULL DEFAULT '0',
  `MTHAVESND` INT(11) NOT NULL DEFAULT '0',
  `MTREMAINED` INT(11) NOT NULL DEFAULT '0',
  `MTSNDINFO` VARCHAR(2000) NOT NULL DEFAULT '',
  `MTSNDSPD` INT(11) NOT NULL DEFAULT '0',
  `MOTOTALRECV` INT(11) NOT NULL DEFAULT '0',
  `MOREMAINED` INT(11) NOT NULL DEFAULT '0',
  `MORPTRECVSPD` INT(11) NOT NULL DEFAULT '0',
  `MOTMOUTCNT` INT(11) NOT NULL DEFAULT '0',
  `RPTTOTALRECV` INT(11) NOT NULL DEFAULT '0',
  `RPTREMAINED` INT(11) NOT NULL DEFAULT '0',
  `RPTTMOUTCNT` INT(11) NOT NULL DEFAULT '0',
  `LOGININTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `LOGINOUTTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `UPDATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY  (`PTCODE`,`USERID`),
  UNIQUE KEY `ID` (`ID`),
  KEY `ID_2` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MMS_BMTREQ
-- ----------------------------
CREATE TABLE `MMS_BMTREQ` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `MSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `BMTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `SERVICETYPE` VARCHAR(10) NOT NULL DEFAULT '',
  `MSGTYPE` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `TITLE` VARCHAR(100) NOT NULL DEFAULT '',
  `TMPLID` BIGINT(20) NOT NULL DEFAULT '0',
  `MSG` VARCHAR(3000) NOT NULL DEFAULT '',
  `MSGFMT` TINYINT(4) NOT NULL DEFAULT '15',
  `REMOTEURL` VARCHAR(256) NOT NULL DEFAULT '',
  `LOCALPATH` VARCHAR(256) NOT NULL DEFAULT '',
  `SENDLEVEL` TINYINT(4) NOT NULL DEFAULT '5',
  `ATTIME` VARCHAR(14) NOT NULL DEFAULT '',
  `VALIDTIME` VARCHAR(14) NOT NULL DEFAULT '',
  `SENDSTATUS` TINYINT(4) NOT NULL DEFAULT '1',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTYPE` TINYINT(4) NOT NULL DEFAULT '1',
  `ATTIMEFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  `SA` VARCHAR(21) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_MMS_BMTREQ_MSGID` (`MSGID`),
  KEY `IX_MMS_BMTREQ_BMTMSGID` (`BMTMSGID`),
  KEY `IX_MMS_BMTREQ_USERID` (`USERID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MMS_BMTREQHIS
-- ----------------------------
CREATE TABLE `MMS_BMTREQHIS` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `MSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `BMTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `SERVICETYPE` VARCHAR(10) NOT NULL DEFAULT '',
  `MSGTYPE` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `TITLE` VARCHAR(100) NOT NULL DEFAULT '',
  `TMPLID` BIGINT(20) NOT NULL DEFAULT '0',
  `MSG` VARCHAR(3000) NOT NULL DEFAULT '',
  `MSGFMT` TINYINT(4) NOT NULL DEFAULT '15',
  `REMOTEURL` VARCHAR(256) NOT NULL DEFAULT '',
  `LOCALPATH` VARCHAR(256) NOT NULL DEFAULT '',
  `SENDLEVEL` TINYINT(4) NOT NULL DEFAULT '5',
  `ATTIME` VARCHAR(14) NOT NULL DEFAULT '',
  `VALIDTIME` VARCHAR(14) NOT NULL DEFAULT '',
  `SENDSTATUS` TINYINT(4) NOT NULL DEFAULT '1',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTYPE` TINYINT(4) NOT NULL DEFAULT '1',
  `ATTIMEFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  `SA` VARCHAR(21) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_MMS_BMTREQHIS_MSGID` (`MSGID`),
  KEY `IX_MMS_BMTREQHIS_BMTMSGID` (`BMTMSGID`),
  KEY `IX_MMS_BMTREQHIS_USERID` (`USERID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MMS_DATAREPORT
-- ----------------------------
CREATE TABLE `MMS_DATAREPORT` (
  `USERID` VARCHAR(11) NOT NULL,
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `SPGATE` VARCHAR(21) NOT NULL,
  `IYMD` INT(11) NOT NULL,
  `IHOUR` INT(11) NOT NULL,
  `PTCODE` VARCHAR(10) NOT NULL DEFAULT '',
  `IMONTH` INT(11) NOT NULL,
  `ICOUNT` INT(11) NOT NULL DEFAULT '0',
  `SUCC` INT(11) NOT NULL DEFAULT '0',
  `FAIL1` INT(11) NOT NULL DEFAULT '0',
  `FAIL2` INT(11) NOT NULL DEFAULT '0',
  `FAIL3` INT(11) NOT NULL DEFAULT '0',
  `NRET` INT(11) NOT NULL DEFAULT '0',
  `RSUCC` INT(11) NOT NULL DEFAULT '0',
  `RFAIL1` INT(11) NOT NULL DEFAULT '0',
  `RFAIL2` INT(11) NOT NULL DEFAULT '0',
  `RNRET` INT(11) NOT NULL DEFAULT '0',
  `RELEASEFLAG` INT(11) NOT NULL DEFAULT '1',
  `STARTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `Y` INT(11) NOT NULL DEFAULT '0',
  `SPISUNCM` INT(11) NOT NULL DEFAULT '0',
  `SPID` VARCHAR(64) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`USERID`,`TASKID`,`SPGATE`,`IYMD`,`IHOUR`,`PTCODE`,`SPISUNCM`,`SPID`,`SVRTYPE`,`P1`,`P2`,`P3`,`P4`,`MOBILEAREA`,`SENDTYPE`),
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MMS_LEVEL_QUEUE
-- ----------------------------
CREATE TABLE `MMS_LEVEL_QUEUE` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `DEALSTATUS` INT(11) NOT NULL DEFAULT '1',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  `TPPID` TINYINT(4) NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(4) NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(4) NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(4) NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `UNICOM` TINYINT(4) NOT NULL DEFAULT '0',
  `SENDSTATUS` TINYINT(4) NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(4) NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(4) NOT NULL DEFAULT '5',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MSGFMT` TINYINT(4) NOT NULL DEFAULT '15',
  `MSGTYPE` TINYINT(4) NOT NULL DEFAULT '10',
  `LONGMSGSEQ` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `MSGTITLE` VARCHAR(200) NOT NULL DEFAULT '',
  `TMPLID` BIGINT(20) NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(1500) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(20) NOT NULL DEFAULT '',
  `JTYPE` TINYINT(4) NOT NULL DEFAULT '0',
  `ORDERCPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `PASSTHROUGH` TINYINT(4) NOT NULL DEFAULT '0',
  `SA` VARCHAR(21) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_MMS_LEVEL_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MMS_LEVEL_QUEUE_SPGATE` (`SPGATE`),
  KEY `IX_MMS_LEVEL_QUEUE_USERID` (`USERID`),
  KEY `IX_MMS_LEVEL_QUEUE_SENDTIME` (`SENDTIME`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MMS_MO
-- ----------------------------
CREATE TABLE `MMS_MO` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `UID` INT(11) NOT NULL DEFAULT '0',
  `ORGUID` INT(11) NOT NULL DEFAULT '0',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `SERVICEID` VARCHAR(10) NOT NULL DEFAULT '',
  `SENDSTATUS` TINYINT(4) NOT NULL DEFAULT '1',
  `MSGFMT` TINYINT(4) NOT NULL DEFAULT '15',
  `MSGTYPE` TINYINT(4) NOT NULL DEFAULT '0',
  `TP_PID` TINYINT(4) NOT NULL DEFAULT '0',
  `TP_UDHI` TINYINT(4) NOT NULL DEFAULT '0',
  `DELIVERTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `UNICOM` TINYINT(4) NOT NULL DEFAULT '0',
  `LONGMSGSEQ` INT(11) NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(4) NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(4) NOT NULL DEFAULT '1',
  `PTNOTICE` TINYINT(4) NOT NULL DEFAULT '0',
  `RESENDCNT` TINYINT(4) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `MSGTITLE` VARCHAR(200) NOT NULL DEFAULT '',
  `MSGCONTENT` VARCHAR(3000) NOT NULL DEFAULT '',
  `PASSTHROUGH` TINYINT(4) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_MMS_MO_UID` (`UID`),
  KEY `IX_MMS_MO_PTMSGID` (`PTMSGID`),
  KEY `IX_MMS_MO_USERID` (`USERID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

   CREATE TABLE `M_MON_LOG_HIS`
 (`ID`          BIGINT(20)      NOT NULL AUTO_INCREMENT,
  `PTCODE`      VARCHAR(32)     NOT NULL  DEFAULT '',
  `LOGTYPE`     INTEGER         NOT NULL  DEFAULT 0,
  `LOGS`        VARCHAR(4000)   NOT NULL  DEFAULT '',
  `UPDATETIME`  VARCHAR(35)     NOT NULL  DEFAULT '',
   KEY `ID` (`ID`)
 )ENGINE=INNODB DEFAULT CHARSET=GBK;
 
-- ----------------------------
-- TABLE STRUCTURE FOR MMS_MODATAREPORT
-- ----------------------------
CREATE TABLE `MMS_MODATAREPORT` (
  `IYMD` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `IHOUR` INT(11) NOT NULL DEFAULT '0',
  `ICOUNT` INT(11) NOT NULL DEFAULT '0',
  `IMONTH` INT(11) NOT NULL DEFAULT '0',
  `IYEAR` INT(11) NOT NULL DEFAULT '0',
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `RECVDATE` INT(11) NOT NULL DEFAULT '0',
  `SPISUNCM` BIGINT(20) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`,`USERID`,`SPGATE`,`SPISUNCM`,`IYMD`,`IYEAR`,`IMONTH`,`IHOUR`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MMS_RPT
-- ----------------------------
CREATE TABLE `MMS_RPT` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `UID` INT(11) NOT NULL DEFAULT '0',
  `ORGUID` INT(11) NOT NULL DEFAULT '0',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `SPMSGID2` VARCHAR(64) NOT NULL DEFAULT '',
  `SUBMITTIME` CHAR(10) NOT NULL DEFAULT '',
  `DONEDATE` CHAR(10) NOT NULL DEFAULT '',
  `ERRORCODE` CHAR(7) NOT NULL DEFAULT '',
  `SENDLEVEL` TINYINT(4) NOT NULL DEFAULT '5',
  `RESENDCNT` TINYINT(4) NOT NULL DEFAULT '0',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `SENDSATATUS` TINYINT(4) NOT NULL DEFAULT '1',
  `ERRORMSG` VARCHAR(256) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  KEY `IX_MMS_RPT_UID` (`UID`),
  KEY `IX_MMS_RPT_PTMSGID` (`PTMSGID`),
  KEY `IX_MMS_RPT_USERID` (`USERID`),
  KEY `IX_MMS_RPT_SPMSGID` (`SPMSGID`),
  KEY `IX_MMS_RPT_SPMSGID2` (`SPMSGID2`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MMS_TASK
-- ----------------------------
CREATE TABLE `MMS_TASK` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `UID` INT(11) NOT NULL DEFAULT '0',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `SPMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `SPMSGID2` VARCHAR(64) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(4) NOT NULL DEFAULT '2',
  `PKNUMBER` TINYINT(4) NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(4) NOT NULL DEFAULT '1',
  `UNICOM` TINYINT(4) NOT NULL DEFAULT '0',
  `SENDSTATUS` TINYINT(4) NOT NULL DEFAULT '1',
  `SENDFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  `DONEDATE` CHAR(10) NOT NULL DEFAULT '',
  `ERRORCODE` CHAR(7) NOT NULL DEFAULT '',
  `ERRORMSG` VARCHAR(256) NOT NULL DEFAULT '',
  `SENDLEVEL` TINYINT(4) NOT NULL DEFAULT '5',
  `SENDTYPE` TINYINT(4) NOT NULL DEFAULT '0',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT '0',
  `RESENDCNT` TINYINT(4) NOT NULL DEFAULT '0',
  `RECVMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSRPTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDRPTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MSGFMT` TINYINT(4) NOT NULL DEFAULT '15',
  `MSGTYPE` TINYINT(4) NOT NULL DEFAULT '0',
  `LONGMSGSEQ` INT(11) NOT NULL DEFAULT '0',
  `TPPID` TINYINT(4) NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(4) NOT NULL DEFAULT '0',
  `RECVFLAG` TINYINT(4) NOT NULL DEFAULT '0',
  `MSGTITLE` VARCHAR(720) NOT NULL DEFAULT '',
  `TMPLID` BIGINT(20) NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(20) NOT NULL DEFAULT '',
  `JTYPE` TINYINT(4) NOT NULL DEFAULT '0',
  `ORDERCPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `PASSTHROUGH` TINYINT(4) NOT NULL DEFAULT '0',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_MMS_TASK_PTMSGID` (`PTMSGID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MMS_TEMPLATE
-- ----------------------------
CREATE TABLE `MMS_TEMPLATE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `TMPLID` BIGINT(20) NOT NULL DEFAULT '0',
  `EMP_TMPLID` VARCHAR(32) NOT NULL DEFAULT '',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `AUDITSTATUS` TINYINT(4) NOT NULL DEFAULT '0',
  `TMPLSTATUS` TINYINT(4) NOT NULL DEFAULT '0',
  `PARAMCNT` INT(11) NOT NULL DEFAULT '0',
  `TMPLPATH` VARCHAR(256) NOT NULL DEFAULT '',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `AUDITTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `AUDITOR` VARCHAR(32) NOT NULL DEFAULT '',
  `REMARKS` VARCHAR(256) NOT NULL DEFAULT '',
  `RESERVE1` VARCHAR(256) NOT NULL DEFAULT '',
  `RESERVE2` VARCHAR(256) NOT NULL DEFAULT '',
  `RESERVE3` VARCHAR(256) NOT NULL DEFAULT '',
  `RESERVE4` VARCHAR(256) NOT NULL DEFAULT '',
  `RESERVE5` VARCHAR(256) NOT NULL DEFAULT '',
  `SUBMITSTATUS` TINYINT(4) NOT NULL DEFAULT '0',
  `ERRCODE` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_MMS_TEMPLATE_TMPLID` (`TMPLID`),
  KEY `IX_MMS_TEMPLATE_USERID` (`USERID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;


-- ----------------------------
-- TABLE STRUCTURE FOR MO_DATAREPORT
-- ----------------------------
CREATE TABLE `MO_DATAREPORT` (
  `IYMD` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `IHOUR` INT(11) NOT NULL DEFAULT '0',
  `ICOUNT` INT(11) NOT NULL DEFAULT '0',
  `IMONTH` INT(11) NOT NULL DEFAULT '0',
  `IYEAR` INT(11) NOT NULL DEFAULT '0',
  `RECVDATE` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `SPISUNCM` INT(11) NOT NULL DEFAULT '0',
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY  (`IYMD`,`USERID`,`SPGATE`,`IHOUR`,`IMONTH`,`IYEAR`,`SPISUNCM`),
  KEY `ID` (`ID`)
) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MO_TASK
-- ----------------------------
CREATE TABLE `MO_TASK` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `ORGUID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `SERVICEID` VARCHAR(10) NOT NULL DEFAULT '0',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `STATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '8',
  `TP_PID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TP_UDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RESENDCNT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `UNICOM` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PTNOTICE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `DELIVERTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGCONTENT` VARCHAR(3000) NOT NULL DEFAULT '',
  `CMDID` BIGINT(20) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MO_TASK_PTMSGID` (`PTMSGID`),
  KEY `IX_MO_TASK_ORGUID` (`ORGUID`),
  KEY `IX_MO_TASK_SENDSTATUS` (`SENDSTATUS`),
  KEY `IX_MO_TASK_UID` (`UID`,`SENDSTATUS`),
  KEY `IX_MO_TASK_UID_SINGLE` (`UID`)
) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MO_TASK_HIS
-- ----------------------------
CREATE TABLE `MO_TASK_HIS` (
  `ID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `SERVICEID` VARCHAR(10) NOT NULL DEFAULT '',
  `SENDSTATUS` INT(11) NOT NULL DEFAULT '0',
  `DELIVERTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `MSGCONTENT` VARCHAR(3000) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `ORGUID` INT(11) NOT NULL DEFAULT '0',
  `PTMSGID` INT(11) NOT NULL DEFAULT '0',
  `TP_PID` INT(11) NOT NULL DEFAULT '0',
  `TP_UDHI` INT(11) NOT NULL DEFAULT '0',
  `MSGFMT` INT(11) NOT NULL DEFAULT '0',
  `UNICOM` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;


CREATE TABLE M_MON_SPGATE_HIS(
	`ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
	`PTCODE` VARCHAR(32) NOT NULL DEFAULT '',
	`USERID` VARCHAR(11) NOT NULL   DEFAULT '',
	`USERUID` INT(11) NOT NULL  DEFAULT '0',
	`USERNAME` VARCHAR(128) NOT NULL  DEFAULT '',
	`JTYPE` VARCHAR(64) NOT NULL   DEFAULT '直连用户(CMPP)',
	`LINKNUM` INT(11) NOT NULL    DEFAULT '1',
	`LOGINIP` VARCHAR(64) NOT NULL   DEFAULT '',
	`ONLINESTATUS` TINYINT NOT NULL  DEFAULT '0',
	`MTHAVESND` INT(11) NOT NULL   DEFAULT '0',
	`MTREMAINED` INT(11) NOT NULL,
	`MTRECVSPD` INT(11) NOT NULL   DEFAULT '0',
	`MOTOTALRECV` INT(11) NOT NULL DEFAULT '0',
	`MOHAVESND` INT(11) NOT NULL,
	`MOREMAINED` INT(11) NOT NULL  DEFAULT '0',
	`MOSNDSPD` INT(11) NOT NULL  DEFAULT '0',
	`RPTTOTALRECV` INT(11) NOT NULL DEFAULT '0',
	`RPTHAVESND` INT(11) NOT NULL,
	`RPTREMAINED` INT(11) NOT NULL  DEFAULT '0',
	`RPTSNDSPD` INT(11) NOT NULL   DEFAULT '0',
	`SNDERCNT` INT(11) NOT NULL   DEFAULT '0',
	`LASTSNDERTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
	`LOGININTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
	`LOGINOUTTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
	`UPDATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
	KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MO_WAIT_A
-- ----------------------------
CREATE TABLE `MO_WAIT_A` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `SERVICEID` VARCHAR(10) NOT NULL DEFAULT '',
  `UNICOM` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TP_UDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TP_PID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PTNOTICE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `DELIVERTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `CMDID` BIGINT(20) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_MO_WAIT_A_PTMSGID` (`PTMSGID`),
  KEY `IX_MO_WAIT_A_UID` (`USERUID`,`LOGINUID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MO_WAIT_C
-- ----------------------------
CREATE TABLE `MO_WAIT_C` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `SERVICEID` VARCHAR(10) NOT NULL DEFAULT '0',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `STATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '8',
  `TP_PID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TP_UDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `UNICOM` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PTNOTICE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `DELIVERTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGCONTENT` VARCHAR(3000) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  KEY `IX_MO_WAIT_C` (`ID`,`SPGATE`),
  KEY `IX_MO_WAIT_C_LOGINID` (`LOGINID`),
  KEY `IX_MO_WAIT_C_PTMSGID` (`PTMSGID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MR_SPGATE_WATCH
-- ----------------------------
CREATE TABLE `MR_SPGATE_WATCH` (
  `GATEID` INT(11) NOT NULL DEFAULT '0',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `PTCODE` VARCHAR(10) NOT NULL DEFAULT '',
  `STATE` INT(11) NOT NULL DEFAULT '1',
  `LSSENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `LSRECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DELAYSS` INT(11) NOT NULL DEFAULT '0',
  `WATCHNUM` INT(11) NOT NULL DEFAULT '0',
  `WATCHSUCC` INT(11) NOT NULL DEFAULT '0',
  `WATCHDELAY` INT(11) NOT NULL DEFAULT '0',
  `NUMMT` INT(11) NOT NULL DEFAULT '0',
  `NUMRPT` INT(11) NOT NULL DEFAULT '0',
  `NUMMO` INT(11) NOT NULL DEFAULT '0',
  `SPEEDMT` INT(11) NOT NULL DEFAULT '0',
  `SPEEDMO` INT(11) NOT NULL DEFAULT '0',
  `SPEEDRPT` INT(11) NOT NULL DEFAULT '0',
  `UPDATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DEALFLAG` INT(11) NOT NULL DEFAULT '1',
  `ERRORINFO` VARCHAR(200) NOT NULL DEFAULT '',
  `USRID` VARCHAR(11) DEFAULT NULL,
  `ONLINESTATUS` INT(11) DEFAULT NULL,
  `TOTALRPTSEND` INT(11) DEFAULT NULL,
  `TOTALMOSEND` INT(11) DEFAULT NULL,
  `HAVESENDMO` INT(11) DEFAULT NULL,
  `HAVESENDRPT` INT(11) DEFAULT NULL,
  `RECVMT` INT(11) DEFAULT NULL,
  `REMAINEDMT` INT(11) DEFAULT NULL,
  `TIMERSENDMT` INT(11) DEFAULT NULL,
  `REMAINEDRPT` INT(11) DEFAULT NULL,
  `REMAINEDMO` INT(11) DEFAULT NULL,
  `RECVSPEED` INT(11) DEFAULT NULL,
  `PARAM1` INT(11) DEFAULT '0',
  `PARAM2` INT(11) DEFAULT '0',
  `PARAM3` INT(11) DEFAULT '0',
  `PARAM4` INT(11) DEFAULT NULL,
  `PARAM5` INT(11) DEFAULT '0',
  `PARAM6` VARCHAR(100) DEFAULT NULL,
  `PARAM7` VARCHAR(100) DEFAULT NULL
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_DATAREPORT
-- ----------------------------
CREATE TABLE `MT_DATAREPORT` (
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `IYMD` INT(11) NOT NULL DEFAULT '0',
  `IHOUR` INT(11) NOT NULL DEFAULT '0',
  `PTCODE` VARCHAR(10) NOT NULL DEFAULT '',
  `IMONTH` INT(11) NOT NULL DEFAULT '0',
  `ICOUNT` INT(11) NOT NULL DEFAULT '0',
  `SUCC` INT(11) NOT NULL DEFAULT '0',
  `FAIL1` INT(11) NOT NULL DEFAULT '0',
  `FAIL2` INT(11) NOT NULL DEFAULT '0',
  `FAIL3` INT(11) NOT NULL DEFAULT '0',
  `NRET` INT(11) NOT NULL DEFAULT '0',
  `RSUCC` INT(11) NOT NULL DEFAULT '0',
  `RFAIL1` INT(11) NOT NULL DEFAULT '0',
  `RFAIL2` INT(11) NOT NULL DEFAULT '0',
  `RNRET` INT(11) NOT NULL DEFAULT '0',
  `RELEASEFLAG` INT(11) NOT NULL DEFAULT '1',
  `STARTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `Y` INT(11) NOT NULL DEFAULT '0',
  `SPISUNCM` INT(11) NOT NULL DEFAULT '0',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT '0',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT '0',
  `AREACODE`  INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`USERID`,`TASKID`,`SPGATE`,`IYMD`,`IHOUR`,`SPISUNCM`,`SPID`,`SVRTYPE`,`P1`,`P2`,`P3`,`P4`,`MOBILEAREA`,`SENDTYPE`,`BATCHID`,`AREACODE`),
  KEY `IX_MT_DATAREPORT_TASKID` (`TASKID`),
  KEY `ID` (`ID`),
  KEY `ID_2` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_DATAREPORT_SP
-- ----------------------------
CREATE TABLE `MT_DATAREPORT_SP` (
  `IYMD` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPISUNCM` INT(11) NOT NULL DEFAULT '0',
  `ICOUNT` INT(11) NOT NULL DEFAULT '0',
  `ISUCC` INT(11) NOT NULL DEFAULT '0',
  `IFAIL` INT(11) NOT NULL DEFAULT '0',
  `UPDATETIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (`IYMD`,`USERID`,`SPGATE`,`SPISUNCM`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL0_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL0_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL0_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL0_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL0_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL0_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL0_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL0_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL0_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL0_PRE` (`UID`,`SENDLEVEL`),
  KEY `IX_MTLVL0_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL1_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL1_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL2_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL2_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
 KEY `IX_MTLVL2_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL3_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL3_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
 KEY `IX_MTLVL3_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL4_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL4_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
 KEY `IX_MTLVL4_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL5_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL5_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
 KEY `IX_MTLVL5_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL6_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL6_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
 KEY `IX_MTLVL6_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL7_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL7_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
 KEY `IX_MTLVL7_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL8_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL8_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
 KEY `IX_MTLVL8_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_LEVEL9_QUEUE
-- ----------------------------
CREATE TABLE `MT_LEVEL9_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(3) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT 0,
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
 `AREACODE`  INT(11) NOT NULL DEFAULT '0' ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_LEVEL1_QUEUE_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_LEVEL1_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_LEVEL1_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_LEVEL1_QUEUE_UID` (`UID`),
  KEY `IX_MT_LEVEL1_QUEUE_USERID` (`USERID`),
  KEY `IX_MTLVL1_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTLVL1_PRE` (`UID`,`SENDLEVEL`),
 KEY `IX_MTLVL9_ATTIME` (`ATTIME`)   
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_ROUTETABLE
-- ----------------------------
CREATE TABLE `MT_ROUTETABLE` (
  `ID` INT(11) NOT NULL DEFAULT '0',
  `ROUTETYPE` INT(11) NOT NULL DEFAULT '1',
  `EXNOHOLD` INT(11) NOT NULL DEFAULT '1',
  `EXPIREDTM` INT(11) NOT NULL DEFAULT '60',
  `SRCUSERID` VARCHAR(50) NOT NULL DEFAULT '',
  `DESTUSERID` VARCHAR(50) NOT NULL DEFAULT '',
  `SRCBINDID` INT(11) NOT NULL DEFAULT '0',
  `DESTBINDID` INT(11) NOT NULL DEFAULT '0',
  `PARAMS` VARCHAR(100) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_TASK
-- ----------------------------
CREATE TABLE `MT_TASK` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `UID` INT(11) NOT NULL DEFAULT '0',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `SPMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SENDFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `UNICOM` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RESENDCNT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RECVMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSRPTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDRPTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RECVFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `DONEDATE` VARCHAR(10) NOT NULL DEFAULT '',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  `AREACODE`  INT(11) NOT NULL DEFAULT 0,
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MTTASK_PTID` (`PTMSGID`),
  KEY `IX_MTTASK_SDTM` (`SENDTIME`)
) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_TASK_C
-- ----------------------------
CREATE TABLE `MT_TASK_C` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `SHOUJI` VARCHAR(21) NOT NULL DEFAULT '',
  `SPMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SENDSTATUS` INT(11) NOT NULL DEFAULT '1',
  `SENDFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RECVFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `DONEDATE` VARCHAR(10) NOT NULL DEFAULT '',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `UNICOM` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FIXEDCH` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SENDCH` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT '0',
  `NETERRORCNT`	INT(11) NOT NULL DEFAULT 0,
  `SUBMITERRORCNT`	INT(11) NOT NULL DEFAULT 0,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  KEY `IX_MT_TASK_C_LOGINID` (`LOGINID`),
  KEY `IX_SENDDATA_PTMSGID` (`PTMSGID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_TIMER_QUEUE
-- ----------------------------
CREATE TABLE `MT_TIMER_QUEUE` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_TIMER_SEND_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_TIMER_QUEUE_DESTUID` (`DESTUID`),
  KEY `IX_MT_TIMER_QUEUE_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_TIMER_QUEUE_SENDLEVEL` (`SENDLEVEL`),
  KEY `IX_MT_TIMER_QUEUE_UID_SENDLEVEL` (`UID`),
  KEY `IX_MT_TIMER_SEND_UID` (`UID`,`DESTUID`,`SENDLEVEL`),
  KEY `IX_MT_TIMER_SEND_USERID` (`USERID`),
  KEY `IX_MTTMR_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTTMR_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTTMR_PRE` (`UID`,`SENDLEVEL`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_VERIFY_TASK
-- ----------------------------
CREATE TABLE `MT_VERIFY_TASK` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `DEALSTATUS` INT(11) NOT NULL DEFAULT '1',
  `VERIFYSTATUS` INT(11) NOT NULL DEFAULT '0',
  `CMDTEXT` VARCHAR(1000) NOT NULL DEFAULT '',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `PARAMS` VARCHAR(1000) NOT NULL DEFAULT '',
  `MEMO` VARCHAR(256) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  KEY `IX_MT_VERIFY_TASK` (`DEALSTATUS`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_VERIFY_WAIT
-- ----------------------------
CREATE TABLE `MT_VERIFY_WAIT` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `DESTUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `DEALSTATUS` INT(11) NOT NULL DEFAULT '1',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT '1',
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SPLITFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  PRIMARY KEY  (`ID`),
  KEY `IX_MT_VERIFY_WAIT` (`DEALSTATUS`),
  KEY `IX_MT_VERIFY_WAIT_1` (`USERID`),
  KEY `IX_MT_VERIFY_WAIT_PTMSGID` (`PTMSGID`),
  KEY `IX_MTVFY_AGE` (`LOGINUID`,`SENDLEVEL`),
  KEY `IX_MTVFY_END` (`DESTUID`,`SENDLEVEL`),
  KEY `IX_MTVFY_PRE` (`UID`,`SENDLEVEL`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR MT_WAIT_A
-- ----------------------------
CREATE TABLE `MT_WAIT_A` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `SENDSTATUS` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `PHONECOUNT` INT(11) NOT NULL DEFAULT '1',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `PHONE` VARCHAR(3500) NOT NULL DEFAULT '',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `SENDTYPE` INT(11) NOT NULL DEFAULT '1',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  `TOTALCOUNT` INT(11) NOT NULL DEFAULT 0,
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MT_WAIT_A_PTMSGID` (`PTMSGID`),
  KEY `IX_MT_WAIT_A_LOGINUID` (`LOGINUID`),
  KEY `IX_MT_WAIT_A_UID` (`USERUID`,`SENDSTATUS`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;


-- ----------------------------
-- TABLE STRUCTURE FOR PB_LIST_BLACK
-- ----------------------------
CREATE TABLE `PB_LIST_BLACK` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` BIGINT(20) NOT NULL DEFAULT '0',
  `OPTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `OPTTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MSG` VARCHAR(3000) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `SPISUNCM` TINYINT(4) NOT NULL DEFAULT '0',
  `CORPCODE` VARCHAR(64) NOT NULL DEFAULT '',
  `BLTYPE`  TINYINT(3)  NOT NULL DEFAULT 1,
  PRIMARY KEY  (`ID`),
  KEY `IX_PB_LIST_BLACK_USERID` (`USERID`),
  KEY `IX_PB_LIST_BLACK_SVRTYPE` (`SVRTYPE`),
  KEY `IX_PB_LIST_BLACK_SPGATE` (`SPGATE`),
  KEY `IX_PB_LIST_BLACK_SPNUMBER` (`SPNUMBER`),
  KEY `IX_PB_LIST_BLACK_PHONE` (`PHONE`),
  KEY `IX_PB_LIST_BLACK_CORPCODE` (`CORPCODE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR PB_SERVICETYPE
-- ----------------------------
CREATE TABLE `PB_SERVICETYPE` (
  `SPISUNCM` INT(11) NOT NULL DEFAULT '0',
  `SERVICENO` VARCHAR(256) NOT NULL DEFAULT '',
  `SERVICEINFO` VARCHAR(100) NOT NULL DEFAULT '',
  PRIMARY KEY  (`SPISUNCM`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR PB_WEBZZCMD_LOG
-- ----------------------------
CREATE TABLE `PB_WEBZZCMD_LOG` (
  `STIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `CMDTYPE` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SID` VARCHAR(21) NOT NULL DEFAULT '',
  `CMDPARAM` VARCHAR(21) NOT NULL DEFAULT '0',
  `USEIP` VARCHAR(50) NOT NULL DEFAULT '',
  `EXECFLAG` INT(11) NOT NULL DEFAULT '1',
  `FEETYPE` INT(11) NOT NULL DEFAULT '1',
  `FEE` DECIMAL(8,3) NOT NULL DEFAULT '0.000',
  `OPID` VARCHAR(21) NOT NULL DEFAULT '',
  `MEMO` VARCHAR(100) NOT NULL DEFAULT '',
  `USENUMBER` INT(11) NOT NULL DEFAULT '0',
  `PRODID` INT(11) NOT NULL DEFAULT '0',
  `EXECTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR PB_WEBZZCMD_QUEUE
-- ----------------------------
CREATE TABLE `PB_WEBZZCMD_QUEUE` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `STIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `CMDTYPE` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SID` VARCHAR(21) NOT NULL DEFAULT '',
  `CMDPARAM` VARCHAR(21) NOT NULL DEFAULT '0',
  `USEIP` VARCHAR(50) NOT NULL DEFAULT '',
  `EXECFLAG` INT(11) NOT NULL DEFAULT '1',
  `FEETYPE` INT(11) NOT NULL DEFAULT '1',
  `FEE` DECIMAL(8,3) NOT NULL DEFAULT '0.000',
  `OPID` VARCHAR(21) NOT NULL DEFAULT '',
  `MEMO` VARCHAR(100) NOT NULL DEFAULT '',
  `PRODID` INT(11) NOT NULL DEFAULT '0',
  `EXECTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY  (`STIME`,`CMDTYPE`,`USERID`,`SID`),
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR PROCESSINGSTATUS
-- ----------------------------
CREATE TABLE `PROCESSINGSTATUS` (
  `USEID` INT(11) NOT NULL DEFAULT '0',
  `CURRINDEX` BIGINT(20) NOT NULL DEFAULT '0',
  `MAXINDEX` BIGINT(20) NOT NULL DEFAULT '0',
  `COUNTSTATUS` INT(11) NOT NULL DEFAULT '0',
  `DISTRACTSTATUS` INT(11) NOT NULL DEFAULT '0',
  `DELETESTATUS` INT(11) NOT NULL DEFAULT '0'
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR RPT_WAIT_A
-- ----------------------------
CREATE TABLE `RPT_WAIT_A` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `USERUID` INT(11) NOT NULL DEFAULT '0',
  `LOGINUID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `RECVTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `SUBMITTIME` VARCHAR(10) NOT NULL DEFAULT '',
  `DONETIME` VARCHAR(10) NOT NULL DEFAULT '',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_RPT_WAIT_A_PTMSGID` (`PTMSGID`),
  KEY `IX_RPT_WAIT_A_UID` (`USERUID`,`LOGINUID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR RPT_WAIT_B
-- ----------------------------
CREATE TABLE `RPT_WAIT_B` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `ORGUID` INT(11) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `SUBMITTIME` VARCHAR(10) NOT NULL DEFAULT '',
  `DONETIME` VARCHAR(10) NOT NULL DEFAULT '',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `RECVTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `SPMSGID`	BIGINT(20) NOT NULL DEFAULT 0,
  `PKTOTAL`	BIGINT(20) NOT NULL DEFAULT 0,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  `RESENDCNT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  PRIMARY KEY  (`ID`),
  KEY `IX_RPT_WAIT_B_PTMSGID` (`PTMSGID`),
  KEY `IX_RPT_WAIT_B_ORGUID` (`ORGUID`),
  KEY `IX_RPT_WAIT_B_UID` (`UID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR RPT_WAIT_C
-- ----------------------------
CREATE TABLE `RPT_WAIT_C` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `UID` INT(11) NOT NULL DEFAULT '0',
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `SUBMITTIME` VARCHAR(10) NOT NULL DEFAULT '',
  `DONETIME` VARCHAR(10) NOT NULL DEFAULT '',
  `RECVFLAG` INT(11) NOT NULL DEFAULT '0',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `RECVTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` INT(11) NOT NULL DEFAULT '1',
  `SENDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `SPMSGID`	BIGINT(20) NOT NULL DEFAULT 0,
  `WTRPTFLAG`	INT(11) NOT NULL DEFAULT 0,
  `PKTOTAL`	BIGINT(20) NOT NULL DEFAULT 0,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  KEY `IX_RPT_WAIT_C_PTMSGID` (`PTMSGID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR USERDATA
-- ----------------------------
CREATE TABLE `USERDATA` (
  `UID` INT(11) NOT NULL AUTO_INCREMENT,
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `LOGINID` VARCHAR(11) NOT NULL DEFAULT '',
  `STAFFNAME` VARCHAR(64) NOT NULL DEFAULT '',
  `CORPACCOUNT` VARCHAR(32) NOT NULL DEFAULT '200001',
  `USERACCOUNT` VARCHAR(20) NOT NULL DEFAULT '',
  `MOBILE` VARCHAR(21) NOT NULL DEFAULT '',
  `ORDERTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `CANCELTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MODITIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `USERTYPE` INT(11) NOT NULL DEFAULT '1',
  `STATUS` INT(11) NOT NULL DEFAULT '0',
  `USERPASSWORD` VARCHAR(32) NOT NULL DEFAULT '325782',
  `SMSTYPE` INT(11) NOT NULL DEFAULT '0',
  `SENDTYPE` INT(11) NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `RETFLAG` INT(11) NOT NULL DEFAULT '0',
  `USERPRIVILEGE` INT(11) NOT NULL DEFAULT '0',
  `SUBMITCNT` INT(11) NOT NULL DEFAULT '0',
  `COMPANY` VARCHAR(100) NOT NULL DEFAULT '',
  `SALEMAN` VARCHAR(21) NOT NULL DEFAULT '',
  `MEMO` VARCHAR(200) NOT NULL DEFAULT '',
  `SPEEDLIMIT` INT(11) NOT NULL DEFAULT '100',
  `RISELEVEL` INT(11) NOT NULL DEFAULT '0',
  `MTURL` VARCHAR(256) NOT NULL DEFAULT '',
  `MOURL` VARCHAR(256) NOT NULL DEFAULT '',
  `RPTURL` VARCHAR(256) NOT NULL DEFAULT '',
  `LOGINIP` VARCHAR(256) NOT NULL DEFAULT '',
  `MAXDAYNUM` INT(11) NOT NULL DEFAULT '1000000',
  `SENDTMSPAN` VARCHAR(512) NOT NULL DEFAULT '',
  `FORBIDTMSPAN` VARCHAR(512) NOT NULL DEFAULT '',
  `ACCOUNTTYPE` INT(11) NOT NULL DEFAULT '1',
  `SPBINDURL` VARCHAR(256) NOT NULL DEFAULT '',
  `SRCNODE`  INT(11) NOT NULL DEFAULT 0, 
  `SPTYPE` TINYINT(4) NOT NULL DEFAULT 0, 
  `TRANSMOTYPE` INT(11) NOT NULL DEFAULT 0,
  `TRANSRPTYPE` INT(11) NOT NULL DEFAULT 0, 
  `PUSHVERSION` TINYINT NOT NULL DEFAULT 16, 
  PRIMARY KEY  (`ACCOUNTTYPE`,`USERID`),
  UNIQUE KEY `IX_USERDATA_UID` (`UID`),
  KEY `IX_USERDATA_CORPACCOUNT` (`CORPACCOUNT`),
  KEY `IX_USERDATA_LOGINID` (`LOGINID`),
  KEY `IX_USEDT_USERID` (`USERID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR USERFEE
-- ----------------------------
CREATE TABLE `USERFEE` (
  `UID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SENDNUM` INT(11) NOT NULL DEFAULT '0',
  `SENDEDNUM` BIGINT(20) NOT NULL DEFAULT '0',
  `POSTPAYUSED` BIGINT(20) NOT NULL DEFAULT '0',
  `THRESHOLD` INT(11) NOT NULL DEFAULT '10000',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY  (`UID`),
  KEY `IX_USERF_USERID` (`USERID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR VERSION_CMPP
-- ----------------------------
CREATE TABLE `VERSION_CMPP` (
  `VERSION` VARCHAR(32) NOT NULL DEFAULT '',
  `VERSIONDATE` VARCHAR(10) NOT NULL DEFAULT '',
  `UPGRADETIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=INNODB DEFAULT CHARSET=GBK;

-- ----------------------------
-- TABLE STRUCTURE FOR XT_GATE_QUEUE
-- ----------------------------
CREATE TABLE `XT_GATE_QUEUE` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `SPISUNCM` INT(11) NOT NULL DEFAULT '0',
  `GATENAME` VARCHAR(56) NOT NULL DEFAULT '',
  `STATUS` INT(11) NOT NULL DEFAULT '0',
  `LONGSMS` INT(11) NOT NULL DEFAULT '1',
  `MAXWORDS` INT(11) NOT NULL DEFAULT '360',
  `SUBLEN` INT(11) NOT NULL DEFAULT '0',
  `SINGLELEN` INT(11) NOT NULL DEFAULT '70',
  `MULTILEN1` INT(11) NOT NULL DEFAULT '67',
  `MULTILEN2` INT(11) NOT NULL DEFAULT '67',
  `SIGNLEN` INT(11) NOT NULL DEFAULT '0',
  `SIGNSTR` VARCHAR(20) NOT NULL DEFAULT '',
  `RISELEVEL` INT(11) NOT NULL DEFAULT '0',
  `FEEFLAG` INT(11) NOT NULL DEFAULT '1',
  `SIGNTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SIGNFIXLEN` TINYINT(3) UNSIGNED NOT NULL DEFAULT '10',
  `PREFIXLEN` TINYINT(3) UNSIGNED NOT NULL DEFAULT '3',
  `MAXLONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '255',
  `SIGNDROPTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `GATESEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `ENDSPLIT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `AREATYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `GATEAREA` VARCHAR(32) NOT NULL DEFAULT '',
  `SPEED` INT(11) NOT NULL DEFAULT '500',
  `FEE` DECIMAL(8,3) NOT NULL DEFAULT '0.000',
  `SPLITRULE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `GATETYPE` INT(11) NOT NULL DEFAULT '1',
  `PORTTYPE` INT(11) NOT NULL DEFAULT '0',
  `SORTID` INT(11) NOT NULL DEFAULT '1',
  `SHOWFLAG` INT(11) NOT NULL DEFAULT '1',
  `EACHSIGN` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `GATEPRIVILEGE` INT(11) NOT NULL DEFAULT '0',
  `ENSIGNSTR` VARCHAR(20) NOT NULL DEFAULT ' ',
  `ENSIGNLEN` INT(11) NOT NULL DEFAULT '20',
  `ENPREFIXLEN` INT(11) NOT NULL DEFAULT '6' ,
  `ENMAXWORDS` INT(11) NOT NULL DEFAULT '720',
  `ENSINGLELEN` INT(11) NOT NULL DEFAULT '160' ,
  `ENMULTILEN1` INT(11) NOT NULL DEFAULT '153',
  `ENMULTILEN2` INT(11) NOT NULL DEFAULT '133' ,
  `ESPLITMAXWD` INT(11) NOT NULL DEFAULT '360',
  `ESPLITENMAXWD` INT(11) NOT NULL DEFAULT '720' ,
  KEY `ID` (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;


CREATE TABLE A_PROVINCECITY
(
`ID` INT(11) NOT NULL AUTO_INCREMENT,
`PROVINCE`	VARCHAR(256)	NOT NULL DEFAULT '',
`CITY`	VARCHAR(256)	NOT NULL DEFAULT '',
`AREACODE`	INT NOT NULL DEFAULT 0,
`PROVINCECODE`	INT NOT NULL DEFAULT 0,
  PRIMARY KEY  (`ID`),
  KEY `IX_A_PRCE_AREACODE` (`AREACODE`),
  KEY `IX_A_PRCECITY_PRVC` (`PROVINCE`),
  KEY `IX_A_PRCECITY_CITY` (`CITY`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;


CREATE TABLE A_MOBILEAREA
(
`ID` INT(11) NOT NULL AUTO_INCREMENT,
`MOBILE`	INT(11)  NOT NULL DEFAULT 0,
`AREACODE`	INT(11)  NOT NULL DEFAULT 0,
`CREATETIME`	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY  (`ID`),
UNIQUE KEY `IX_A_MOBILEAREA` (`MOBILE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;


CREATE TABLE `A_CMD_ROUTE`(
  `ID` BIGINT(20)  AUTO_INCREMENT,
  `NAME` VARCHAR(50) NOT NULL  DEFAULT '',
  `STRUCTCODE` VARCHAR(20)NOT NULL  DEFAULT '',
  `TRUCTTYPE`  CHAR(2)NOT NULL   DEFAULT '01',
  `BUSSYSNAME` VARCHAR(256)NOT NULL   DEFAULT '',
  `SP_ID`  INT(11) NOT NULL   DEFAULT 0,
  `STATUS` CHAR(2)  NOT NULL   DEFAULT '01',
  `MATCHMODE`  INT(11)  NOT NULL   DEFAULT 0,
  `CMDTYPE`	INT(11)	NOT NULL DEFAULT 0,   
  `CMDPARAM` INT(11) NOT NULL DEFAULT 0,  
  `CMDATTRI` VARCHAR(64) DEFAULT '',      
  `PUSHURL`	VARCHAR(256) DEFAULT '',	    
  `PUSHPROTOCOL` VARCHAR(256) DEFAULT '', 
  `RESERVE1` VARCHAR(64) DEFAULT '',      
  `RESERVE2` VARCHAR(64) DEFAULT '',      
  `CREATER`  VARCHAR(20)  NOT NULL   DEFAULT '',
  `CREATTIME`   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (`ID`),
  KEY `IX_STRUCTCODE` (`STRUCTCODE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;
  
CREATE TABLE `A_CMD_PORT`(                            
 `ID` BIGINT(20)  AUTO_INCREMENT,                     
 `GATEID` BIGINT(20)	NOT NULL DEFAULT 0,             
 `CMDID` BIGINT(20)	NOT NULL DEFAULT 0,               
 `STATUS`	 INT(11) NOT NULL DEFAULT 0,          
 `CPNO`	VARCHAR(21)	DEFAULT '',                       
 `FAILOPT` INT(11) NOT NULL DEFAULT 0,                
 `DEFCMDID`	BIGINT(20) DEFAULT 0,                     
 `RESERVE1`	VARCHAR(64)	DEFAULT '',                   
 `RESERVE2`	VARCHAR(64)	DEFAULT '',                   
 PRIMARY KEY  (`ID`),                                 
 UNIQUE KEY `IX_STRUCTCODE` (`GATEID`,`CMDID`,`CPNO`) 
) ENGINE=INNODB DEFAULT CHARSET=GBK;                  

ALTER TABLE MMS_TASK ADD INDEX IX_MMSTASK_P1 (P1);
ALTER TABLE MMS_TASK ADD INDEX IX_MMSTASK_SDTM (SENDTIME);
ALTER TABLE MMS_TASK ADD INDEX IX_MMSTASK_SVRTYPE (SVRTYPE);
ALTER TABLE MMS_TASK ADD INDEX IX_MMSTASK_TASKID (TASKID);
ALTER TABLE MMS_TASK ADD INDEX IX_MMSTASK_USRID (USERID);

ALTER TABLE MMS_MO ADD INDEX IX_MMS_MO_ORGUID (ORGUID);
ALTER TABLE MMS_MO ADD INDEX IX_MMS_MO_SDSTATUS (SENDSTATUS);
ALTER TABLE MMS_MO ADD INDEX IX_MMS_MO_US (UID,SENDSTATUS );

CREATE TABLE A_IPCOMINFO(
ID	      INT(11) NOT NULL AUTO_INCREMENT,
GATENAME	VARCHAR(32)	NOT NULL ,
PTIP	      VARCHAR(32)	NOT NULL DEFAULT '',
PTPORT	    INT(11)         NOT NULL DEFAULT 0,
IP	      VARCHAR(32)	NOT NULL DEFAULT '',
PORT	    INT(11)         NOT NULL DEFAULT 0,
GATEID	  INT(11)         NOT NULL DEFAULT 0 ,
CORPSIGN	VARCHAR(20)	DEFAULT '',
COMMON	  VARCHAR(256) DEFAULT '',
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY PK_IPCOM (GATEID),
UNIQUE KEY IX_IPCOM_ID (ID),
KEY IX_IPCOM_IP (IP),
KEY IX_IPCOM_PORT (PORT)
) ENGINE=INNODB DEFAULT CHARSET=GBK;


CREATE TABLE A_SIMINFO(
ID	        INT(11)   AUTO_INCREMENT,
GATEID	    INT(11) NOT NULL DEFAULT  0 ,
UNICOM	    INT(11) NOT NULL DEFAULT	0 ,
PHONENO	    VARCHAR(21)	NOT NULL DEFAULT '' ,
MOBILEAREA	INT(11) NOT NULL DEFAULT 0 ,
DESCRIPTION	VARCHAR(256) DEFAULT '',
SIMNO	      INT(11) NOT NULL DEFAULT  0,
HOURLIMIT	  INT(11)	NOT NULL DEFAULT	0,
DAYLIMIT	  INT(11)	NOT NULL DEFAULT	0,
MONTHLIMIT	INT(11)	NOT NULL DEFAULT	0,
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY PK_ASIM (ID),     
KEY IX_ASIM_GATEID (GATEID),     
KEY IX_ASIM_UNICOM (UNICOM),     
KEY IX_ASIM_EAREA (MOBILEAREA), 
KEY IX_ASIM_SIMNO (SIMNO)     
) ENGINE=INNODB DEFAULT CHARSET=GBK;


CREATE TABLE A_MNP(
ID INT(11) NOT NULL AUTO_INCREMENT, 
PHONE VARCHAR(21) NOT NULL DEFAULT '',                          
UNICOM INT(11) NOT NULL DEFAULT 0,
PHONETYPE INT(11) NOT NULL DEFAULT 0,                     
ADDTYPE	INT(11)	NOT NULL DEFAULT 0,                      
OPTTYPE	INT(11)	NOT NULL DEFAULT 0,                      
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY PK_AMNP (ID),                  
KEY IX_MNP_PHOTYPE (PHONETYPE)                                             
) ENGINE=INNODB DEFAULT CHARSET=GBK;
                               
CREATE TABLE A_MNPERRCODE(
ID	INT(11) NOT NULL  AUTO_INCREMENT,
TYPE INT(11) NOT NULL DEFAULT 0,
MNPTYPE INT(11) NOT NULL DEFAULT 0,
ERRORCODE	VARCHAR(7) NOT NULL DEFAULT '',
STATUS	INT(11) NOT NULL DEFAULT 0,
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY PK_MNPERRCODE (ERRORCODE),           
UNIQUE KEY IX_MNPERR_ID  (ID),  
KEY IX_MNPERR_TYPE  (TYPE),
KEY IX_MNPERR_MNPTYPE  (MNPTYPE)    
) ENGINE=INNODB DEFAULT CHARSET=GBK;


CREATE TABLE A_SPE_PHONE(
ID	INT(11) NOT NULL  AUTO_INCREMENT,
PHONE	VARCHAR(21)	NOT NULL DEFAULT '' ,
CUSTID	INT(11) NOT NULL DEFAULT 0,
USERID	VARCHAR(11)	NOT NULL DEFAULT '',
SPECTYPE INT(11) NOT NULL DEFAULT 0,
OPTTYPE	INT(11)  NOT NULL DEFAULT 0,
UNICOM	INT(11)  NOT NULL DEFAULT 0,
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY PK_SPE_PHONE (ID),                          
KEY IX_SPEPHO_SPETYPE (SPECTYPE),    
KEY IX_SPEPHO_UNICOM (UNICOM)                                                        
) ENGINE=INNODB DEFAULT CHARSET=GBK;

CREATE TABLE A_AREACODE(
ID	INT(11) NOT NULL  AUTO_INCREMENT,
AREACODE	VARCHAR(21)	NOT NULL DEFAULT '', 
CODE	INT(11)	NOT NULL DEFAULT 0, 
AREANAME	VARCHAR(256) NOT NULL DEFAULT '',
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
UNIQUE KEY IX_AREACODE (AREACODE),
PRIMARY KEY PK_AREACODE (ID)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

CREATE TABLE A_GWROUTE(
ID	INT(11)  NOT NULL AUTO_INCREMENT,
TYPE	  INT(11) NOT NULL DEFAULT 0,
GATEID	INT(11) NOT NULL DEFAULT 0,
STATUS	INT(11) NOT NULL DEFAULT 0,
UNICOM	INT(11) NOT NULL DEFAULT 0,
AREA	  INT(11) NOT NULL DEFAULT 0,
SIMID	  INT(11) NOT NULL DEFAULT 0,
GATESEQ	INT(11) NOT NULL DEFAULT 0,
SENDTIMEBEGIN	CHAR(8)	NOT NULL DEFAULT '00:00:00',
SENDTIMEEND	CHAR(8)	NOT NULL DEFAULT '23:59:59',
P1	VARCHAR(256)	NOT NULL DEFAULT '',
P2	VARCHAR(256)	NOT NULL DEFAULT '',
CREATETIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
KEY IX_GWRUT_TYPE (TYPE),   
KEY IX_GWRUT_GATEID (GATEID),  
KEY IX_GWRUT_ID (ID)
) ENGINE=INNODB DEFAULT CHARSET=GBK;

CREATE TABLE TRANS_LOG (                              
`ID` BIGINT(20) NOT NULL AUTO_INCREMENT,                               
`USETYPE` VARCHAR(8) DEFAULT '短信' NOT NULL,          
`TRANSNAME` VARCHAR(64) NOT NULL DEFAULT '',          
`TSTATUS` VARCHAR(4000) NOT NULL DEFAULT '',           
`CREATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
`RUNFLAG` INT(11) NOT NULL DEFAULT 0,
PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;









CREATE TABLE `GW_MT_TASK_BAK` (
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `UID` INT(11) NOT NULL DEFAULT '0',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `SPMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SENDSTATUS` SMALLINT UNSIGNED NOT NULL DEFAULT '1',
  `SENDFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `UNICOM` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RESENDCNT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RECVMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSRPTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDRPTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RECVFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `DONEDATE` VARCHAR(10) NOT NULL DEFAULT '',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  `AREACODE`  INT(11) NOT NULL DEFAULT 0,
  `FLAGMTSDOK`    TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FLAGRPTRVOK`   TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FLAGRPTSDOK`   TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MTSUBMITTIME`   DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ERRRESENDCNT`  INT(11) NOT NULL DEFAULT '0',
  `NETERRCNT`   INT(11) NOT NULL DEFAULT '0',
  `SENDRESULT`   INT(11) NOT NULL DEFAULT '0',
  `SPGATESEND`    VARCHAR(21) NOT NULL DEFAULT '',  
  `SPNUMBER`     VARCHAR(21) NOT NULL DEFAULT '',
  `SENDERRCODE`  VARCHAR(10) NOT NULL DEFAULT '',
  `SUBMITDATE`   CHAR(10)    NOT NULL DEFAULT '',
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '',	
   PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_MTTASKBAK_PTID` (`PTMSGID`),
  KEY `IX_MTTASKBAK_P1` (`P1`),
  KEY `IX_MTTASKBAK_SDTM` (`SENDTIME`),
  KEY `IX_MTTASKBAK_SVRTYPE` (`SVRTYPE`),
  KEY `IX_MTTASKBAK_TASKID` (`TASKID`),
  KEY `IX_MTTASKBAK_USRID` (`USERID`),
  KEY `IX_MTTASKBAK_BATCHID` (`BATCHID`),
  KEY `IX_MTTASKBAK_PHONE` (`PHONE`),
  KEY `IX_MTTASKBAK_AREACODE` (`AREACODE`),
  KEY `IX_MTTASKBAK_FLAGMTSDOK` (`FLAGMTSDOK`),
  KEY `IX_MTTASKBAK_FLAGRPTRVOK` (`FLAGRPTRVOK`),
  KEY `IX_MTTASKBAK_FLAGRPTSDOK` (`FLAGRPTSDOK`)
) ENGINE=INNODB  DEFAULT CHARSET=GBK;

DELIMITER ;;
CREATE TRIGGER `TIG_TRANS_LOG` BEFORE INSERT ON `TRANS_LOG` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.CREATETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CREATETIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

DELIMITER ;;
DROP TRIGGER IF EXISTS `TIG_MTTASKBAK`;
CREATE TRIGGER `TIG_MTTASKBAK` BEFORE INSERT ON `GW_MT_TASK_BAK` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.RECVMTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVMTTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.TRANSMTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.TRANSMTTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.TRANSRPTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.TRANSRPTTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.SENDRPTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDRPTTIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

CREATE TABLE `GW_MT_TASK_ERR` (
  `ID` BIGINT(20) NOT NULL ,
  `UID` INT(11) NOT NULL DEFAULT '0',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `SPMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `ECID` INT(11) NOT NULL DEFAULT '0',
  `TASKID` INT(11) NOT NULL DEFAULT '0',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT '0',
  `RETFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FEEFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `PKNUMBER` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `PKTOTAL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `SENDSTATUS` SMALLINT UNSIGNED NOT NULL DEFAULT '1',
  `SENDFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `SENDLEVEL` TINYINT(3) UNSIGNED NOT NULL DEFAULT '5',
  `SENDTYPE` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `UNICOM` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RESENDCNT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RECVMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSMTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `RECVTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `TRANSRPTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `SENDRPTTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MSGFMT` TINYINT(3) UNSIGNED NOT NULL DEFAULT '15',
  `LONGMSGSEQ` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPPID` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `TPUDHI` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `RECVFLAG` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '',
  `DONEDATE` VARCHAR(10) NOT NULL DEFAULT '',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '',
  `P1` VARCHAR(64) NOT NULL DEFAULT '',
  `P2` VARCHAR(64) NOT NULL DEFAULT '',
  `P3` VARCHAR(64) NOT NULL DEFAULT '',
  `P4` VARCHAR(64) NOT NULL DEFAULT '',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT '0',
  `MODULEID` INT(11) NOT NULL DEFAULT '0',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT '0',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  `AREACODE`  INT(11) NOT NULL DEFAULT 0,
  `FLAGMTSDOK`    TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FLAGRPTRVOK`   TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `FLAGRPTSDOK`   TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `MTSUBMITTIME`   DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ERRRESENDCNT`  INT(11) NOT NULL DEFAULT '0',
  `NETERRCNT`   INT(11) NOT NULL DEFAULT '0',
  `SENDRESULT`   INT(11) NOT NULL DEFAULT '0',
  `SPGATESEND`    VARCHAR(21) NOT NULL DEFAULT '',  
  `SPNUMBER`     VARCHAR(21) NOT NULL DEFAULT '',
  `SENDERRCODE`  VARCHAR(10) NOT NULL DEFAULT '',
  `SUBMITDATE`   CHAR(10)    NOT NULL DEFAULT '',
 KEY `IX_MTTASKERR_PTID` (`PTMSGID`),
 KEY `IX_MTTASKERR_SDTM` (`SENDTIME`)  
) ENGINE=INNODB  DEFAULT CHARSET=GBK;

CREATE TABLE  `GW_MTSDOK`
 (`ID`            BIGINT(20)      NOT NULL    AUTO_INCREMENT    , 
  `PTMSGID`       BIGINT(20)      NOT NULL      DEFAULT 0 ,
  `SPMSGID`       BIGINT(20)      NOT NULL      DEFAULT 0 ,
  `SENDSTATUS`    SMALLINT      NOT NULL  DEFAULT 3            ,
   `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `TRANSMTTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `MTSUBMITTIME`  DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `SENDTIME`       DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `ERRRESENDCNT`  INT(11)      NOT NULL   DEFAULT 0   ,
  `NETERRCNT`     INT(11)      NOT NULL   DEFAULT 0   ,
  `SENDRESULT`    INT(11)     NOT NULL   DEFAULT 1    ,
  `SPGATESEND`    VARCHAR(21)   NOT NULL DEFAULT '',
  `SPNUMBER`      VARCHAR(21)    NOT NULL DEFAULT '',
  `PHONE`         VARCHAR(21)    NOT NULL DEFAULT '',
  `SENDERRCODE`   VARCHAR(10)   NOT NULL DEFAULT '',
  `TPUDHI`        INT(11)     NOT NULL   DEFAULT 0    ,
  `TPPID`         INT(11)     NOT NULL   DEFAULT 0    ,
  `PKTOTAL`       INT(11)     NOT NULL   DEFAULT 0    ,
  `PKNUMBER`      INT(11)     NOT NULL   DEFAULT 0    ,
  `LONGMSGSEQ`    INT(11)     NOT NULL   DEFAULT 0    ,
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY  (`ID`),
  KEY `IX_GWMTSDOK_PTMSGID` (`PTMSGID`),
  KEY `IX_GWMTSDOK_SPGATESEND` (`SPGATESEND`),
  KEY `IX_GWMTSDOK_SENDRESULT` (`SENDRESULT`),
  KEY `IX_GWMTSDOK_IN_TIME` (`IN_TIME`)
) ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=GBK;
                 
                 
    CREATE TABLE  `GW_MTSDOK_BAK`
 (`ID`            BIGINT(20)      NOT NULL   , 
  `PTMSGID`       BIGINT(20)      NOT NULL      DEFAULT 0 ,
  `SPMSGID`       BIGINT(20)      NOT NULL      DEFAULT 0 ,
  `SENDSTATUS`    SMALLINT      NOT NULL  DEFAULT 3            ,
   `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `TRANSMTTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `MTSUBMITTIME`  DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `SENDTIME`       DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `ERRRESENDCNT`  INT(11)      NOT NULL   DEFAULT 0   ,
  `NETERRCNT`     INT(11)      NOT NULL   DEFAULT 0   ,
  `SENDRESULT`    INT(11)     NOT NULL   DEFAULT 1    ,
  `SPGATESEND`    VARCHAR(21)   NOT NULL DEFAULT '',
  `SPNUMBER`      VARCHAR(21)    NOT NULL DEFAULT '',
  `PHONE`         VARCHAR(21)    NOT NULL DEFAULT '',
  `SENDERRCODE`   VARCHAR(10)   NOT NULL DEFAULT '',
  `TPUDHI`        INT(11)     NOT NULL   DEFAULT 0    ,
  `TPPID`         INT(11)     NOT NULL   DEFAULT 0    ,
  `PKTOTAL`       INT(11)     NOT NULL   DEFAULT 0    ,
  `PKNUMBER`      INT(11)     NOT NULL   DEFAULT 0    ,
  `LONGMSGSEQ`    INT(11)     NOT NULL   DEFAULT 0    ,
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY `IX_GWMTSDOKBAK_ID` (`ID`),
  KEY `IX_GWMTSDOKBAK_PTMSGID` (`PTMSGID`),
  KEY `IX_GWMTSDOKBAK_IN_TIME` (`IN_TIME`)
) ENGINE=INNODB  DEFAULT CHARSET=GBK;             
                 
   CREATE TABLE  `GW_MTSDOK_ERR`
 (`ID`            BIGINT(20)      NOT NULL   , 
  `PTMSGID`       BIGINT(20)      NOT NULL      DEFAULT 0 ,
  `SPMSGID`       BIGINT(20)      NOT NULL      DEFAULT 0 ,
  `SENDSTATUS`    SMALLINT      NOT NULL  DEFAULT 3            ,
   `SPID` VARCHAR(32) NOT NULL DEFAULT '',
  `TRANSMTTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `MTSUBMITTIME`  DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `SENDTIME`       DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `ERRRESENDCNT`  INT(11)      NOT NULL   DEFAULT 0   ,
  `NETERRCNT`     INT(11)      NOT NULL   DEFAULT 0   ,
  `SENDRESULT`    INT(11)     NOT NULL   DEFAULT 1    ,
  `SPGATESEND`    VARCHAR(21)   NOT NULL DEFAULT '',
  `SPNUMBER`      VARCHAR(21)    NOT NULL DEFAULT '',
  `PHONE`         VARCHAR(21)    NOT NULL DEFAULT '',
  `SENDERRCODE`   VARCHAR(10)   NOT NULL DEFAULT '',
  `TPUDHI`        INT(11)     NOT NULL   DEFAULT 0    ,
  `TPPID`         INT(11)     NOT NULL   DEFAULT 0    ,
  `PKTOTAL`       INT(11)     NOT NULL   DEFAULT 0    ,
  `PKNUMBER`      INT(11)     NOT NULL   DEFAULT 0    ,
  `LONGMSGSEQ`    INT(11)     NOT NULL   DEFAULT 0    ,
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY `IX_GWMTSDOKERR_ID` (`ID`),
  KEY `IX_GWMTSDOKERR_PTMSGID` (`PTMSGID`),
  KEY `IX_GWMTSDOKERR_IN_TIME` (`IN_TIME`)
) ENGINE=INNODB  DEFAULT CHARSET=GBK;
              
DROP TABLE  IF EXISTS `GW_RPTRVOK`;
 CREATE TABLE  `GW_RPTRVOK`
 (`ID`           BIGINT(20)        NOT NULL    AUTO_INCREMENT  , 
  `PTMSGID`     BIGINT(20)  NOT NULL   DEFAULT 0  ,
  `SPMSGID`     BIGINT(20)   NOT NULL   DEFAULT 0  ,
  `SENDSTATUS`  SMALLINT     NOT NULL   DEFAULT 5  , 
  `RECVTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DONEDATE`    CHAR(10)   NOT NULL  DEFAULT '' ,
  `SUBMITDATE`  CHAR(10)   NOT NULL  DEFAULT '' ,
  `ERRORCODE`   CHAR(7)    NOT NULL  DEFAULT '' ,
  `PHONE`       VARCHAR(21)   NOT NULL    DEFAULT '' ,
  `SPNUMBER`    VARCHAR(21)   NOT NULL    DEFAULT '' ,
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, 
    PRIMARY KEY  (`ID`),
  KEY `IX_GWRPTRVOK_PTMSGID` (`PTMSGID`),
  KEY `IX_GWRPTRVOK_IN_TIME` (`IN_TIME`)
 )  ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=GBK;

DROP TABLE  IF EXISTS `GW_RPTRVOK_BAK`;
CREATE TABLE  `GW_RPTRVOK_BAK`
 (`ID`           BIGINT(20)        NOT NULL  , 
  `PTMSGID`     BIGINT(20)  NOT NULL   DEFAULT 0  ,
  `SPMSGID`     BIGINT(20)   NOT NULL   DEFAULT 0  ,
  `SENDSTATUS`  SMALLINT     NOT NULL   DEFAULT 5  , 
  `RECVTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DONEDATE`    CHAR(10)   NOT NULL  DEFAULT '' ,
  `SUBMITDATE`  CHAR(10)   NOT NULL  DEFAULT '' ,
  `ERRORCODE`   CHAR(7)    NOT NULL  DEFAULT '' ,
  `PHONE`       VARCHAR(21)   NOT NULL    DEFAULT '' ,
  `SPNUMBER`    VARCHAR(21)   NOT NULL    DEFAULT '' ,
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, 
   UNIQUE KEY `IX_GWRPTRVOKBAK_ID` (`ID`),
  KEY `IX_GWRPTRVOKBAK_PTMSGID` (`PTMSGID`),
  KEY `IX_GWRPTRVOKBAK_IN_TIME` (`IN_TIME`)
 )  ENGINE=INNODB DEFAULT CHARSET=GBK;

DROP TABLE  IF EXISTS `GW_RPTRVOK_ERR`; 
 CREATE TABLE  `GW_RPTRVOK_ERR`
 (`ID`           BIGINT(20)        NOT NULL, 
  `PTMSGID`     BIGINT(20)  NOT NULL   DEFAULT 0  ,
  `SPMSGID`     BIGINT(20)   NOT NULL   DEFAULT 0  ,
  `SENDSTATUS`  SMALLINT     NOT NULL   DEFAULT 5  , 
  `RECVTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `DONEDATE`    CHAR(10)   NOT NULL  DEFAULT '' ,
  `SUBMITDATE`  CHAR(10)   NOT NULL  DEFAULT '' ,
  `ERRORCODE`   CHAR(7)    NOT NULL  DEFAULT '' ,
  `PHONE`       VARCHAR(21)   NOT NULL    DEFAULT '' ,
  `SPNUMBER`    VARCHAR(21)   NOT NULL    DEFAULT '' ,
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, 
  UNIQUE KEY `IX_GWRPTRVOKERR_ID` (`ID`),
  KEY `IX_GWRPTRVOKERR_PTMSGID` (`PTMSGID`),
  KEY `IX_GWRPTRVOKERR_IN_TIME` (`IN_TIME`)
 )  ENGINE=INNODB DEFAULT CHARSET=GBK;
 

DROP TABLE  IF EXISTS `GW_RPTSDOK`;
CREATE TABLE  `GW_RPTSDOK`
 (`ID`            BIGINT(20)    NOT NULL     AUTO_INCREMENT      ,
  `PTMSGID`       BIGINT(20)    NOT NULL     DEFAULT 0  ,
  `SPMSGID`       BIGINT(20)    NOT NULL     DEFAULT 0  ,
  `SENDSTATUS`    SMALLINT       NOT NULL  DEFAULT 5  ,
  `SENDFLAG`      INT(11)       NOT NULL  DEFAULT 0  ,
  `SENDRPTTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `TRANSRPTTIME`   DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `ERRORCODE`     CHAR(7)      NOT NULL   DEFAULT '' ,        
  `PHONE`         VARCHAR(21)  NOT NULL   DEFAULT '' ,        
  `SPNUMBER`      VARCHAR(21)  NOT NULL   DEFAULT '' ,        
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
    PRIMARY KEY  (`ID`),   
  KEY `IX_GWRPTSDOK_PTMSGID` (`PTMSGID`), 
  KEY `IX_GWRPTSDOK_IN_TIME` (`IN_TIME`)  
 )  ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=GBK;


 
DROP TABLE  IF EXISTS `GW_RPTSDOK_BAK`;
CREATE TABLE  `GW_RPTSDOK_BAK`
 (`ID`            BIGINT(20)    NOT NULL     ,
  `PTMSGID`       BIGINT(20)    NOT NULL     DEFAULT 0  ,
  `SPMSGID`       BIGINT(20)    NOT NULL     DEFAULT 0  ,
  `SENDSTATUS`    SMALLINT       NOT NULL  DEFAULT 5  ,
  `SENDFLAG`      INT(11)       NOT NULL  DEFAULT 0  ,
  `SENDRPTTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `TRANSRPTTIME`   DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `ERRORCODE`     CHAR(7)      NOT NULL   DEFAULT '' ,        
  `PHONE`         VARCHAR(21)  NOT NULL   DEFAULT '' ,        
  `SPNUMBER`      VARCHAR(21)  NOT NULL   DEFAULT '' ,        
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
   UNIQUE KEY `IX_GWRPTSDOKBAK_ID` (`ID`),    
  KEY `IX_GWRPTSDOKBAK_PTMSGID` (`PTMSGID`), 
  KEY `IX_GWRPTSDOKBAK_IN_TIME` (`IN_TIME`)  
 )  ENGINE=INNODB  DEFAULT CHARSET=GBK;
 
 DROP TABLE  IF EXISTS `GW_RPTSDOK_ERR`;
CREATE TABLE  `GW_RPTSDOK_ERR`
 (`ID`            BIGINT(20)    NOT NULL     ,
  `PTMSGID`       BIGINT(20)    NOT NULL     DEFAULT 0  ,
  `SPMSGID`       BIGINT(20)    NOT NULL     DEFAULT 0  ,
  `SENDSTATUS`    SMALLINT       NOT NULL  DEFAULT 5  ,
  `SENDFLAG`      INT(11)       NOT NULL  DEFAULT 0  ,
  `SENDRPTTIME`    DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `TRANSRPTTIME`   DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',  
  `ERRORCODE`     CHAR(7)      NOT NULL   DEFAULT '' ,        
  `PHONE`         VARCHAR(21)  NOT NULL   DEFAULT '' ,        
  `SPNUMBER`      VARCHAR(21)  NOT NULL   DEFAULT '' ,        
  `IN_TIME`       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
   UNIQUE KEY `IX_GWRPTSDOKERR_ID` (`ID`),    
  KEY `IX_GWRPTSDOKERR_PTMSGID` (`PTMSGID`), 
  KEY `IX_GWRPTSDOKERR_IN_TIME` (`IN_TIME`)  
 )  ENGINE=INNODB  DEFAULT CHARSET=GBK;


DROP TABLE  IF EXISTS `GW_TRAN_DEL_LOG`;
CREATE TABLE  `GW_TRAN_DEL_LOG`
 (`ID`       BIGINT(20)     NOT NULL  AUTO_INCREMENT ,
  `OPRTYPE`  TINYINT(3)   NOT NULL,
  `STARTID`  BIGINT(20)     NOT NULL,
  `ENDID`    BIGINT(20)     NOT NULL,
  `ISSUCCES` TINYINT(3)   NOT NULL,
  `IN_TIME`  DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00'  ,
  `END_TIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00' ,
    PRIMARY KEY  (`ID`)
 )ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=GBK;

 DROP TABLE  IF EXISTS `GW_UPD_DEL_LOG`;
CREATE TABLE  `GW_UPD_DEL_LOG`
 (`ID`       BIGINT(20)     NOT NULL  AUTO_INCREMENT  ,
  `OPRTYPE`  TINYINT(3)   NOT NULL,
  `UPTYPE`   TINYINT(3)   NOT NULL,
  `COUNTID`  BIGINT(20)     NOT NULL,
  `ISSUCCES` TINYINT(3)   NOT NULL,
  `IN_TIME`  DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00'  ,
  `END_TIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00'  ,
   PRIMARY KEY  (`ID`)
 )ENGINE=INNODB AUTO_INCREMENT=5 DEFAULT CHARSET=GBK;



CREATE TABLE `GW_MSGTAIL`(
`TAIL_ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
`TAIL_NAME` VARCHAR(64) NOT NULL DEFAULT '',
`CONTENT` VARCHAR(512) NOT NULL DEFAULT '',
`CREATE_TIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
`UPDATE_TIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
`CORP_CODE` VARCHAR(64) NOT NULL DEFAULT '',
`USER_ID` BIGINT(20) NOT NULL DEFAULT 0,
PRIMARY KEY  (`TAIL_ID`),
KEY `IX_MSGTAIL_CC` (`CORP_CODE`)
)ENGINE=INNODB DEFAULT CHARSET=GBK;

DELIMITER ;;
CREATE TRIGGER `TIG_GW_MSGTAIL` BEFORE INSERT ON `GW_MSGTAIL` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.CREATE_TIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CREATE_TIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.UPDATE_TIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATE_TIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;


CREATE TABLE `GW_TAILBIND`(
`ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
`TAIL_ID` BIGINT(20) NOT NULL DEFAULT 0,
`BUS_CODE` VARCHAR(64) NOT NULL DEFAULT '',
`SPUSERID` VARCHAR(11) NOT NULL DEFAULT '', 
`TAIL_TYPE` TINYINT(3) NOT NULL DEFAULT 0, 
`CORP_CODE`	VARCHAR(64) NOT NULL DEFAULT '',
`CREATE_TIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
`UPDATE_TIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
`USER_ID` BIGINT(20) NOT NULL DEFAULT 0,  
PRIMARY KEY  (`ID`),
KEY `IX_TAILBIND_TI` (`TAIL_ID`),
KEY `IX_TAILBIND_CC` (`CORP_CODE`)
)ENGINE=INNODB DEFAULT CHARSET=GBK;  

           
DELIMITER ;;
CREATE TRIGGER `TIG_GW_TAILBIND` BEFORE INSERT ON `GW_TAILBIND` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.CREATE_TIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CREATE_TIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.UPDATE_TIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATE_TIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;


CREATE TABLE `GW_TAILCTRL`(
`ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
`OVERTAILFLAG` TINYINT(3) NOT NULL DEFAULT 0,
`OTHERTAILFLAG` TINYINT(3) NOT NULL DEFAULT 0,
`CREATE_TIME`	DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
`UPDATE_TIME`	DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
`CORP_CODE`	VARCHAR(64)NOT NULL DEFAULT '',
`USER_ID` BIGINT(20) NOT NULL DEFAULT 0,  
PRIMARY KEY  (`ID`),
KEY `IX_TAILCTRL_CC` (`CORP_CODE`) 
)ENGINE=INNODB DEFAULT CHARSET=GBK; 

DELIMITER ;;
CREATE TRIGGER `TIG_GW_TAILCTRL` BEFORE INSERT ON `GW_TAILCTRL` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.CREATE_TIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CREATE_TIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.UPDATE_TIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATE_TIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;

CREATE TABLE IF NOT EXISTS `GW_CLUDECISION`(
`ID`  INT(11) NOT NULL AUTO_INCREMENT,
`GWTYPE`	INT(11) NOT NULL DEFAULT 0,
`GWNO`	INT(11)	NOT NULL DEFAULT 0,
`RUNGWNO`	INT(11)	NOT NULL DEFAULT 0,
`RUNUPDTIME`	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
`APPLYGWNO`	INT(11)	NOT NULL DEFAULT 0,
`APPLYSTATUS`	INT(11)	NOT NULL DEFAULT 0,
PRIMARY KEY(`ID`),
KEY `IX_CLUDE_TP_NO` (`GWTYPE` ASC,`GWNO`) 
)ENGINE=INNODB DEFAULT CHARSET=GBK;

CREATE TABLE IF NOT EXISTS `GW_CLUSTATUS`(
`ID` INT(11) NOT NULL AUTO_INCREMENT,
`GWTYPE`	INT(11)	NOT NULL DEFAULT 0,
`GWNO`	INT(11)	NOT NULL DEFAULT 0,
`PRIGWNO`	INT(11)	NOT NULL DEFAULT 0,
`RUNSTATUS`	INT(11)	NOT NULL DEFAULT 0,
`GWEIGHT`	INT(11)	NOT NULL DEFAULT 0,
`RUNWEIGHT`	INT(11)	NOT NULL DEFAULT 0,
`UPDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(`ID`),
KEY `IX_CLUST_TP_NO` (`GWTYPE` ASC,`GWNO`) 
)ENGINE=INNODB DEFAULT CHARSET=GBK;

CREATE TABLE IF NOT EXISTS `GW_CLUSPBIND`(
`ID` INT(11) NOT NULL AUTO_INCREMENT,
`PTACCUID`	INT(11)	NOT NULL DEFAULT 0,
`GWNO`	INT(11)	NOT NULL DEFAULT 0,
`GWEIGHT`	INT(11)	NOT NULL DEFAULT 0,
`UPDTIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(`ID`)
)ENGINE=INNODB DEFAULT CHARSET=GBK;

#####GW_DBMONITOR 新增网关数据库监控测试表
CREATE TABLE IF NOT EXISTS `GW_DBMONITOR`(
`ID`  BIGINT(11) NOT NULL AUTO_INCREMENT,
`GWNO`	INT(11)	NOT NULL DEFAULT 0,
`TESTSTRING` VARCHAR(256) NOT NULL DEFAULT 0,
`UPDTIME`	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(`ID`)
)ENGINE=INNODB DEFAULT CHARSET=GBK;


CREATE TABLE IF NOT  EXISTS `GW_BASEPARA` (
  `ID` INT(11) NOT NULL DEFAULT '0',
  `FUNNAME` VARCHAR(20)  NOT NULL  DEFAULT '' COMMENT '方法名',
  `CMDTYPE` TINYINT NOT NULL DEFAULT '1' COMMENT '请求类型。1-请求 2-回应',
  `ARGNAME` VARCHAR(50) NOT NULL DEFAULT '',
  `ARGVALUELEN` INT(11) NOT NULL DEFAULT '0',
  `ARGDES` VARCHAR(50) NOT NULL DEFAULT '',
  `ARGTYPE` TINYINT NOT NULL DEFAULT '1' COMMENT '参数类型。1：字符串，2：int， 3：tinyint，4：大整形',
  `CREATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MODIFTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `RESERVE` VARCHAR(64) NOT NULL DEFAULT '',
  PRIMARY KEY  (`FUNNAME`,`CMDTYPE`,`ARGNAME`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='接口参数基本表';

DELIMITER ;;
DROP TRIGGER IF EXISTS `TIG_GWBASEPARA`;
CREATE TRIGGER `TIG_GWBASEPARA` BEFORE INSERT ON `GW_BASEPARA` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.CREATETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CREATETIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.MODIFTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.MODIFTIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

CREATE TABLE IF NOT  EXISTS `GW_PROTOMTCH` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `ECID` INT(11)  NOT NULL  DEFAULT '0' COMMENT '企业ID',
  `FUNTYPE` VARCHAR(30) NOT NULL DEFAULT '',
  `FUNNAME` VARCHAR(20) NOT NULL DEFAULT '',
  `CMDTYPE` TINYINT NOT NULL DEFAULT '1',
  `CARGNAME` VARCHAR(50) NOT NULL DEFAULT '',
  `MARGNAME`	VARCHAR(50) NOT NULL DEFAULT '',
  `CARGTYPE` TINYINT NOT NULL DEFAULT '1' ,
  `CARGVALUE` VARCHAR(64) NOT NULL DEFAULT '',
  `BELONGTYPE` TINYINT NOT NULL DEFAULT '0' ,
  `BELONG` VARCHAR(50) NOT NULL DEFAULT '',
  `CREATETIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MODIFTIME` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `RESERVE` VARCHAR(64) NOT NULL DEFAULT '',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IDX_FFCCB` (`FUNTYPE`,`FUNNAME`,`CMDTYPE`,`CARGNAME`,`BELONG`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='接口参数映射关系表';

CREATE TABLE IF NOT  EXISTS `GW_USERPROPERTY` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `ECID` INT(11)  NOT NULL  DEFAULT '0' COMMENT '企业ID',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `PWDENCODE` TINYINT NOT NULL DEFAULT '0' ,
  `PWDENCODESTR`  VARCHAR(256) NOT NULL DEFAULT '00000000',
  `MSGCODE` TINYINT NOT NULL DEFAULT '1' ,
  `MSGENCODE` TINYINT NOT NULL DEFAULT '1' ,
  `PUSHMOFMT` TINYINT NOT NULL DEFAULT '2' ,
  `PUSHRPTFMT` TINYINT NOT NULL DEFAULT '2' ,
  `PUSHPWDENCODE` TINYINT NOT NULL DEFAULT '0' ,
  `PUSHPWDENCODESTR` VARCHAR(256) NOT NULL DEFAULT '00000000',
  `PUSHMSGCODE` TINYINT NOT NULL DEFAULT '1' ,
  `PUSHMSGENCODE` TINYINT NOT NULL DEFAULT '1' ,
  `PUSHFAILCNT` TINYINT NOT NULL DEFAULT '3' ,
  `PUSHSLIDEWND` TINYINT NOT NULL DEFAULT '5' ,
  `PUSHMOMAXCNT` INT(11) NOT NULL DEFAULT '100',
  `PUSHRPTMAXCNT` INT(11) NOT NULL DEFAULT '100',
  `GETMOMAXCNT` INT(11) NOT NULL DEFAULT '100',
  `GETRPTMAXCNT` INT(11) NOT NULL DEFAULT '100',
  `RESERVE` VARCHAR(64) NOT NULL DEFAULT '',
  `CACERTNAME` VARCHAR(256) NOT NULL DEFAULT '',
  `VERIFYPEER` TINYINT NOT NULL DEFAULT '1' ,
  `VERIFYHOST` TINYINT NOT NULL DEFAULT '1' ,
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='用户属性表';


CREATE TABLE IF NOT  EXISTS `GW_PUSHPROTOMTCH` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `ECID` INT(11)  NOT NULL  DEFAULT '0' COMMENT '企业ID',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `PUSHFLAG` TINYINT NOT NULL DEFAULT '1' ,
  `CMDTYPE` TINYINT NOT NULL DEFAULT '1' ,
  `CARGNAME` VARCHAR(30) NOT NULL DEFAULT '',
  `CARGTYPE` TINYINT NOT NULL DEFAULT '1' ,
  `MARGNAME` VARCHAR(30) NOT NULL DEFAULT '',
  `CARGVALUE` VARCHAR(30) NOT NULL DEFAULT '',
  `BELONGTYPE` TINYINT NOT NULL DEFAULT '0' ,
  `BELONG` VARCHAR(30) NOT NULL DEFAULT 'mos',
  `RESERVE` VARCHAR(64) NOT NULL DEFAULT '',
   PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='推送关系表';



CREATE TABLE IF NOT  EXISTS `GW_MULTI_ENTERP` (
  `ECID` INT(11)  NOT NULL  DEFAULT '0' COMMENT '企业ID',
  `FUNTYPE` VARCHAR(30) NOT NULL DEFAULT '',
  `RESPFMT` INT(11)  NOT NULL DEFAULT '2' ,
  `STATUS` TINYINT NOT NULL DEFAULT '1' ,
  `BOOKCNT` TINYINT NOT NULL DEFAULT '0' ,
  `MATCHCNT` TINYINT NOT NULL DEFAULT '0' ,
  `CREATETM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MODIYTM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `REQFMT` INT(11)  NOT NULL DEFAULT '2' ,
  PRIMARY KEY  (`ECID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='个性化接口企业信息';

DELIMITER ;;
DROP TRIGGER IF EXISTS `TIG_MULTIENTERP`;
CREATE TRIGGER `TIG_MULTIENTERP` BEFORE INSERT ON `GW_MULTI_ENTERP` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.CREATETM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CREATETM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.MODIYTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.MODIYTM = @P_CURTIME;
END IF;
END;;
DELIMITER ;

CREATE TABLE IF NOT  EXISTS `GW_BASEPROTOCOL` (
 `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `ECID` INT(11)  NOT NULL  DEFAULT '0' COMMENT '企业ID',
  `FUNTYPE` VARCHAR(30) NOT NULL DEFAULT '',
  `FUNNAME` VARCHAR(20) NOT NULL DEFAULT '',
  `CFUNNAME` VARCHAR(50) NOT NULL DEFAULT '',
  `CMDTYPE` TINYINT NOT NULL DEFAULT '1' ,
  `RETTYPE` TINYINT NOT NULL DEFAULT '2' ,
  `STATUS` TINYINT NOT NULL DEFAULT '1' ,
  `CUST_INTFNAME` VARCHAR(64)  NOT NULL   DEFAULT '',
  `FMTMSG` VARCHAR(3000)  NOT NULL   DEFAULT '',
  `CREATETM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `MODIYTM`  DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IDX_CFFC` (`ECID`,`FUNTYPE`,`FUNNAME`,`CMDTYPE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='企业基本协议表';


DELIMITER ;;
DROP TRIGGER IF EXISTS `TIG_BASEPROTOCOL`;
CREATE TRIGGER `TIG_BASEPROTOCOL` BEFORE INSERT ON `GW_BASEPROTOCOL` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.CREATETM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CREATETM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.MODIYTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.MODIYTM = @P_CURTIME;
END IF;
END;;
DELIMITER ;

CREATE TABLE IF NOT  EXISTS `GW_PUSHRSPROTOCOL` (
 `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `ECID` INT(11)  NOT NULL  DEFAULT '0' COMMENT '企业ID',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '',
  `RSPCMD` TINYINT NOT NULL DEFAULT '1' ,
  `CARGNAME` VARCHAR(50) NOT NULL DEFAULT '',
  `RSPSTATUS` TINYINT NOT NULL DEFAULT '1' ,
  `CRSPFMT` TINYINT NOT NULL DEFAULT '2' ,
  `CARGVALUE` VARCHAR(128) NOT NULL DEFAULT '',
   PRIMARY KEY  (`ID`),
   UNIQUE KEY `IDX_ERCR`   (`ECID`,`RSPCMD`,`CARGNAME`,`RSPSTATUS`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='推送用户回应协议表';


CREATE TABLE IF NOT  EXISTS `GW_GATECONNINFO` (
 `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `PTID` INT(11)  NOT NULL  DEFAULT '0' ,
  `GATEID` INT(11) NOT NULL DEFAULT '0',
  `CONNTYPE` TINYINT NOT NULL DEFAULT '0' ,
  `PTACCID` VARCHAR(11) NOT NULL DEFAULT '',
  `IP` VARCHAR(32) NOT NULL DEFAULT '',
  `PORT` INT(11) NOT NULL DEFAULT '0',
  `LINKCNT` INT(11) NOT NULL DEFAULT '1',
  `SPEEDLIMIT` INT(11) NOT NULL DEFAULT '1000',
`LINKLEVEL` TINYINT NOT NULL DEFAULT '0' ,
`LINKSTATUS` TINYINT NOT NULL DEFAULT '0' ,
`PING` TINYINT NOT NULL DEFAULT '0' ,
`MINLINKS` TINYINT NOT NULL DEFAULT '1' ,
`KEEPCONN` TINYINT NOT NULL DEFAULT '1' ,
`RECONNCNT` TINYINT NOT NULL DEFAULT '5' ,
`RELOGINCNT` TINYINT NOT NULL DEFAULT '5' ,
`SWITCHMAINIP` TINYINT NOT NULL DEFAULT '1' ,
`TESTMETHOD` TINYINT NOT NULL DEFAULT '1' ,
`TESTTIMES` INT(11) NOT NULL DEFAULT '60',
 `ABNORMALONG` INT(11) NOT NULL DEFAULT '300',
 `ABNORMALTMS` INT(11) NOT NULL DEFAULT '10',
`CREATETM` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
`UPDATETM`  DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY  (`ID`),
 UNIQUE KEY `IDX_PIPPGC`(`PTACCID`,`IP`,`PORT`,`PTID`,`GATEID`,`CONNTYPE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='链路连接参数配置表';

DELIMITER ;;
DROP TRIGGER IF EXISTS `TIG_GATECONNINFO`;
CREATE TRIGGER `TIG_GATECONNINFO` BEFORE INSERT ON `GW_GATECONNINFO` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.CREATETM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CREATETM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.UPDATETM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATETM = @P_CURTIME;
END IF;
END;;
DELIMITER ;

CREATE TABLE IF NOT  EXISTS `GW_TDCMD` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `TD_CMD` VARCHAR(64)  NOT NULL  DEFAULT 'TD',
  `TD_USERID` VARCHAR(11) NOT NULL DEFAULT '000000',
  `TD_SPNUMBER` VARCHAR(21) NOT NULL DEFAULT ' ' ,
  `TD_ECID` INT(11) NOT NULL DEFAULT 0,
  `TD_TIMES` INT(11) NOT NULL DEFAULT 1,
  `MATCHTYPE` TINYINT NOT NULL DEFAULT 0,
  `OPTYPE` TINYINT NOT NULL DEFAULT 0,
  `PB_USERID` VARCHAR(11) NOT NULL DEFAULT '000000',
  `PB_SPNUMBER` VARCHAR(11) NOT NULL DEFAULT ' ',
  `PB_SVRTYPE` VARCHAR(64)  NOT NULL  DEFAULT ' ',
  `PB_CROPCODE` VARCHAR(64)  NOT NULL  DEFAULT ' ',
  `STATUS` TINYINT NOT NULL DEFAULT 0,
   PRIMARY KEY  (`ID`),
   KEY `IDX_CUSE`(`TD_CMD`,`TD_USERID`,`TD_SPNUMBER`,`TD_ECID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='退订指令表';

CREATE TABLE IF NOT  EXISTS `GW_TDCMD_HIS` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `TD_PHONE`  BIGINT(20) NOT NULL DEFAULT 0,
  `TD_CMD` VARCHAR(64)  NOT NULL  DEFAULT 'TD',
  `TD_USERID` VARCHAR(11) NOT NULL DEFAULT '000000',
  `TD_SPNUMBER` VARCHAR(21) NOT NULL DEFAULT ' ' ,
  `TD_ECID` INT(11) NOT NULL DEFAULT 0,
  `OPTYPE` TINYINT NOT NULL DEFAULT 0,
  `MO_MSGID` BIGINT(20) NOT NULL DEFAULT 0,
  `TD_TIME` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY  (`ID`),
   KEY `IDX_PCUSE`(`TD_PHONE`,`TD_CMD`,`TD_USERID`,`TD_SPNUMBER`,`TD_ECID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK COMMENT='上行退订操作历史记录表';


DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_RTAILCTRL`()
BEGIN
    SELECT OVERTAILFLAG,OTHERTAILFLAG,CORP_CODE FROM GW_TAILCTRL ;
END;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_RBINDINFO`()
BEGIN
    SELECT A.TAIL_ID,B.CONTENT,A.CORP_CODE,A.BUS_CODE,A.SPUSERID,A.TAIL_TYPE 
    FROM GW_TAILBIND A INNER JOIN GW_MSGTAIL B ON A.TAIL_ID=B.TAIL_ID ;
END;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_LFSPECBIND`()
BEGIN
    SELECT SPUSER,CORP_CODE FROM LF_SP_DEP_BIND WHERE IS_VALIDATE=1;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_LOADALLBIND
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADALLBIND`(
   PISPTYPE INT ##=1
)
BEGIN
	SELECT /*CORP.ECID*/ 0 AS ECID,USR.UID,USR.UID AS UIDEX,USR.RISELEVEL AS RISELEVEL,TB2.DESTUID AS DESTUID,USR.USERID AS USERID,GT.ID AS CHANNELNO,
  /*USR.USERID*/USR.LOGINID AS LOGINID,GT.PORTTYPE AS PORTTYPE,0 AS ISEXCHANNEL,GT.SPGATE AS SPGATE,GT.CPNO AS CPNO,GT.SPISUNCM AS SPISUNCM,GT.FEEFLAG AS FEEFLAG,
  GT.ROUTEFLAG AS ROUTEFLAG,GT.SIGNSTR AS SIGNSTR,GT.SIGNLEN AS SIGNLEN,GT.MAXWORDS AS MAXWORDS,/*GT.SINGLELEN*/70 AS SINGLELEN,GT.MULTILEN1 AS MULTILEN1,
  GT.MULTILEN2 AS MULTILEN2,GT.SENDTIMEBEGIN AS TIMESTART,GT.SENDTIMEEND AS TIMEEND,GT.GATESEQ AS GATESEQ,GT.MOBIAREA AS GATEAREA,GATE.AREATYPE AS AREATYPE,GATE.GATEPRIVILEGE AS GATEPRIVILEGE,GATE.ENPREFIXLEN AS ENPREFIXLEN,
GT.ENSIGNSTR AS ENSIGNSTR,GT.ENSIGNLEN AS ENSIGNLEN,GT.ENMAXWORDS AS ENMAXWORDS,GT.ENSINGLELEN AS ENSINGLELEN,GT.ENMULTILEN1 AS ENMULTILEN1,GT.ENMULTILEN2 AS ENMULTILEN2
  FROM GT_PORT_USED GT
  INNER JOIN USERDATA USR ON USR.USERID=GT.USERID AND CHAR_LENGTH(USR.USERID) <= 6                 
  ##INNER JOIN KF_CORPBASE CORP ON UPPER(USR.CORPACCOUNT)=UPPER(CORP.CORPACCOUNT)
  INNER JOIN XT_GATE_QUEUE GATE ON GATE.SPGATE=GT.SPGATE AND GATE.SPISUNCM=GT.SPISUNCM
  INNER JOIN (SELECT GWACC.PTACCUID AS DESTUID,GATE2.SPGATE AS SPGATE,GATE2.SPISUNCM AS SPISUNCM FROM A_GWACCOUNT GWACC 
         INNER JOIN A_GWSPBIND BIND ON BIND.PTACCUID=GWACC.PTACCUID
         INNER JOIN XT_GATE_QUEUE GATE2 ON GATE2.ID=BIND.GATEID WHERE GATE2.GATETYPE=PISPTYPE) TB2 
         ON GT.SPGATE=TB2.SPGATE AND GT.SPISUNCM=TB2.SPISUNCM
  WHERE USR.USERTYPE=0 AND USR.STATUS=0 AND USR.ACCOUNTTYPE=PISPTYPE AND GATE.STATUS=0  AND GATE.GATETYPE=PISPTYPE AND GT.STATUS=0 AND GT.GATETYPE=PISPTYPE ORDER BY UID;
END;;
DELIMITER ;
-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_LOADUSRBIND
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADUSRBIND`(
  PIUSERID VARCHAR(11),
  PISPTYPE INT ##=1
)
BEGIN
SELECT /*CORP.ECID*/0 AS ECID,USR.UID/*TB1.UID*/ AS UID,USR.UID AS UIDEX,USR.RISELEVEL AS RISELEVEL,TB2.DESTUID AS DESTUID,
  USR.USERID AS USERID,USR.USERID/*USR.LOGINID*/ AS LOGINID,GT.PORTTYPE AS PORTTYPE,0 AS ISEXCHANNEL,GT.SPGATE AS SPGATE,GT.ID AS CHANNELNO,
  GT.CPNO AS CPNO,GT.SPISUNCM AS SPISUNCM,GT.FEEFLAG AS FEEFLAG,GT.ROUTEFLAG AS ROUTEFLAG,GT.SIGNSTR AS SIGNSTR,GT.SIGNLEN AS SIGNLEN,
  GT.MAXWORDS AS MAXWORDS,/*GT.SINGLELEN*/70 AS SINGLELEN,GT.MULTILEN1 AS MULTILEN1,GT.MULTILEN2 AS MULTILEN2,GT.SENDTIMEBEGIN AS TIMESTART,
  GT.SENDTIMEEND AS TIMEEND,GT.GATESEQ AS GATESEQ,GT.MOBIAREA AS GATEAREA,GATE.AREATYPE AS AREATYPE,GATE.GATEPRIVILEGE AS GATEPRIVILEGE,GATE.ENPREFIXLEN AS ENPREFIXLEN,
  GT.ENSIGNSTR AS ENSIGNSTR,GT.ENSIGNLEN AS ENSIGNLEN,GT.ENMAXWORDS AS ENMAXWORDS,GT.ENSINGLELEN AS ENSINGLELEN,GT.ENMULTILEN1 AS ENMULTILEN1,GT.ENMULTILEN2 AS ENMULTILEN2
  FROM GT_PORT_USED GT
  INNER JOIN USERDATA USR ON USR.USERID=GT.USERID AND CHAR_LENGTH(USR.USERID) <= 6
  ##NNER JOIN KF_CORPBASE CORP ON UPPER(USR.CORPACCOUNT)=UPPER(CORP.CORPACCOUNT)
  INNER JOIN XT_GATE_QUEUE GATE ON GATE.SPGATE=GT.SPGATE AND GATE.SPISUNCM=GT.SPISUNCM
  INNER JOIN (SELECT GWACC.PTACCUID AS DESTUID,GATE2.SPGATE AS SPGATE,GATE2.SPISUNCM AS SPISUNCM FROM A_GWACCOUNT GWACC 
         INNER JOIN A_GWSPBIND BIND ON BIND.PTACCUID=GWACC.PTACCUID
         INNER JOIN XT_GATE_QUEUE GATE2 ON GATE2.ID=BIND.GATEID WHERE GATE2.GATETYPE=PISPTYPE) TB2 
         ON GT.SPGATE=TB2.SPGATE AND GT.SPISUNCM=TB2.SPISUNCM
  WHERE UPPER(GT.USERID)=UPPER(PIUSERID) AND USR.USERTYPE=0  AND USR.STATUS=0 AND GATE.STATUS=0 AND GT.STATUS=0  
        AND USR.ACCOUNTTYPE=PISPTYPE
        AND GATE.GATETYPE=PISPTYPE
        AND GT.GATETYPE=PISPTYPE
        ORDER BY UID;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETSPRULE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETSPRULE`(
	PIPTACCID VARCHAR(11),
    PISPTYPE  INT ##=1
)
BEGIN

	DECLARE PIPTACCUID INT;
	SELECT UID INTO PIPTACCUID FROM USERDATA 
	WHERE USERID=UPPER(PIPTACCID) AND USERTYPE=1 AND STATUS=0 AND ACCOUNTTYPE=PISPTYPE;
	
	SELECT ID,SPGATE,STATUS,SPISUNCM,GATETYPE,PORTTYPE,GATENAME,SINGLELEN,SIGNTYPE,SIGNFIXLEN,PREFIXLEN,ENDSPLIT,SIGNDROPTYPE,
           SIGNSTR,RISELEVEL,SPEED,LONGSMS,MAXWORDS,SUBLEN,FEEFLAG,SIGNLEN,SPLITRULE,MULTILEN1,MULTILEN2,MAXLONGMSGSEQ,GATESEQ,SPLITRULE,EACHSIGN,GATEPRIVILEGE,
 ENSIGNSTR, ENSIGNLEN,ENPREFIXLEN, ENMAXWORDS,ENSINGLELEN, ENMULTILEN1,ENMULTILEN2,ESPLITMAXWD,ESPLITENMAXWD 
FROM XT_GATE_QUEUE WHERE ID IN(SELECT GATEID FROM A_GWSPBIND WHERE PTACCUID=PIPTACCUID) AND STATUS=0 AND GATETYPE=PISPTYPE ORDER BY GATESEQ ASC;
END;;
DELIMITER ;

##加载网优路由绑定表
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE A_LOADGWROUTE(PISPTYPE INT)
BEGIN
    SELECT 0 AS ECID,
    TB2.DESTUID AS DESTUID,TB2.RISELEVEL AS RISELEVEL,TB2.PORTTYPE AS PORTTYPE,0 AS ISEXCHANNEL,TB2.SPGATE AS SPGATE,
    TB2.FEEFLAG AS FEEFLAG,TB2.SIGNSTR AS SIGNSTR,TB2.SIGNLEN AS SIGNLEN,TB2.MAXWORDS AS MAXWORDS,70 AS SINGLELEN,
    TB2.MULTILEN1 AS MULTILEN1,TB2.MULTILEN2 AS MULTILEN2,TB2.AREATYPE AS AREATYPE,
    RT.ID AS CHANNELNO, RT.TYPE AS ROUTEFLAG,RT.UNICOM AS SPISUNCM,RT.AREA AS GATEAREA,RT.GATESEQ AS GATESEQ,
    RT.SENDTIMEBEGIN AS TIMESTART,RT.SENDTIMEEND AS TIMEEND,GATE.GATEPRIVILEGE AS GATEPRIVILEGE,
    GATE.ENSIGNSTR AS ENSIGNSTR,GATE.ENSIGNLEN AS ENSIGNLEN,GATE.ENPREFIXLEN AS ENPREFIXLEN,GATE.ENMAXWORDS AS ENMAXWORDS,GATE.ENSINGLELEN AS ENSINGLELEN,GATE.ENMULTILEN1 AS ENMULTILEN1,GATE.ENMULTILEN2 AS ENMULTILEN2
    FROM A_GWROUTE RT
    INNER JOIN XT_GATE_QUEUE GATE
               ON GATE.ID=RT.GATEID AND GATE.SPISUNCM=RT.UNICOM
    INNER JOIN (SELECT GWACC.PTACCUID AS DESTUID,GATE2.ID AS GATEID,GATE2.SPISUNCM AS SPISUNCM,GATE2.RISELEVEL,GATE2.PORTTYPE,
                GATE2.SPGATE,GATE2.FEEFLAG,GATE2.SIGNSTR,GATE2.SIGNLEN,GATE2.MAXWORDS,GATE2.MULTILEN1,GATE2.MULTILEN2,GATE2.AREATYPE
                FROM A_GWACCOUNT GWACC
                INNER JOIN A_GWSPBIND BIND
                           ON GWACC.PTACCUID=BIND.PTACCUID
                INNER JOIN XT_GATE_QUEUE GATE2
                           ON GATE2.ID=BIND.GATEID
                WHERE GATE2.GATETYPE=PISPTYPE)TB2
               ON TB2.GATEID=RT.GATEID AND TB2.SPISUNCM=RT.UNICOM
    WHERE GATE.STATUS=0 AND RT.STATUS=0 AND GATE.GATETYPE=PISPTYPE;          
END ;;                                  
DELIMITER ;                                            

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_RPTWAITA
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_RPTWAITA`(P_USERUID INT,
	P_LOGINUID INT,
	P_MAXREADCNT INT)
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    SET P_SQLSTR = 'SELECT ID,ECID,PTMSGID,USERID,SPNUMBER,SUBMITTIME,DONETIME,PHONE,ERRORCODE,USERMSGID,MODULEID,RECVTIME FROM RPT_WAIT_A ';
    SET P_SQLSTR = CONCAT(P_SQLSTR,'WHERE USERUID=',P_USERUID,' AND LOGINUID=',P_LOGINUID,' LIMIT ',P_MAXREADCNT);

    SET @SQL = P_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_RPTWAITB
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_RPTWAITB`(P_UID INT,
	P_MAXREADCNT INT)
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    SET P_SQLSTR = 'SELECT ID,UID,ORGUID,ECID,USERID,SUBMITTIME,DONETIME,PHONE,SPNUMBER,PTMSGID,ERRORCODE,USERMSGID,MODULEID,RECVTIME,SPMSGID FROM RPT_WAIT_B ';
    SET P_SQLSTR = CONCAT(P_SQLSTR,'WHERE UID=',P_UID,' LIMIT ',P_MAXREADCNT);

    SET @SQL = P_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_RPTWAITB---->GW_RDRPTWAITBV1
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_RDRPTWAITBV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_RDRPTWAITBV1`(P_UID INT,
	P_MAXREADCNT INT)
BEGIN
    SELECT ID,UID,ORGUID,ECID,USERID,SUBMITTIME,DONETIME,PHONE,SPNUMBER,PTMSGID,ERRORCODE,USERMSGID, MODULEID,RECVTIME,SPMSGID,PKTOTAL,CUSTID,EXDATA,RESENDCNT FROM RPT_WAIT_B WHERE UID=P_UID   LIMIT P_MAXREADCNT;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_RPTWAITA
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_RPTWAITA`(P_ECID INT,
	P_USERUID INT,
	P_LOGINUID INT,
	P_PTMSGID BIGINT,
	P_USERID VARCHAR(11),
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
        P_USERMSGID BIGINT,
        P_MODULEID INT,
        P_RECVTIME DATETIME)
BEGIN
    IF P_USERID='' THEN
		SELECT USERID,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) INTO P_USERID,P_SPNUMBER FROM MT_TASK WHERE PTMSGID=P_PTMSGID;
	END IF;

	IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_A WHERE PTMSGID = P_PTMSGID) THEN
		INSERT RPT_WAIT_A(ECID,USERUID,LOGINUID,PTMSGID,USERID,SPNUMBER,PHONE,SUBMITTIME,DONETIME,ERRORCODE,USERMSGID,MODULEID,RECVTIME)
		VALUES(P_ECID,P_USERUID,P_LOGINUID,P_PTMSGID,P_USERID,P_SPNUMBER,P_PHONE,P_SUBMITTIME,P_DONETIME,P_ERRORCODE,P_USERMSGID,P_MODULEID,P_RECVTIME);
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_RPTWAITB
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_RPTWAITB`(P_UID INT,
	P_PTMSGID BIGINT,
	P_ECID INT,
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_USERID VARCHAR(11),
	P_ORGUID INT,
        P_USERMSGID BIGINT,
        P_MODULEID INT,
        P_RECVTIME DATETIME)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_B WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_B(UID, PTMSGID, SPNUMBER, PHONE, SUBMITTIME, DONETIME, ERRORCODE, USERID, ECID, ORGUID,USERMSGID,MODULEID,RECVTIME)
	   VALUES(P_UID, P_PTMSGID, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME, P_ERRORCODE, P_USERID, P_ECID, P_ORGUID,P_USERMSGID,P_MODULEID,P_RECVTIME);
    END IF;
END;;
DELIMITER ;

##写携号转网表
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE A_WR_MNP(
IN PIPHONE	  VARCHAR(21),
IN PIUNICOM	  INT ,
IN PIPHONETYPE	INT ,
IN PIADDTYPE	  INT ,
IN PIOPTTYPE	  INT 	 
)
BEGIN
IF NOT EXISTS (SELECT ID FROM A_MNP WHERE PHONE=PIPHONE AND OPTTYPE=0) THEN                                             
    INSERT INTO A_MNP(PHONE,UNICOM,PHONETYPE,ADDTYPE,OPTTYPE )VALUES(PIPHONE,PIUNICOM,PIPHONETYPE,PIADDTYPE,PIOPTTYPE); 
END IF;                                                                                                                 
END;;
DELIMITER ;

##携号转网表增量加载
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE A_LOADMNP
 (IN PIID INT , 
  IN PIMAXCNTID INT 
 ) 
BEGIN
  DECLARE PI_SQLSTR VARCHAR(512);
	SET PI_SQLSTR = CONCAT('SELECT ID,PHONE,UNICOM,PHONETYPE,ADDTYPE,OPTTYPE FROM A_MNP 
	WHERE ID>',PIID,' AND PHONE<>'''' ORDER BY ID ASC LIMIT 0,',PIMAXCNTID);
	SET @SQL = PI_SQLSTR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
END;;
DELIMITER ;
  
##错误码表一次性全部加载
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE A_LOADMNPERRCODE()
BEGIN
    SELECT TYPE,MNPTYPE,ERRORCODE,STATUS FROM A_MNPERRCODE;
END;;
DELIMITER ;

##特殊号码表增量加载
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE A_LOADSPEPHNO(
IN PIID INT,
IN PIMAXCNTID INT
)
BEGIN
  DECLARE PI_SQLSTR VARCHAR(512);
	SET PI_SQLSTR = CONCAT('SELECT ID,PHONE,CUSTID,USERID,SPECTYPE,OPTTYPE,UNICOM FROM A_SPE_PHONE
	WHERE ID>',PIID,' AND PHONE<>'''' ORDER BY ID ASC LIMIT 0,',PIMAXCNTID);
	SET @SQL = PI_SQLSTR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
END;;
DELIMITER ;

##加载国际区号表
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE A_LOADAREACODE()
BEGIN
    SELECT ID,AREACODE,AREANAME FROM A_AREACODE;
END;;
DELIMITER ;           

DELIMITER ;;
DROP PROCEDURE IF EXISTS `A_LOADPBLIST`;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADPBLIST`( 
PIMAXID BIGINT ,
PIMAXCOLNUM INT,
PITYPE TINYINT UNSIGNED
)
BEGIN
         DECLARE PI_SQLSTR VARCHAR(2000);
	 SET PI_SQLSTR = CONCAT('SELECT  PB.ID,PB.USERID,PB.SPGATE,PB.SPNUMBER,PB.PHONE,PB.OPTYPE,PB.SVRTYPE,PB.SPISUNCM,PB.CORPCODE ,PB.BLTYPE FROM PB_LIST_BLACK PB
         WHERE PB.BLTYPE=',PITYPE,' AND  PB.ID>', PIMAXID, ' ORDER BY PB.ID ASC LIMIT 0, '  ,PIMAXCOLNUM);
        SET @SQL = PI_SQLSTR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
END;;
DELIMITER ;


DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADCMD_ROUTE`()
##通道指令
BEGIN 
SELECT R.ID,R.NAME,UPPER(R.STRUCTCODE) AS STRUCTCODE,R.TRUCTTYPE,R.BUSSYSNAME,R.STATUS,R.MATCHMODE,R.CREATER,R.CREATTIME,U.UID,U.USERID  FROM  A_CMD_ROUTE R
INNER JOIN USERDATA U ON U.UID=R.SP_ID WHERE U.ACCOUNTTYPE=1;
END;;
DELIMITER ;


DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADCMD_ROUTE_P`()
##通道指令
BEGIN 
SELECT R.ID,R.NAME,UPPER(R.STRUCTCODE)AS STRUCTCODE,R.TRUCTTYPE,R.BUSSYSNAME,U.USERID,R.STATUS,R.MATCHMODE,R.CREATER,
R.CREATTIME,U.UID,R.CMDTYPE,R.CMDPARAM,R.CMDATTRI,R.PUSHURL,R.PUSHPROTOCOL,P.GATEID,P.CMDID,P.STATUS,P.CPNO,P.FAILOPT,
P.DEFCMDID,P.SPNUMBER ,P.ENSIGNSTR, P.ENSIGNLEN,P.ENPREFIXLEN, P.ENMAXWORDS,P.ENSINGLELEN, P.ENMULTILEN1,P.ENMULTILEN2 FROM  A_CMD_ROUTE R
INNER JOIN USERDATA U ON U.UID=R.SP_ID 
INNER JOIN (SELECT CP.GATEID AS GATEID,CP.CMDID AS CMDID,CP.STATUS AS STATUS,CP.CPNO AS CPNO ,CP.FAILOPT AS FAILOPT,CP.DEFCMDID AS DEFCMDID, CONCAT(XT.SPGATE ,CP.CPNO) AS SPNUMBER, XT.ENSIGNSTR AS ENSIGNSTR,XT.ENSIGNLEN AS ENSIGNLEN,XT.ENPREFIXLEN AS ENPREFIXLEN,XT.ENMAXWORDS AS ENMAXWORDS,XT.ENSINGLELEN AS ENSINGLELEN,XT.ENMULTILEN1 AS ENMULTILEN1,XT.ENMULTILEN2 AS ENMULTILEN2 FROM A_CMD_PORT CP 
            INNER JOIN XT_GATE_QUEUE XT ON XT.ID=CP.GATEID) P ON (R.ID=P.CMDID)
WHERE U.ACCOUNTTYPE=1 AND U.USERTYPE=0 AND P.STATUS=0 AND R.CMDTYPE=1; 
END;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADCMD_ROUTE_G`()
##全局指令
BEGIN 
SELECT R.ID,R.NAME,UPPER(R.STRUCTCODE)AS STRUCTCODE,R.TRUCTTYPE,R.BUSSYSNAME,U.USERID,R.STATUS,R.MATCHMODE,R.CREATER,
R.CREATTIME,U.UID,R.CMDTYPE,R.CMDPARAM,R.CMDATTRI,R.PUSHURL,R.PUSHPROTOCOL  FROM  A_CMD_ROUTE R
INNER JOIN USERDATA U ON U.UID=R.SP_ID 
WHERE U.ACCOUNTTYPE=1 AND U.USERTYPE=0 AND R.CMDTYPE=0; 
END;;
DELIMITER ;

 
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETSGIPBIND`( PIUID INT,PITYPE INT)
BEGIN
	 IF PIUID=0 THEN
		##加载所有绑定了URL的帐号
		SELECT UID,USERID,USERPASSWORD AS PWD,SPBINDURL FROM USERDATA 
		WHERE USERTYPE=0 AND STATUS=0 AND IFNULL(SPBINDURL,'')<>'' 
		AND TRANSMOTYPE=1 AND TRANSRPTYPE=1 AND ACCOUNTTYPE= PITYPE ORDER BY UID;
	ELSE 
		##加载指定帐号的URL绑定
		SELECT UID,USERID,USERPASSWORD AS PWD,SPBINDURL 
		FROM USERDATA WHERE USERTYPE=0 AND STATUS=0 AND IFNULL(SPBINDURL,'')<>''
		AND TRANSMOTYPE=1 AND TRANSRPTYPE=1 AND UID=PIUID   AND ACCOUNTTYPE= PITYPE  ORDER BY UID;
        END IF;
END;;
DELIMITER ;



DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADMOBILEAREA`( 
PIID BIGINT ,
PIMAXCOL INT
)
BEGIN
         DECLARE PI_SQLSTR VARCHAR(2000);
	 SET PI_SQLSTR = CONCAT('SELECT M.ID,M.MOBILE,M.AREACODE,P.PROVINCE,P.PROVINCECODE FROM A_MOBILEAREA M 
    INNER JOIN A_PROVINCECITY P ON P.AREACODE=M.AREACODE  WHERE M.ID>', PIID, ' ORDER BY M.ID ASC LIMIT 0, '  ,PIMAXCOL);
         SET @SQL = PI_SQLSTR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETALLUSRINFO
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETALLUSRINFO`(
   PISPTYPE INT ##=1
)
BEGIN
	SELECT CASE WHEN IFNULL(B.UID,'')='' THEN A.UID ELSE B.UID END AS SVRID,A.UID,A.USERID,A.USERTYPE,A.USERPRIVILEGE,A.STATUS,A.USERPASSWORD,A.LOGINIP,
	A.STAFFNAME AS CORPNAME,A.SENDTYPE AS FAILURERATE,A.SENDTMSPAN,A.FORBIDTMSPAN,
	A.SPEEDLIMIT,A.MAXDAYNUM,A.SUBMITCNT,A.ACCOUNTTYPE,A.FEEFLAG,A.RISELEVEL,A.TRANSMOTYPE,A.TRANSRPTYPE 
	FROM USERDATA A LEFT JOIN (SELECT UID,USERID FROM USERDATA WHERE USERPRIVILEGE & 2 = 2 AND ACCOUNTTYPE=PISPTYPE) B
	ON (A.LOGINID = B.USERID) OR B.USERID IS NULL 	
	WHERE A.STATUS=0 AND A.USERTYPE=0 AND A.ACCOUNTTYPE=PISPTYPE ; 
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETCHANNELMAP
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETCHANNELMAP`()
SELECT SPNUMBER,CPNO FROM A_CHANNELMAP;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETCMDQUE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETCMDQUE`(P_GWNO INT)
SELECT ID,GWNO,GWTYPE,CMDTYPE,DEALSTATUS,CMDPARAM,RESULTCODE 
FROM A_CMDQUE WHERE GWNO=P_GWNO AND DEALSTATUS=1;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETENDCHBINDB
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETENDCHBINDB`( 
	  PIUSERID VARCHAR(11),
    PISPTYPE INT ##= 1
)
BEGIN
	DECLARE IPTACCUID INT;
	SET IPTACCUID = 0;
	
	SELECT UID INTO IPTACCUID FROM USERDATA 
	WHERE  USERID=UPPER(PIUSERID) AND USERTYPE=1 AND STATUS=0 AND ACCOUNTTYPE=PISPTYPE;
	
	SELECT 0 AS ECID,PIUSERID AS USERID, 0 AS PORTTYPE,XTGATE.GATETYPE AS GATETYPE,XTGATE.SPGATE AS SPGATE,XTGATE.SPISUNCM AS SPISUNCM,
	XTGATE.FEEFLAG AS FEEFLAG,XTGATE.GATEAREA AS GATEAREA,XTGATE.AREATYPE AS AREATYPE,XTGATE.GATESEQ AS GATESEQ,
XTGATE.ENSIGNSTR AS ENSIGNSTR,XTGATE.ENSIGNLEN AS ENSIGNLEN,XTGATE.ENPREFIXLEN AS ENPREFIXLEN,XTGATE.ENMAXWORDS AS ENMAXWORDS,XTGATE.ENSINGLELEN AS ENSINGLELEN,XTGATE.ENMULTILEN1 AS ENMULTILEN1,XTGATE.ENMULTILEN2 AS ENMULTILEN2
	FROM XT_GATE_QUEUE XTGATE
	INNER JOIN A_GWSPBIND GWBIND ON XTGATE.ID=GWBIND.GATEID AND GWBIND.PTACCUID=IPTACCUID
	WHERE XTGATE.STATUS=0 AND XTGATE.GATETYPE=PISPTYPE;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETGWACC
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETGWACC`( 
	PIGWNO INT,
  PISPTYPE INT ##=1
)
BEGIN
	SELECT GWACC.GWNO AS GWNO,GWACC.PTACCUID AS PTACCUID,USR.USERID AS PTACCID,USR.USERPASSWORD AS PTACCPWD,
  GWACC.SPACCID AS SPACCID,GWACC.SPACCPWD AS SPACCPWD,GWACC.SPID AS SPID,GWACC.SERVICETYPE AS SERVICETYPE,
  GWACC.FEEUSERTYPE AS FEEUSERTYPE,GWACC.SPIP AS SPIP,GWACC.SPPORT AS SPPORT,GWACC.SPEEDLIMIT AS SPEEDLIMIT,
  GWACC.PROTOCOLCODE AS PROTOCOLCODE,GWACC.PROTOCOLPARAM AS PROTOCOLPARAM,GWACC.PTACCNAME AS PTACCNAME,
  GWACC.PTIP AS PTIP,GWACC.PTPORT AS PTPORT FROM A_GWACCOUNT GWACC
  INNER JOIN USERDATA USR ON PTACCUID=USR.UID WHERE GWACC.GWNO=PIGWNO AND USR.ACCOUNTTYPE=PISPTYPE;

END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR GW_A_GETGWACCV1
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_A_GETGWACCV1`( 
	PIGWNO INT,
  PISPTYPE INT ##=1
)
BEGIN
	SELECT GWACC.GWNO AS GWNO,GWACC.PTACCUID AS PTACCUID,USR.USERID AS PTACCID,USR.USERPASSWORD AS PTACCPWD,
  GWACC.SPACCID AS SPACCID,GWACC.SPACCPWD AS SPACCPWD,GWACC.SPID AS SPID,GWACC.SERVICETYPE AS SERVICETYPE,
  GWACC.FEEUSERTYPE AS FEEUSERTYPE,GWACC.SPIP AS SPIP,GWACC.SPPORT AS SPPORT,GWACC.SPEEDLIMIT AS SPEEDLIMIT,
  GWACC.PROTOCOLCODE AS PROTOCOLCODE,GWACC.PROTOCOLPARAM AS PROTOCOLPARAM,GWACC.PTACCNAME AS PTACCNAME,
  GWACC.PTIP AS PTIP,GWACC.PTPORT AS PTPORT,GWACC.PTNODE AS PTNODE  FROM A_GWACCOUNT GWACC
  INNER JOIN USERDATA USR ON PTACCUID=USR.UID 
  WHERE GWACC.GWNO=(SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWNO=PIGWNO) AND USR.ACCOUNTTYPE=PISPTYPE;

END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETGWCFG
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETGWCFG`(
	PIGWNO INT
)
BEGIN
	SELECT * FROM A_GWPARAMVALUE WHERE GWNO=PIGWNO;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETKFPARAMS
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETKFPARAMS`()
BEGIN
     SELECT PARACODE,PARAVAL1,PARAVAL2 FROM KF_PARAMS;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETMSGIDMAP
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETMSGIDMAP`(PIMSGID  VARCHAR(3000))
BEGIN
DECLARE P_SQL VARCHAR(3000);
SET  P_SQL=CONCAT('SELECT ID,PTMSGID,USERMSGID FROM A_SMSMSGIDMAP WHERE PTMSGID  ', '  IN(', PIMSGID, ')');
SET @SQL = P_SQL;
 PREPARE SL FROM @SQL;
EXECUTE SL;
DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETPBSVRTYPE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETPBSVRTYPE`()
BEGIN
     SELECT SPISUNCM,SERVICENO,SERVICEINFO FROM PB_SERVICETYPE;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETPRECHBINDA
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETPRECHBINDA`(
	PIUSERID VARCHAR(11),
    PISPTYPE INT  ##=1
)
BEGIN
	SELECT GT.PORTTYPE AS PORTTYPE,GT.SPGATE AS SPGATE,GT.CPNO AS CPNO,
  GT.FEEFLAG AS FEEFLAG,GT.SIGNSTR AS SIGNSTR,GT.SIGNLEN AS SIGNLEN,GT.ROUTEFLAG AS ROUTEFLAG,
  GT.MAXWORDS AS MAXWORDS,/*GT.SINGLELEN*/70 AS SINGLELEN,GT.MULTILEN1 AS MULTILEN1,
  GT.MULTILEN2 AS MULTILEN2,GT.SPISUNCM AS SPISUNCM,GT.MOBIAREA AS GATEAREA,GATE.AREATYPE AS AREATYPE,GATE.ENPREFIXLEN AS ENPREFIXLEN,
  GT.ENSIGNSTR AS ENSIGNSTR,GT.ENSIGNLEN AS ENSIGNLEN,GT.ENMAXWORDS AS ENMAXWORDS,GT.ENSINGLELEN AS ENSINGLELEN,GT.ENMULTILEN1 AS ENMULTILEN1,GT.ENMULTILEN2 AS ENMULTILEN2
  FROM GT_PORT_USED GT
  INNER JOIN USERDATA USR ON USR.USERID=GT.USERID
  INNER JOIN XT_GATE_QUEUE GATE ON GATE.SPGATE=GT.SPGATE
  WHERE GT.USERID=UPPER(PIUSERID) AND USR.USERTYPE=0 AND GATE.STATUS=0 AND GT.STATUS=0 
        AND GT.GATETYPE=PISPTYPE
        AND USR.ACCOUNTTYPE=PISPTYPE
        AND GATE.GATETYPE=PISPTYPE;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETURLBIND
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETURLBIND`(
   PIUID INT, 
    PISPTYPE INT 
    )
BEGIN
	IF PIUID=0 THEN ##加载所有绑定了URL的帐号
		SELECT UID,USERID,USERPASSWORD AS PWD,MTURL,
		CASE WHEN (IFNULL(MOURL,'')<>'' AND TRANSMOTYPE=2) THEN MOURL ELSE '' END AS MOURL,
		CASE WHEN (IFNULL(RPTURL,'')<>'' AND TRANSRPTYPE=2) THEN RPTURL ELSE '' END AS RPTURL
		FROM USERDATA WHERE USERTYPE=0 AND STATUS=0 
		AND ((IFNULL(MOURL,'')<>'' AND TRANSMOTYPE=2) OR (IFNULL(RPTURL,'')<>'' AND TRANSRPTYPE=2)) 
		AND ACCOUNTTYPE=PISPTYPE ORDER BY UID;
	ELSE ##加载指定UID的URL绑定情况
		SELECT UID,USERID,USERPASSWORD AS PWD,MTURL,
		CASE WHEN (IFNULL(MOURL,'')<>'' AND TRANSMOTYPE=2) THEN MOURL ELSE '' END AS MOURL,
		CASE WHEN (IFNULL(RPTURL,'')<>'' AND TRANSRPTYPE=2) THEN RPTURL ELSE '' END AS RPTURL
		FROM USERDATA WHERE UID=PIUID AND USERTYPE=0 AND STATUS=0 
		AND ((IFNULL(MOURL,'')<>'' AND TRANSMOTYPE=2) OR (IFNULL(RPTURL,'')<>'' AND TRANSRPTYPE=2))
		AND ACCOUNTTYPE=PISPTYPE ORDER BY UID;
		END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETUSRFEE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETUSRFEE`(P_USERID VARCHAR(11),PIUID	INT)
BEGIN
     SELECT UID,SENDNUM,USERID FROM USERFEE WHERE USERID=P_USERID OR UID=PIUID;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETUSRINFO
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETUSRINFO`( 
   PIUSERID VARCHAR(11),
   PISPTYPE INT ##=1
)
BEGIN
	SELECT CASE WHEN IFNULL(B.UID,'')='' THEN A.UID ELSE B.UID END AS SVRID,A.UID,A.USERID,A.USERTYPE,A.USERPRIVILEGE,
	A.STATUS,A.USERPASSWORD,A.LOGINIP,A.STAFFNAME AS CORPNAME,A.SENDTYPE AS FAILURERATE,A.SENDTMSPAN,A.FORBIDTMSPAN,
	A.SPEEDLIMIT,A.MAXDAYNUM,A.SUBMITCNT,A.ACCOUNTTYPE,A.FEEFLAG,A.RISELEVEL,A.TRANSMOTYPE,A.TRANSRPTYPE
	FROM USERDATA A LEFT JOIN (SELECT UID,USERID FROM USERDATA WHERE USERPRIVILEGE & 2 = 2 
	AND ACCOUNTTYPE=PISPTYPE AND USERID=UPPER(PIUSERID)) B
	ON (A.LOGINID = B.USERID) OR B.USERID IS NULL
	WHERE A.USERID=UPPER(PIUSERID) AND A.STATUS=0 AND A.ACCOUNTTYPE=PISPTYPE LIMIT 0,1;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_GETUSRUID
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_GETUSRUID`(P_USERID VARCHAR(11))
BEGIN
    SELECT UID FROM USERDATA WHERE USERID=P_USERID;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_LOADFEEINFOA
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADFEEINFOA`()
BEGIN
  SELECT UID,USERID,SENDNUM FROM USERFEE ORDER BY UID;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_LOADFORWARDBIND
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADFORWARDBIND`()
BEGIN
	SELECT * FROM A_SMSFWDCONF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_LOADKEYWORDS
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADKEYWORDS`(PIID INT)
BEGIN
   SELECT ID,OPTTYPE,KEYWORD,0 AS KEYTYPE,0 AS KEYLEVEL FROM KEYWORD_BLACK WHERE ID>PIID AND KEYWORD<>'';
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_LOADMTROUTE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADMTROUTE`( 
    PISPTYPE INT  ##=1
)
BEGIN
	SELECT USRSRC.UID AS SRCUID,USRDEST.UID AS DESTUID,IFNULL(GTDEST.FEEFLAG,1) AS FEEFLAG,
	ROUTE.EXNOHOLD AS EXNOHOLD,ROUTE.EXPIREDTM AS EXPIREDTM,/*USR3.ENDUID AS ENDUID,*/ ROUTE.SRCUSERID AS SRCUSERID,
	ROUTE.DESTUSERID AS DESTUSERID,ROUTE.ROUTETYPE AS ROUTETYPE,GTSRC.SPISUNCM AS GATETYPE,
	GTSRC.SPGATE AS SRCSPGATE,IFNULL(GTDEST.SPGATE,'') AS DESTSPGATE,
	IFNULL(CONCAT(LTRIM(RTRIM(GTSRC.SPGATE)),LTRIM(RTRIM(GTSRC.CPNO))),'') AS SRCSPNUMBER, 
	IFNULL(CONCAT(LTRIM(RTRIM(GTDEST.SPGATE)),LTRIM(RTRIM(GTDEST.CPNO))),'') AS DESTSPNUMBER, 
	IFNULL(LTRIM(RTRIM(ROUTE.PARAMS)),'') AS PARAMS,GTSRC.ID AS SRCCHANNELNO,GTDEST.ID AS DESTCHANNELNO,
        GTSRC.ENSIGNSTR AS ENSIGNSTR,GTSRC.ENSIGNLEN AS ENSIGNLEN,GTSRC.ENMAXWORDS AS ENMAXWORDS,GTSRC.ENSINGLELEN AS ENSINGLELEN,GTSRC.ENMULTILEN1 AS ENMULTILEN1,GTSRC.ENMULTILEN2 AS ENMULTILEN2,GATEQUESRC.ENPREFIXLEN AS ENPREFIXLEN
	FROM MT_ROUTETABLE ROUTE
	INNER JOIN USERDATA USRSRC ON USRSRC.USERID=ROUTE.SRCUSERID
	INNER JOIN USERDATA USRDEST ON USRDEST.USERID=ROUTE.DESTUSERID
	INNER JOIN GT_PORT_USED GTSRC ON ROUTE.SRCBINDID=GTSRC.ID AND GTSRC.STATUS=0
	INNER JOIN GT_PORT_USED GTDEST ON ROUTE.DESTBINDID=GTDEST.ID AND GTDEST.STATUS=0
	INNER JOIN XT_GATE_QUEUE GATEQUESRC ON GTSRC.SPGATE=GATEQUESRC.SPGATE AND GTSRC.SPISUNCM=GATEQUESRC.SPISUNCM 
	INNER JOIN XT_GATE_QUEUE GATEQUEDEST ON GTDEST.SPGATE=GATEQUEDEST.SPGATE AND GTDEST.SPISUNCM=GATEQUEDEST.SPISUNCM 
	WHERE GATEQUESRC.STATUS=0 AND GATEQUEDEST.STATUS=0 
        AND USRSRC.ACCOUNTTYPE=PISPTYPE 
        AND USRDEST.ACCOUNTTYPE=PISPTYPE 
        AND GTSRC.GATETYPE=PISPTYPE  
        AND GTDEST.GATETYPE=PISPTYPE 
        AND GATEQUESRC.GATETYPE=PISPTYPE 
        AND GATEQUEDEST.GATETYPE=PISPTYPE 
ORDER BY ROUTETYPE;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_LOADPUSHBIND
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_LOADPUSHBIND`(
   PISPTYPE INT ##=1
)
BEGIN
	SELECT PROBIND.USERUID AS USERUID, USERDATA.USERID AS USERID, PROCONF.PROTOCOLCODE AS PROTOCOLCODE,
	PROCONF.PROTOCOLNAME AS PROTOCOLNAME, PROCONF.PUSHURL AS PUSHURL, PROCONF.PUSHACCOUNT AS PUSHACCOUNT, 
	PROCONF.PUSHPASSWD AS PUSHPASSWD, PROCONF.PUSHKEY AS PUSHKEY , PROCONF.PUSHFLAG AS PUSHFLAG
	FROM  A_SMSPUSHBIND PROBIND
	INNER JOIN A_SMSPUSHCONF PROCONF  ON UPPER(PROBIND.PROTOCOLCODE)=UPPER(PROCONF.PROTOCOLCODE) 
	INNER JOIN USERDATA ON USERDATA.UID = PROBIND.USERUID AND USERDATA.ACCOUNTTYPE=PISPTYPE;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_RD_PROINFO
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_RD_PROINFO`()
BEGIN
  SELECT * FROM A_PROINFO LIMIT 0,1;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_SYNCUSRFEEA
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_SYNCUSRFEEA`(P_UID INT)
BEGIN
     IF (P_UID>0) THEN
		SELECT SENDNUM FROM USERFEE WHERE UID = P_UID;
	ELSE
		SELECT 0 AS SENDNUM;
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_SYNCUSRFEEB
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_SYNCUSRFEEB`(P_UID INT,
       P_LASTDBREMAINED INT,
       P_REMAINED INT,
       P_PREPAYUSED INT,
       P_POSTPAYUSED INT)
BEGIN
     IF (P_UID>0) THEN
		IF (P_PREPAYUSED<>0 OR P_POSTPAYUSED<>0) THEN
			UPDATE USERFEE SET SENDNUM=SENDNUM-P_PREPAYUSED,SENDEDNUM=SENDEDNUM+P_PREPAYUSED,POSTPAYUSED=POSTPAYUSED+P_POSTPAYUSED WHERE UID = P_UID;
        END IF;
                SELECT SENDNUM FROM USERFEE WHERE UID = P_UID;
     ELSE
		SELECT 0 AS SENDNUM;
     END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR GW_SYNCUSRFEEBV1
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_SYNCUSRFEEBV1`(P_UID INT,
       P_LASTDBREMAINED INT,
       P_REMAINED INT,
       P_PREPAYUSED BIGINT,
       P_POSTPAYUSED BIGINT)
BEGIN
     IF (P_UID>0) THEN
		IF (P_PREPAYUSED<>0 OR P_POSTPAYUSED<>0) THEN
			UPDATE USERFEE SET SENDNUM=SENDNUM-P_PREPAYUSED,SENDEDNUM=SENDEDNUM+P_PREPAYUSED,POSTPAYUSED=POSTPAYUSED+P_POSTPAYUSED WHERE UID = P_UID;
        END IF;
                SELECT SENDNUM FROM USERFEE WHERE UID = P_UID;
     ELSE
		SELECT 0 AS SENDNUM;
     END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_UPDCMDQUE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_UPDCMDQUE`(P_ID INT,
       P_DEALSTATUS INT,
       P_RESULTCODE VARCHAR(32))
BEGIN
     IF P_DEALSTATUS=2 THEN
        UPDATE A_CMDQUE SET DEALSTATUS=2 WHERE ID=P_ID AND DEALSTATUS=1;
     ELSEIF P_DEALSTATUS=1 THEN
          UPDATE A_CMDQUE SET DEALSTATUS=1 WHERE ID=P_ID AND DEALSTATUS=2;
     #处理完毕
     ELSEIF P_DEALSTATUS=0 THEN
          INSERT INTO A_CMDQUE_HIS (ID,GWNO,GWTYPE,CMDTYPE,CMDINFO,CMDPARAM,DEALSTATUS,RESULTCODE,REQTIME)
          SELECT ID,GWNO,GWTYPE,CMDTYPE,CMDINFO,CMDPARAM,0 AS DEALSTATUS,P_RESULTCODE AS RESULTCODE,REQTIME
          FROM A_CMDQUE WHERE ID=P_ID;
          DELETE FROM A_CMDQUE WHERE ID=P_ID;
	  #删除60天前的历史
	  DELETE FROM A_CMDQUE_HIS WHERE DONETIME< DATE_SUB(CURDATE(),INTERVAL 60 DAY);
     END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_UPDNUMSECTION
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_UPDNUMSECTION`(P_PINUMSECTION_IN VARCHAR(2048))
BEGIN
	DECLARE V_PINUM0  VARCHAR(2048); #移动
	DECLARE V_PINUM1  VARCHAR(2048); #联通
	DECLARE V_PINUM21 VARCHAR(2048); #电信
	DECLARE V_PITMP1  VARCHAR(2048); #临时
	DECLARE V_PITMP2  VARCHAR(2048); #临时
	DECLARE V_PINUMSECTION VARCHAR(2048);
	DECLARE V_PISPLITSTR VARCHAR(8); #分隔符
	DECLARE V_PILOCATION INT; #位置
	DECLARE V_PISTART    INT; #起始
	DECLARE V_PITMPPOS   INT; #临时位置
	DECLARE V_PICOUNT    INT; #计数
	DECLARE V_PILEN      INT; #长度
	DECLARE V_PITMPLEN   INT; #临时长度
	SET V_PISPLITSTR = ';';
	SET V_PILOCATION = 0;
	SET V_PISTART    = 0;
	SET V_PINUMSECTION = CONCAT(V_PISPLITSTR,P_PINUMSECTION_IN,V_PISPLITSTR);
	SET V_PILEN      = CHAR_LENGTH(V_PINUMSECTION);
	SET V_PILOCATION = LOCATE(V_PISPLITSTR,V_PINUMSECTION);

	WHILE V_PILOCATION <> 0	DO
		SET V_PISTART = V_PILOCATION;
		SET V_PILOCATION = LOCATE(V_PISPLITSTR,V_PINUMSECTION,V_PISTART+1);
		IF V_PILOCATION > 0 THEN
			SET V_PITMP1 = SUBSTRING(V_PINUMSECTION,V_PISTART+1,V_PILOCATION-V_PISTART-1);
			IF V_PITMP1 <> '' THEN
				SET V_PITMPLEN = CHAR_LENGTH(V_PITMP1);
				SET V_PITMPPOS = LOCATE(',',V_PITMP1);
				IF V_PITMPPOS > 0 THEN
					SET V_PITMP2 = SUBSTRING(V_PITMP1,1,V_PITMPPOS-1);
					IF V_PITMP2 = '0' THEN
						SET V_PINUM0 = SUBSTR(V_PITMP1,V_PITMPPOS+1,V_PITMPLEN-V_PITMPPOS);
					ELSEIF V_PITMP2 = '1' THEN
						SET V_PINUM1 = SUBSTRING(V_PITMP1,V_PITMPPOS+1,V_PITMPLEN-V_PITMPPOS);
					ELSEIF V_PITMP2 = '21' THEN
						SET V_PINUM21 = SUBSTRING(V_PITMP1,V_PITMPPOS+1,V_PITMPLEN-V_PITMPPOS);
                    END IF;
				END IF;
			END IF;
		END IF;
	END WHILE;
	SET V_PICOUNT = 0;

	#移动号段
	IF V_PINUM0 IS NOT NULL THEN
		SELECT COUNT(*) INTO V_PICOUNT  FROM PB_SERVICETYPE WHERE SPISUNCM=0;
		IF V_PICOUNT > 0 THEN
			UPDATE PB_SERVICETYPE SET SERVICENO = V_PINUM0 WHERE SPISUNCM=0;
		ELSE
			INSERT INTO PB_SERVICETYPE (SPISUNCM,SERVICENO,SERVICEINFO) VALUES (0,V_PINUM0,'移动号段');
        	END IF;
	END IF;

	#联通号段
	SET V_PICOUNT = 0;
	IF V_PINUM1 IS NOT NULL THEN
		SELECT  COUNT(*) INTO V_PICOUNT  FROM PB_SERVICETYPE WHERE SPISUNCM=1;
		IF V_PICOUNT > 0 THEN
			UPDATE PB_SERVICETYPE SET SERVICENO = V_PINUM1 WHERE SPISUNCM=1;
		ELSE
			INSERT INTO PB_SERVICETYPE (SPISUNCM,SERVICENO,SERVICEINFO) VALUES (1,V_PINUM1,'联通号段');
        	END IF;
	END IF;

	#电信C网号段
	SET V_PICOUNT = 0;
	IF V_PINUM21 IS NOT NULL  THEN
		SELECT  COUNT(*) INTO V_PICOUNT  FROM PB_SERVICETYPE WHERE SPISUNCM=21;
		IF V_PICOUNT > 0 THEN
			UPDATE PB_SERVICETYPE SET SERVICENO = V_PINUM21 WHERE SPISUNCM=21;
		ELSE
			INSERT INTO PB_SERVICETYPE (SPISUNCM,SERVICENO,SERVICEINFO) VALUES (21,V_PINUM21,'电信C网号段');
        	END IF;
	END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_WR_MSGIDMAP
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_WR_MSGIDMAP`(P_PTMSGID BIGINT,P_USERMSGID VARCHAR(64))
BEGIN 
	IF NOT EXISTS(SELECT PTMSGID FROM A_SMSMSGIDMAP WHERE PTMSGID=P_PTMSGID) THEN
	INSERT INTO A_SMSMSGIDMAP(PTMSGID, USERMSGID) VALUES(P_PTMSGID,P_USERMSGID);
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR A_WR_PROINFO
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `A_WR_PROINFO`(P_SERIALNUM VARCHAR(32),
P_PROTYPE INT,
P_PROSTATUS INT,
P_VALIDDAYS INT,
P_CORPNAME VARCHAR(128)  CHARSET 'GBK',
P_STATUSINFO VARCHAR(1024)  CHARSET 'GBK',
P_SENDSPEED INT)
TOP:
BEGIN
	IF P_SERIALNUM='' THEN
		LEAVE TOP;
    END IF;


	DELETE FROM A_PROINFO WHERE SERIALNUM<>P_SERIALNUM;
	IF NOT EXISTS(SELECT SERIALNUM FROM A_PROINFO WHERE SERIALNUM=P_SERIALNUM) THEN
		INSERT INTO A_PROINFO(SERIALNUM,PROTYPE,PROSTATUS,VALIDDAYS,STATUSINFO,CORPNAME,SENDSPEED) VALUES(P_SERIALNUM,P_PROTYPE,P_PROSTATUS,P_VALIDDAYS,P_STATUSINFO,P_CORPNAME,P_SENDSPEED);
	ELSE
		UPDATE A_PROINFO SET PROTYPE=P_PROTYPE,PROSTATUS=P_PROSTATUS,VALIDDAYS=P_VALIDDAYS,STATUSINFO=P_STATUSINFO,CORPNAME=P_CORPNAME,SENDSPEED=P_SENDSPEED;
    END IF;
END TOP;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR H_MMSSTATISTICS
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_MMSSTATISTICS`(P_PROCESSFLAG  INT)
BEGIN
	DECLARE P_STR NVARCHAR(4000);
	DECLARE P_USERID VARCHAR(11);
	DECLARE P_TASKID INT;
	DECLARE P_IYMD INT;
	DECLARE P_SPGATE VARCHAR(21);
	DECLARE P_SPISUNCM INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_SPID VARCHAR(21);
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_IHOUR INT;
	DECLARE P_IYEAR INT ;
	DECLARE P_IMONTH INT;
	DECLARE P_ICOUNT INT;
	DECLARE P_SUCC INT;
	DECLARE P_FAIL INT;
	DECLARE P_NRET INT;
  DECLARE MAXCNT INT ;
  DECLARE P_SENDTYPE INT;
  DECLARE P_MOBILEAREA INT;
  DECLARE I INT;


	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MMSTIC( TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT, USERID VARCHAR(11),TASKID INT,SPGATE VARCHAR(21),SPISUNCM INT,
	SPID VARCHAR(32),SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),
  IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,SUCC INT,FAIL INT,NRET INT,SENDTYPE INT,MOBILEAREA INT,PRIMARY KEY (TMP_ID)  );
  ALTER TABLE P_TMP_MMSTIC AUTO_INCREMENT=1;

	SET P_STR = 'SELECT USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE,P1,P2,P3,P4,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED) AS IYMD,
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED) AS IYEAR,
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED) AS MON,
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED) AS HOUR,
           COUNT(ID),
           SUM(CASE RTRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE 0 END),
           SUM(CASE SUBSTRING(RTRIM(ERRORCODE),1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE 0 END),
           SUM(CASE RTRIM(ERRORCODE) WHEN '''' THEN 1 ELSE 0 END) ,
           SENDTYPE,
           MOBILEAREA
           FROM MMS_TASK WHERE  SENDTIME  >= ''' ;
           SET P_STR=CONCAT(P_STR, DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
           SET P_STR=CONCAT(P_STR,'''  AND SENDTIME < ''');
           SET P_STR=CONCAT(P_STR, CURDATE());
           SET P_STR=CONCAT(P_STR, ''' GROUP BY USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE,P1,P2,P3,P4,SENDTYPE,MOBILEAREA,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED)');

  SET @SQL =CONCAT('INSERT INTO P_TMP_MMSTIC(USERID ,TASKID,SPGATE,SPISUNCM,SPID ,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA)', P_STR);#
       PREPARE SL FROM @SQL;
       EXECUTE SL;
       DEALLOCATE PREPARE SL;
  
  DELETE FROM MMS_DATAREPORT WHERE IYMD BETWEEN   CAST(DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY),'%Y%m%d') AS SIGNED ) AND  CAST(DATE_FORMAT(CURDATE(),'%Y%m%d') AS SIGNED );

	INSERT INTO MMS_DATAREPORT (USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET,SENDTYPE,MOBILEAREA)
	SELECT T.USERID,T.TASKID,T.SPGATE,T.SPISUNCM,T.SPID,T.SVRTYPE,T.P1,T.P2,T.P3,T.P4,T.IYMD,T.IHOUR,T.IMONTH,T.IYEAR,T.ICOUNT,T.SUCC,T.FAIL,(T.ICOUNT-T.SUCC-T.FAIL-T.NRET),T.NRET,T.SENDTYPE,T.MOBILEAREA FROM P_TMP_MMSTIC T;
                       
  TRUNCATE TABLE P_TMP_MMSTIC;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR H_STATISTICS
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_STATISTICS`(P_PROCESSFLAG INT)
BEGIN
	DECLARE P_STR NVARCHAR(4000);  
	DECLARE P_USERID VARCHAR(11);
	DECLARE P_TASKID INT;
	DECLARE P_IYMD INT;
	DECLARE P_SPGATE VARCHAR(21);
	DECLARE P_SPISUNCM INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_SPID VARCHAR(21);
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_IHOUR INT;
	DECLARE P_IYEAR INT ;
	DECLARE P_IMONTH INT;
	DECLARE P_ICOUNT INT;
	DECLARE P_SUCC INT;
	DECLARE P_FAIL INT;
	DECLARE P_NRET INT;
  DECLARE MAXCNT INT ;
  DECLARE I INT;
  DECLARE P_SENDTYPE INT;
  DECLARE P_MOBILEAREA INT;


	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_STIC( TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT, USERID VARCHAR(11),TASKID INT,SPGATE VARCHAR(21),SPISUNCM INT,
	SPID VARCHAR(32),SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),
  IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,SUCC INT,FAIL INT,NRET INT,SENDTYPE INT,MOBILEAREA INT,BATCHID BIGINT,AREACODE INT, PRIMARY KEY (TMP_ID)  );
  ALTER TABLE P_TMP_STIC AUTO_INCREMENT=1;

	SET P_STR = 'SELECT USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE,P1,P2,P3,P4,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED) AS IYMD,
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED) AS IYEAR,
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED) AS MON,
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED) AS HOUR,
           COUNT(ID),
           SUM(CASE RTRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE 0 END),
           SUM(CASE SUBSTRING(RTRIM(ERRORCODE),1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE 0 END),
           SUM(CASE RTRIM(ERRORCODE) WHEN '''' THEN 1 ELSE 0 END),
           SENDTYPE,
           MOBILEAREA,
           BATCHID,AREACODE
           FROM MT_TASK WHERE  SENDTIME >=  ''' ;
           SET P_STR=CONCAT(P_STR, DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
           SET P_STR=CONCAT(P_STR,'''  AND SENDTIME < ''');
           SET P_STR=CONCAT(P_STR, CURDATE());
           SET P_STR=CONCAT(P_STR, ''' GROUP BY USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE,P1,P2,P3,P4,SENDTYPE,MOBILEAREA,BATCHID,AREACODE,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED)');
  #SELECT P_STR;

  SET @SQL =CONCAT('INSERT INTO P_TMP_STIC(USERID ,TASKID,SPGATE,SPISUNCM,SPID ,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)', P_STR);#
       PREPARE SL FROM @SQL;
       EXECUTE SL;
       DEALLOCATE PREPARE SL;

  DELETE FROM MT_DATAREPORT WHERE IYMD BETWEEN   CAST(DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY),'%Y%m%d') AS SIGNED ) AND  CAST(DATE_FORMAT(CURDATE(),'%Y%m%d') AS SIGNED );

	INSERT INTO MT_DATAREPORT (USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)
	SELECT T.USERID,T.TASKID,T.SPGATE,T.SPISUNCM,T.SPID,T.SVRTYPE,T.P1,T.P2,T.P3,T.P4,T.IYMD,T.IHOUR,T.IMONTH,T.IYEAR,T.ICOUNT,T.SUCC,T.FAIL,(T.ICOUNT-T.SUCC-T.FAIL-T.NRET),T.NRET,T.SENDTYPE,T.MOBILEAREA,T.BATCHID,T.AREACODE FROM P_TMP_STIC T;

  TRUNCATE TABLE P_TMP_STIC;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR H_DELETETASK
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_DELETETASK`(P_MININDEX BIGINT,P_MAXINDEX BIGINT,P_PROCESSFLAG INT,P_LOTSIZE INT)
BEGIN
	 DELETE  FROM MT_TASK  WHERE (ID <= P_MAXINDEX)  ;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR H_MMSDELTETASK
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_MMSDELTETASK`(
	  PIMININDEX BIGINT,
    PIMAXINDEX BIGINT,
    PIPROCESSFLAG INT,
    PILOTSIZE INT
   )
BEGIN
	 DELETE  FROM MMS_TASK  WHERE (ID <= PIMAXINDEX) ; 		
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR H_PROCESSSTATUS
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_PROCESSSTATUS`(P_CUSEID INT,P_CUR BIGINT,P_MAXI BIGINT,P_COUNTS INT,P_DISTRACTS INT,P_DELETES INT)
BEGIN
	IF NOT EXISTS (SELECT USEID FROM PROCESSINGSTATUS WHERE USEID=P_CUSEID)  THEN
		INSERT INTO PROCESSINGSTATUS(USEID,CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS ,DELETESTATUS)
                VALUES(P_CUSEID,P_CUR,P_MAXI,P_COUNTS,P_DISTRACTS,P_DELETES)	;
    ELSE
		UPDATE PROCESSINGSTATUS SET CURRINDEX=P_CUR, MAXINDEX=P_MAXI,COUNTSTATUS=P_COUNTS,DISTRACTSTATUS=P_DISTRACTS ,DELETESTATUS=P_DELETES
                WHERE USEID=P_CUSEID    ;
   END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR H_RESTATISTICS
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_RESTATISTICS`(PIYEAR INT, PIMONTH INT,PIDAY INT)
BEGIN
	DECLARE P_STR NVARCHAR(4000) ;
	DECLARE P_USERID VARCHAR(11) ;
	DECLARE P_TASKID INT ;
	DECLARE P_IYMD INT ;
	DECLARE P_SPGATE VARCHAR(21) ;
	DECLARE P_SPISUNCM INT ;
	DECLARE P_SVRTYPE VARCHAR(64) ;
	DECLARE P_SPID VARCHAR(21) ;
	DECLARE P_P1 VARCHAR(64) ;
	DECLARE P_P2 VARCHAR(64) ;
	DECLARE P_P3 VARCHAR(64) ;
	DECLARE P_P4 VARCHAR(64) ;
	DECLARE P_IHOUR INT ;
	DECLARE P_IYEAR INT  ;
	DECLARE P_IMONTH INT ;
	DECLARE P_ICOUNT INT ;
	DECLARE P_SUCC INT ;
	DECLARE P_FAIL INT ;
	DECLARE P_NRET INT ;
        DECLARE P_TABLENAME VARCHAR(64) ;
        DECLARE P_SENDTYPE INT;
        DECLARE P_MOBILEAREA INT;
        DECLARE P_BATCHID BIGINT;
        DECLARE P_AREACODE INT;
        DECLARE MAXCNT INT  ;
        DECLARE I INT ;

      IF PIMONTH>9 THEN
		SET P_TABLENAME=CONCAT('MTTASK',PIYEAR, PIMONTH) ;
	ELSE
		SET P_TABLENAME=CONCAT('MTTASK',PIYEAR,'0', PIMONTH) ;
    END IF ;

	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_RESTIC( TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT, USERID VARCHAR(11),TASKID INT,SPGATE VARCHAR(21),SPISUNCM INT,
	SPID VARCHAR(32),SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),
    IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,SUCC INT,FAIL INT,NRET INT,SENDTYPE INT,MOBILEAREA INT,BATCHID BIGINT,AREACODE INT,PRIMARY KEY (TMP_ID)  ) ;
    ALTER TABLE P_TMP_RESTIC AUTO_INCREMENT=1 ;

	SET P_STR = 'SELECT USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE,P1,P2,P3,P4,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED) AS IYMD,
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED) AS IYEAR,
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED) AS MON,
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED) AS HOUR,
           COUNT(ID),
           SUM(CASE RTRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE 0 END),
           SUM(CASE SUBSTRING(RTRIM(ERRORCODE),1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE 0 END),
           SUM(CASE RTRIM(ERRORCODE) WHEN '''' THEN 1 ELSE 0 END),
           SENDTYPE,
           MOBILEAREA,
           BATCHID,
           AREACODE 
           FROM ' ;
           SET P_STR=CONCAT(P_STR,P_TABLENAME ) ;
           SET P_STR=CONCAT(P_STR, '  WHERE DATE_FORMAT(SENDTIME,''%d'')+0=',PIDAY,' OR 0=' ,PIDAY) ;
           SET P_STR=CONCAT(P_STR, ' GROUP BY USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE,P1,P2,P3,P4,SENDTYPE,MOBILEAREA,BATCHID,AREACODE,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED)') ;

       SET @SQL =CONCAT('INSERT INTO P_TMP_RESTIC(USERID ,TASKID,SPGATE,SPISUNCM,SPID ,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)', P_STR) ;#
          PREPARE SL FROM @SQL ;
           EXECUTE SL ;
           DEALLOCATE PREPARE SL ;


SELECT IFNULL(MIN(TMP_ID),0),IFNULL(MAX(TMP_ID),0) INTO I,MAXCNT FROM P_TMP_RESTIC ;
IF MAXCNT>0 THEN
WHILE I <= MAXCNT DO

        SELECT  USERID,TASKID,IYMD,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IHOUR,ICOUNT,IYEAR,IMONTH,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE 
        INTO P_USERID,P_TASKID,P_IYMD,P_SPGATE,P_SPISUNCM,P_SPID,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_IHOUR,P_ICOUNT,P_IYEAR,P_IMONTH,P_SUCC,P_FAIL,P_NRET,P_SENDTYPE,P_MOBILEAREA,P_BATCHID,P_AREACODE  FROM P_TMP_RESTIC WHERE TMP_ID = I ;

			IF EXISTS (SELECT TASKID FROM MT_DATAREPORT WHERE USERID=P_USERID AND TASKID=P_TASKID AND IYMD=P_IYMD
						AND SPGATE=P_SPGATE AND SPISUNCM=P_SPISUNCM AND SPID=P_SPID AND SVRTYPE=P_SVRTYPE AND P1=P_P1
						AND P2=P_P2 AND P3=P_P3 AND P4=P_P4 AND IHOUR=P_IHOUR AND Y=P_IYEAR AND IMONTH=P_IMONTH AND SENDTYPE=P_SENDTYPE AND MOBILEAREA=P_MOBILEAREA AND BATCHID=P_BATCHID AND AREACODE=P_AREACODE) THEN
			UPDATE MT_DATAREPORT SET ICOUNT=P_ICOUNT,RSUCC=P_SUCC,RFAIL1=P_FAIL,RFAIL2=(P_ICOUNT-P_SUCC-P_FAIL-P_NRET),RNRET=P_NRET WHERE USERID=P_USERID AND TASKID=P_TASKID AND IYMD=P_IYMD
						AND SPGATE=P_SPGATE AND SPISUNCM=P_SPISUNCM AND SPID=P_SPID AND SVRTYPE=P_SVRTYPE AND P1=P_P1
						AND P2=P_P2 AND P3=P_P3 AND P4=P_P4 AND IHOUR=P_IHOUR AND Y=P_IYEAR AND IMONTH=P_IMONTH  AND SENDTYPE=P_SENDTYPE AND MOBILEAREA=P_MOBILEAREA AND BATCHID=P_BATCHID AND AREACODE=P_AREACODE;
			ELSE
			INSERT INTO MT_DATAREPORT (USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)
			VALUES(P_USERID,P_TASKID,P_SPGATE,P_SPISUNCM,P_SPID,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_IYMD,P_IHOUR,P_IMONTH,P_IYEAR,P_ICOUNT,P_SUCC,P_FAIL,(P_ICOUNT-P_SUCC-P_FAIL-P_NRET),P_NRET,P_SENDTYPE,P_MOBILEAREA,P_BATCHID,P_AREACODE) ;
                       END IF ;
 SET I = I + 1 ;
    END WHILE ;
END IF;
TRUNCATE TABLE P_TMP_RESTIC ;
END;;
DELIMITER ;










DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_TRANSFER`(P_MININDEX BIGINT,P_MAXINDEX BIGINT,P_PROCESSFLAG INT,P_LOTSIZE INT)
BEGIN

	DECLARE P_STR VARCHAR(4000);
	DECLARE P_TABLENAME VARCHAR(20);
        DECLARE   CURYM INT;
        DECLARE   MINYM INT;
        DECLARE   MAXYM INT;

        #转移
        SELECT CAST(DATE_FORMAT(MIN(SENDTIME) ,'%Y%m') AS SIGNED) ,CAST(DATE_FORMAT(MAX(SENDTIME) ,'%Y%m') AS SIGNED)  INTO MINYM,MAXYM FROM MT_TASK WHERE ID BETWEEN P_MININDEX AND P_MAXINDEX;
        SET CURYM = MINYM;
        WHILE CURYM<=MAXYM DO

	SET P_TABLENAME = CONCAT('MTTASK',CURYM );
        SET P_STR = CONCAT('INSERT  INTO ',P_TABLENAME,
			 ' (ID,MDAY,USERID,SPGATE,CPNO,PHONE,SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,SENDTIME,RECVTIME,MESSAGE,TASKID,ECID,PTMSGID,MOBILEAREA,SPID,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
                          SELECT ID, DATE_FORMAT(M.SENDTIME,''%d'') AS MDAY,USERID,SPGATE,CPNO,PHONE,SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,SENDTIME,RECVTIME,MESSAGE,TASKID,ECID,PTMSGID,MOBILEAREA,SPID,SVRTYPE,
                          P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
                          FROM MT_TASK M WHERE CAST(DATE_FORMAT(SENDTIME,''%Y%m'') AS SIGNED)=',CURYM,' AND ID<=',P_MAXINDEX);
#SELECT P_STR;
	SET @SQL=P_STR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;

          IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
          ELSE
               SET CURYM = CURYM+1  ;
          END IF;
        END WHILE;
END;;
DELIMITER ;



-- ----------------------------
-- PROCEDURE STRUCTURE FOR H_MMSTRANSFER
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_MMSTRANSFER`(P_MININDEX BIGINT,P_MAXINDEX BIGINT,P_PROCESSFLAG INT,P_LOTSIZE INT)
BEGIN

	DECLARE P_STR VARCHAR(4000);
	DECLARE P_TABLENAME VARCHAR(20);
        DECLARE   CURYM INT;
        DECLARE   MINYM INT;
        DECLARE   MAXYM INT;

 #转移
        SELECT CAST(DATE_FORMAT(MIN(SENDTIME) ,'%Y%m') AS SIGNED) ,CAST(DATE_FORMAT(MAX(SENDTIME) ,'%Y%m') AS SIGNED)  INTO MINYM,MAXYM FROM MMS_TASK WHERE ID BETWEEN P_MININDEX AND P_MAXINDEX;
        SET CURYM = MINYM;
        WHILE CURYM<=MAXYM DO

	SET P_TABLENAME = CONCAT('MMSTASK',CURYM );
        SET P_STR = CONCAT('INSERT  INTO ',P_TABLENAME,
			 ' (ID,MDAY,USERID,SPGATE,CPNO,PHONE,SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,SENDTIME,RECVTIME,MESSAGE,TASKID,ECID,PTMSGID,MOBILEAREA,SPID,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME)
                         SELECT ID, DATE_FORMAT(M.SENDTIME,''%d'') AS MDAY,USERID,SPGATE,CPNO,PHONE,SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,SENDTIME,RECVTIME,MESSAGE,TASKID,ECID,PTMSGID,MOBILEAREA,SPID,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME
                         FROM MMS_TASK M  WHERE CAST(DATE_FORMAT(SENDTIME,''%Y%m'') AS SIGNED)=',CURYM,' AND ID<=',P_MAXINDEX);
	SET @SQL=P_STR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;

          IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
          ELSE
               SET CURYM = CURYM+1  ;
          END IF;
        END WHILE;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `H_TRANSFERMO`;
CREATE DEFINER=`root`@`%` PROCEDURE `H_TRANSFERMO`()
BEGIN
    DECLARE	  P_COUNT INT;
    DECLARE   P_CURRINDEX  BIGINT; #当前处理位置
    DECLARE   P_MAXINDEX   BIGINT; #此次执行的最大位置
    DECLARE   P_PROCESSFLAG   INT; #处理方式0:处理今天（含今天)以前的，1为前一天以前的 ,2为前二天以前的...以此类推
    DECLARE   P_STR    VARCHAR(4000);  #动态语句
    DECLARE   P_STR_1    VARCHAR(1024);  #动态语句
    DECLARE   P_TABLENAME    VARCHAR(20);   #表名
    DECLARE   P_ISEXIST    INT;          #存在标志
    DECLARE   P_MONINDEX   INT ;         #月索引
    DECLARE   P_USERID VARCHAR(11);
    DECLARE   P_SPGATE VARCHAR(21);
    DECLARE   P_SPISUNCM INT;
    DECLARE   P_IYMD INT;
    DECLARE   P_IYEAR INT;
    DECLARE   P_IMONTH INT;
    DECLARE   P_IHOUR INT;
    DECLARE   P_ICOUNT INT;
    DECLARE   MAXCNT INT ;
    DECLARE   I INT;
 
    DECLARE   CURYM INT;
    DECLARE   MINYM INT;
    DECLARE   MAXYM INT;

   ##异常代码
    DECLARE P_ERR  INT DEFAULT 0;
    DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;

   #创建临时表
    CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_TRSMO(TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,USERID VARCHAR(11),SPGATE VARCHAR(21),SPISUNCM INT,IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,PRIMARY KEY (TMP_ID)  );
    ALTER TABLE P_TMP_TRSMO AUTO_INCREMENT=1;
    SET P_COUNT=0;
    SET P_CURRINDEX= 0;
    SET P_MAXINDEX= 0;
    SET P_PROCESSFLAG= 0;
    SET P_MONINDEX= 1;
    SET P_PROCESSFLAG  = 3;

IF EXISTS(SELECT * FROM MO_TASK WHERE DELIVERTIME <(DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG  DAY)))  THEN
    SELECT  CAST(DATE_FORMAT(MIN(DELIVERTIME) ,'%Y%m') AS SIGNED) ,CAST(DATE_FORMAT(MAX(DELIVERTIME) ,'%Y%m') AS SIGNED)  INTO MINYM,MAXYM FROM MO_TASK  WHERE  DELIVERTIME < (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG  DAY));
    ##创建不存在的历史表
    SET CURYM = MINYM;
    WHILE CURYM<=MAXYM DO
         SET P_TABLENAME =CONCAT( 'MOTASK',CURYM)	;
         SELECT COUNT(1)  INTO P_ISEXIST FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA`=DATABASE() AND `TABLE_NAME`=P_TABLENAME ;
         IF P_ISEXIST=0 THEN
             CALL CREATETABLE(3,CURYM);
             IF P_ERR=1 THEN 
                         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信上行历史表创建：CREATETABLE','创建历史表出现异常');
             END IF;
         END IF;

          IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
          ELSE
               SET CURYM = CURYM+1  ;
          END IF;
    END WHILE;
	#统计
	SET P_STR =CONCAT('SELECT USERID,SPNUMBER,UNICOM,
                DATE_FORMAT(DELIVERTIME,''%Y%m%d'') AS IYMD,
                DATE_FORMAT(DELIVERTIME,''%Y'') AS IYEAR,
                DATE_FORMAT(DELIVERTIME,''%m'') AS MON,
                DATE_FORMAT(DELIVERTIME,''%H'') AS HOUR,
                COUNT(ID)  FROM MO_TASK  WHERE DELIVERTIME<CURDATE()',
                ' GROUP BY  USERID,SPNUMBER,UNICOM,
                DATE_FORMAT(DELIVERTIME,''%Y%m%d''),
                DATE_FORMAT(DELIVERTIME,''%Y''),
                DATE_FORMAT(DELIVERTIME,''%m''),
                DATE_FORMAT(DELIVERTIME,''%H'')'   );
       SET @SQL=CONCAT(' INSERT INTO  P_TMP_TRSMO(USERID ,SPGATE,SPISUNCM ,IYMD ,IYEAR,IMONTH,IHOUR,ICOUNT)',P_STR)	 ;
               PREPARE SL FROM @SQL ;
               EXECUTE SL ;
               DEALLOCATE PREPARE SL;

      SELECT MIN(TMP_ID),MAX(TMP_ID) INTO I ,MAXCNT FROM P_TMP_TRSMO;
       
       WHILE I <= MAXCNT DO
          SELECT  USERID,SPGATE,SPISUNCM,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT INTO P_USERID,P_SPGATE,P_SPISUNCM,P_IYMD,P_IYEAR,P_IMONTH,P_IHOUR,P_ICOUNT FROM P_TMP_TRSMO WHERE TMP_ID= I ;
	   IF EXISTS (SELECT USERID FROM MO_DATAREPORT WHERE USERID=P_USERID AND SPGATE=P_SPGATE AND SPISUNCM=P_SPISUNCM AND IYMD=P_IYMD AND IYEAR=P_IYEAR AND IMONTH=P_IMONTH AND IHOUR=P_IHOUR) THEN
		UPDATE MO_DATAREPORT SET ICOUNT=P_ICOUNT WHERE USERID=P_USERID AND SPGATE=P_SPGATE AND SPISUNCM=P_SPISUNCM AND IYMD=P_IYMD AND IYEAR=P_IYEAR AND IMONTH=P_IMONTH AND IHOUR=P_IHOUR;
	   ELSE
		INSERT INTO MO_DATAREPORT(USERID,SPGATE,SPISUNCM,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT) VALUES (P_USERID,P_SPGATE,P_SPISUNCM,P_IYMD,P_IYEAR,P_IMONTH,P_IHOUR,P_ICOUNT);
           END IF;
           SET I = I + 1;
      END WHILE;

      IF P_ERR=1 THEN 
            INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信上行汇总','上行汇总出现异常');
      END IF;
      
       #转移
       SET P_ERR=0;
        SET CURYM = MINYM;
        
        WHILE CURYM<=MAXYM DO
	SET P_TABLENAME = CONCAT('MOTASK',CURYM );
        SET P_STR = CONCAT('INSERT  INTO ',P_TABLENAME,
			  ' SELECT ID,UID,USERID,SPNUMBER,SERVICEID,SENDSTATUS,DELIVERTIME,PHONE,MSGCONTENT,ECID,ORGUID,PTMSGID,TP_PID,TP_UDHI,MSGFMT,UNICOM  FROM MO_TASK M
                           WHERE CAST(DATE_FORMAT(DELIVERTIME ,''%Y%m'') AS SIGNED)=',CURYM, ' AND DELIVERTIME <(DATE_SUB(CURDATE(),INTERVAL ',P_PROCESSFLAG,'  DAY))' );
        SET P_STR_1 =CONCAT(' DELETE   FROM MO_TASK WHERE CAST(DATE_FORMAT(DELIVERTIME ,''%Y%m'') AS SIGNED)=',CURYM, ' AND DELIVERTIME <(DATE_SUB(CURDATE(),INTERVAL ',P_PROCESSFLAG,'  DAY))' );

        START TRANSACTION;

	SET @SQL=P_STR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;

        SET @SQL=P_STR_1;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;

        IF P_ERR=1 THEN 
            ROLLBACK;
            INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信上行数据转移','上行数据转移出现异常');
        ELSE
           COMMIT;
        END IF;

          IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
          ELSE
               SET CURYM = CURYM+1  ;
          END IF;
        END WHILE;

END    IF;
END;;
DELIMITER ;



DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_DATATRANSFER`()
TOP:
BEGIN
	DECLARE  P_COUNTINFO INT;
	DECLARE  P_PROCESSINGSTATUSCOUNT  INT; #PROCESSINGSTATUS表记录数(根据USEID设置值判断,为1正常)
	DECLARE  P_USEID                 INT; #使用哪一个USEID作为当前状态处理
	DECLARE  P_CURRINDEX             BIGINT; #当前处理位置
	DECLARE  P_MAXINDEX              BIGINT; #此次执行的最大位置
	DECLARE  P_COUNTSTATUS           INT; #统计状态0:正常,1:错误
	DECLARE  P_DISTRACTSTATUS        INT; #数据转移状态0:正常,1:错误
	DECLARE  P_DELETESTATUS          INT; #删除状态0:正常,1:错误
	DECLARE  P_PROCESSFLAG           INT; #转移方式0:处理今天（含今天)以前的，1为前一天以前的 ,2为前二天以前的...以此类推,

        DECLARE   MINYM INT;                  
        DECLARE   MAXYM INT;                  
        DECLARE   CURYM INT;                  
        DECLARE   TABLENAME       VARCHAR(20);
        DECLARE   STR       VARCHAR(4000) ;  
        DECLARE   P_ISEXIST  INT;

	#异常退出
	DECLARE  P_COUNTEXCEPTION        INT;#允许统计异常最大值
	DECLARE  P_DISTRACTEXCEPTION     INT; #允许数据转移异常最大值
	DECLARE  P_DELETEEXCEPTION       INT; #允许删除数据异常最大值
	DECLARE  P_ALLEXCEPTION          INT; #允许所有异常最大值

       ##批量转移临时变量
       DECLARE PI_CURINDEX           BIGINT;
       DECLARE PI_MAXINDEX           BIGINT;
       DECLARE PI_MININDEX           BIGINT;
       DECLARE EACHMAX               INT; ##每次处理最大数

       ##异常代码
        DECLARE P_ERR  INT DEFAULT 0;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
	#初始化
	SET P_PROCESSINGSTATUSCOUNT = 0;
	SET P_USEID                 = 1;
	SET P_CURRINDEX             = 0;
	SET P_MAXINDEX              = 0;
	SET P_COUNTSTATUS           = 1;
	SET P_DISTRACTSTATUS        = 1;
	SET P_DELETESTATUS          = 1;
	SET P_PROCESSFLAG           = 3;
	SET EACHMAX               = 500000;
	SET P_COUNTEXCEPTION        = 5;
	SET P_DISTRACTEXCEPTION     = 5;
	SET P_DELETEEXCEPTION       = 5;
	SET P_ALLEXCEPTION          = 10;

        INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','H_DATATRANSFER','短信汇总调度存储过程执行开始');
	#1.先汇总
	SELECT COUNT(ID) INTO P_COUNTINFO FROM MT_TASK  WHERE  SENDTIME  >= (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY)) AND SENDTIME <CURDATE() ;

	IF P_COUNTINFO>0 THEN
		CALL H_STATISTICS(P_PROCESSFLAG);
                IF P_ERR=1 THEN 
                   INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行汇总H_STATISTICS','汇总出现异常');
                END IF;
	END IF;
	#2.再转移
	#先根据指定USEID判断是否有值
	SELECT COUNT(USEID) INTO P_PROCESSINGSTATUSCOUNT FROM PROCESSINGSTATUS WHERE USEID = P_USEID;
	#如果没有先初始化PROCESSINGSTATUS,否则取当表中值
	IF P_PROCESSINGSTATUSCOUNT = 0 THEN
         BEGIN
		CALL H_PROCESSSTATUS(P_USEID,0,0,0,0,0)	;
               SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END;
	ELSE
		SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END IF;
      

	SELECT MAX(ID) INTO P_MAXINDEX FROM MT_TASK  WHERE   SENDTIME < (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
             ##判断是否存在未转移的数据
        IF P_CURRINDEX<P_MAXINDEX THEN
             ##创建不存在的历史表
             SELECT CAST(DATE_FORMAT(MIN(SENDTIME),'%Y%m') AS SIGNED), CAST(DATE_FORMAT(MAX(SENDTIME),'%Y%m') AS SIGNED)  INTO MINYM, MAXYM  FROM MT_TASK  WHERE  ID<=P_MAXINDEX;
             SET CURYM = MINYM;
             WHILE CURYM<=MAXYM DO
                  SET TABLENAME =CONCAT( 'MTTASK',CURYM)	;
                  SELECT COUNT(1)  INTO P_ISEXIST FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA`=DATABASE() AND `TABLE_NAME`=TABLENAME ;
                  IF P_ISEXIST=0 THEN
                      CALL CREATETABLE(1,CURYM);
                      IF P_ERR=1 THEN 
                         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行历史表创建：CREATETABLE','创建历史表出现异常');
                      END IF;
                  END IF;

                  IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                      SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
                  ELSE
                      SET CURYM = CURYM+1  ;
                  END IF;
            END WHILE;
             ##转移数据
             SET P_ERR=0;
	   IF (P_MAXINDEX-P_CURRINDEX>=EACHMAX) THEN
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=PI_MININDEX+EACHMAX;
           ELSE
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=P_MAXINDEX;
           END IF;
          WHILE (PI_MININDEX <P_MAXINDEX) DO
               START TRANSACTION;
                SAVEPOINT A;
                CALL H_TRANSFER(PI_MININDEX,PI_CURINDEX,0,0);              
                CALL H_DELETETASK(PI_MININDEX,PI_CURINDEX,0,0);
                CALL H_PROCESSSTATUS(P_USEID,PI_CURINDEX,PI_CURINDEX,0,0,0);
		IF P_ERR = 1 THEN
                BEGIN
                    ROLLBACK TO  SAVEPOINT A;
                    INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行数据转移','下行数据转移出现异常');
                    SET P_DISTRACTEXCEPTION = P_DISTRACTEXCEPTION - 1;
                    SET P_ALLEXCEPTION      = P_ALLEXCEPTION - 1;                                      
                    IF P_DISTRACTEXCEPTION <= 0 OR P_ALLEXCEPTION <= 0 THEN
                       LEAVE TOP;
                   END IF;
               END;
               ELSE
                 IF (P_MAXINDEX-PI_CURINDEX>=EACHMAX) THEN
                    SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 ELSE
                    SET PI_CURINDEX=P_MAXINDEX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 END IF;
                 COMMIT;
              END IF;
        END WHILE;
        END IF;

        #5.执行上行统计
CALL  H_TRANSFERMO();

      DELETE FROM BATCH_MT_REQ_HIS WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 60 DAY);
      IF P_ERR = 1 THEN 
         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除BATCH_MT_REQ_HIS表记录','删除数据出现异常');
      END IF;
      
      IF DAYOFMONTH(NOW())=1 THEN

          DELETE FROM MO_WAIT_A WHERE DELIVERTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
          IF P_ERR = 1 THEN 
              INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除MO_WAIT_A表记录','删除数据出现异常');
          END IF;

          DELETE FROM RPT_WAIT_A WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
          IF P_ERR = 1 THEN 
              INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除RPT_WAIT_A表记录','删除数据出现异常');
          END IF;
     
          DELETE FROM RPT_WAIT_B WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
          IF P_ERR = 1 THEN 
              INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除RPT_WAIT_B表记录','删除数据出现异常');
          END IF;

      END IF;
      
      INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','H_DATATRANSFER','短信汇总调度存储过程执行结束');
END TOP;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_MMSTRANSFERMO`()
BEGIN
    DECLARE	 P_COUNT INT;
    DECLARE   P_CURRINDEX  BIGINT; #当前处理位置
    DECLARE   P_MAXINDEX   BIGINT; #此次执行的最大位置
    DECLARE   P_PROCESSFLAG   INT; #处理方式0:处理今天（含今天)以前的，1为前一天以前的 ,2为前二天以前的...以此类推
    DECLARE   P_STR    VARCHAR(4000);  #动态语句
    DECLARE   P_STR_1    VARCHAR(1024);  #动态语句
    DECLARE   P_TABLENAME    VARCHAR(20);   #表名
    DECLARE   P_ISEXIST    INT;          #存在标志
    DECLARE   P_MONINDEX   INT ;         #月索引
    DECLARE   P_USERID VARCHAR(11);
    DECLARE   P_SPGATE VARCHAR(21);
    DECLARE   P_SPISUNCM INT;
    DECLARE   P_IYMD INT;
    DECLARE   P_IYEAR INT;
    DECLARE   P_IMONTH INT;
    DECLARE   P_IHOUR INT;
    DECLARE   P_ICOUNT INT;
    DECLARE MAXCNT INT ;
    DECLARE I INT;
    DECLARE   CURYM INT;
    DECLARE   MINYM INT;
    DECLARE   MAXYM INT;

   ##异常代码
    DECLARE P_ERR  INT DEFAULT 0;
    DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;

   #创建临时表
    CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MMSTRSMO(TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,USERID VARCHAR(11),SPGATE VARCHAR(21),SPISUNCM INT,IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,PRIMARY KEY (TMP_ID)  );
    ALTER TABLE P_TMP_MMSTRSMO AUTO_INCREMENT=1;
    SET P_COUNT=0;
    SET P_CURRINDEX= 0;
    SET P_MAXINDEX= 0;
    SET P_PROCESSFLAG= 0;
    SET P_MONINDEX= 1;

IF EXISTS(SELECT * FROM  MMS_MO  WHERE DELIVERTIME<CURDATE())  THEN
	SELECT  CAST(DATE_FORMAT(MIN(DELIVERTIME) ,'%Y%m') AS SIGNED) ,CAST(DATE_FORMAT(MAX(DELIVERTIME) ,'%Y%m') AS SIGNED)  INTO MINYM,MAXYM FROM MMS_MO  WHERE  DELIVERTIME <CURDATE();
    
##创建不存在的历史表
    SET CURYM = MINYM;
    WHILE CURYM<=MAXYM DO
         SET P_TABLENAME =CONCAT( 'MMSMOTASK',CURYM);
         SELECT COUNT(1)  INTO P_ISEXIST FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA`=DATABASE() AND `TABLE_NAME`=P_TABLENAME ;
         IF P_ISEXIST=0 THEN
             CALL CREATETABLE(4,CURYM);
             IF P_ERR=1 THEN 
                         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信上行历史表创建：CREATETABLE','创建历史表出现异常');
             END IF;
         END IF;

          IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
          ELSE
               SET CURYM = CURYM+1  ;
          END IF;
    END WHILE;
	#统计
	SET P_STR =CONCAT('SELECT USERID,SPNUMBER,UNICOM,
                DATE_FORMAT(DELIVERTIME,''%Y%m%d'') AS IYMD,
                DATE_FORMAT(DELIVERTIME,''%Y'') AS IYEAR,
                DATE_FORMAT(DELIVERTIME,''%m'') AS MON,
                DATE_FORMAT(DELIVERTIME,''%H'') AS HOUR,
                COUNT(ID)  FROM MMS_MO  WHERE  DELIVERTIME <CURDATE()
              GROUP BY  USERID,SPNUMBER,UNICOM,
              DATE_FORMAT(DELIVERTIME,''%Y%m%d''),
              DATE_FORMAT(DELIVERTIME,''%Y''),
              DATE_FORMAT(DELIVERTIME,''%m''),
              DATE_FORMAT(DELIVERTIME,''%H'')'   );
       SET @SQL=CONCAT(' INSERT INTO  P_TMP_MMSTRSMO(USERID ,SPGATE,SPISUNCM ,IYMD ,IYEAR,IMONTH,IHOUR,ICOUNT)',P_STR)	 ;
               PREPARE SL FROM @SQL ;
               EXECUTE SL ;
               DEALLOCATE PREPARE SL;
      SELECT MIN(TMP_ID),MAX(TMP_ID) INTO I,MAXCNT  FROM P_TMP_MMSTRSMO;

       WHILE I <= MAXCNT DO
          SELECT  USERID,SPGATE,SPISUNCM,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT INTO P_USERID,P_SPGATE,P_SPISUNCM,P_IYMD,P_IYEAR,P_IMONTH,P_IHOUR,P_ICOUNT FROM P_TMP_MMSTRSMO WHERE TMP_ID= I ;
	   IF EXISTS (SELECT USERID FROM MMS_MODATAREPORT WHERE USERID=P_USERID AND SPGATE=P_SPGATE AND SPISUNCM=P_SPISUNCM AND IYMD=P_IYMD AND IYEAR=P_IYEAR AND IMONTH=P_IMONTH AND IHOUR=P_IHOUR) THEN
		UPDATE MMS_MODATAREPORT SET ICOUNT=P_ICOUNT WHERE USERID=P_USERID AND SPGATE=P_SPGATE AND SPISUNCM=P_SPISUNCM AND IYMD=P_IYMD AND IYEAR=P_IYEAR AND IMONTH=P_IMONTH AND IHOUR=P_IHOUR;
	   ELSE
		INSERT INTO MMS_MODATAREPORT(USERID,SPGATE,SPISUNCM,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT) VALUES (P_USERID,P_SPGATE,P_SPISUNCM,P_IYMD,P_IYEAR,P_IMONTH,P_IHOUR,P_ICOUNT);
           END IF;
           SET I = I + 1;
      END WHILE;
      
      IF P_ERR=1 THEN 
            INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信上行汇总','上行汇总出现异常');
      END IF;

       #转移
       SET P_ERR=0;
        SET CURYM = MINYM;
        WHILE CURYM<=MAXYM DO

	SET P_TABLENAME = CONCAT('MMSMOTASK',CURYM );
        SET P_STR = CONCAT('INSERT  INTO ',P_TABLENAME,
			  ' SELECT M.ID,UID,USERID,SPNUMBER,SERVICEID,SENDSTATUS,DELIVERTIME,PHONE,MSGCONTENT,ECID,ORGUID,PTMSGID,TP_PID,TP_UDHI,MSGFMT,UNICOM,PASSTHROUGH,MSGTYPE,MSGTITLE 			   
                           FROM MMS_MO  M  
                           WHERE CAST(DATE_FORMAT(DELIVERTIME ,''%Y%m'') AS SIGNED)=',CURYM, ' AND DELIVERTIME <CURDATE()');
        SET P_STR_1 =CONCAT(' DELETE   FROM MMS_MO WHERE CAST(DATE_FORMAT(DELIVERTIME ,''%Y%m'') AS SIGNED)=',CURYM, ' AND DELIVERTIME <CURDATE()');

        START TRANSACTION;

	SET @SQL=P_STR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;

        SET @SQL=P_STR_1;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;

        IF P_ERR=1 THEN 
            ROLLBACK;
            INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','	彩信上行数据转移','上行数据转移出现异常');
        ELSE
           COMMIT;
        END IF;

          IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
          ELSE
               SET CURYM = CURYM+1  ;
          END IF;
        END WHILE;

END    IF;
END;;
DELIMITER ;


DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `H_MMSDATATRANSF`(P_PROCESSFLAG INT )
TOP:
BEGIN
	DECLARE  P_COUNTINFO INT;
	DECLARE  P_PROCESSINGSTATUSCOUNT  INT; #PROCESSINGSTATUS表记录数(根据USEID设置值判断,为1正常)
	DECLARE  P_USEID                 INT; #使用哪一个USEID作为当前状态处理
	DECLARE  P_CURRINDEX             BIGINT; #当前处理位置
	DECLARE  P_MAXINDEX              BIGINT; #此次执行的最大位置
	DECLARE  P_COUNTSTATUS           INT; #统计状态0:正常,1:错误
	DECLARE  P_DISTRACTSTATUS        INT; #数据转移状态0:正常,1:错误
	DECLARE  P_DELETESTATUS          INT; #删除状态0:正常,1:错误
        ##DECLARE  P_PROCESSFLAG           INT; #转移方式0:处理今天（含今天)以前的，1为前一天以前的 ,2为前二天以前的...以此类推,

        DECLARE   MINYM INT;                  
        DECLARE   MAXYM INT;                  
        DECLARE   CURYM INT;                  
        DECLARE   TABLENAME       VARCHAR(20);
        DECLARE   STR       VARCHAR(4000) ;  
        DECLARE   P_ISEXIST  INT;

	#异常退出
	DECLARE  P_COUNTEXCEPTION        INT;#允许统计异常最大值
	DECLARE  P_DISTRACTEXCEPTION     INT; #允许数据转移异常最大值
	DECLARE  P_DELETEEXCEPTION       INT; #允许删除数据异常最大值
	DECLARE  P_ALLEXCEPTION          INT; #允许所有异常最大值
	  ##批量转移临时变量
       DECLARE PI_CURINDEX           BIGINT;
       DECLARE PI_MAXINDEX           BIGINT;
       DECLARE PI_MININDEX           BIGINT;
       DECLARE EACHMAX               INT; ##每次处理最大数
	
        DECLARE P_ERR  INT DEFAULT 0;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
	#初始化
	SET P_PROCESSINGSTATUSCOUNT = 0;
	SET P_USEID                 = 2;
	SET P_CURRINDEX             = 0;
	SET P_MAXINDEX              = 0;
	SET P_COUNTSTATUS           = 1;
	SET P_DISTRACTSTATUS        = 1;
	SET P_DELETESTATUS          = 1;
	##SET P_PROCESSFLAG           = 2;
	SET EACHMAX               = 500000;
	SET P_COUNTEXCEPTION        = 5;
	SET P_DISTRACTEXCEPTION     = 5;
	SET P_DELETEEXCEPTION       = 5;
	SET P_ALLEXCEPTION          = 10;

         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','H_MMSDATATRANSF','彩信汇总调度存储过程执行开始');
	#1.先汇总
	SELECT COUNT(ID) INTO P_COUNTINFO FROM MMS_TASK  WHERE  SENDTIME  >= (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY)) AND SENDTIME < CURDATE() ;

	IF P_COUNTINFO>0 THEN
		CALL H_MMSSTATISTICS(P_PROCESSFLAG);
                IF P_ERR=1 THEN 
                   INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信下行汇总H_MMSSTATISTICS','汇总出现异常');
                END IF;
	END IF;
	#2.再转移
	#先根据指定USEID判断是否有值
	SELECT COUNT(USEID) INTO P_PROCESSINGSTATUSCOUNT FROM PROCESSINGSTATUS WHERE USEID = P_USEID;
	#如果没有先初始化PROCESSINGSTATUS,否则取当表中值
	IF P_PROCESSINGSTATUSCOUNT = 0 THEN
         BEGIN
		CALL H_PROCESSSTATUS(P_USEID,0,0,0,0,0)	;
               SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END;
	ELSE
		SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END IF;
       
         SELECT MAX(ID) INTO P_MAXINDEX FROM MMS_TASK  WHERE  SENDTIME <(DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY)); 
            #判断是否存在未转移的数据
           IF P_CURRINDEX<P_MAXINDEX THEN
            ##创建不存在的历史表
            SELECT CAST(DATE_FORMAT(MIN(SENDTIME),'%Y%m') AS SIGNED), CAST(DATE_FORMAT(MAX(SENDTIME),'%Y%m') AS SIGNED)  INTO  MINYM, MAXYM  FROM MMS_TASK  WHERE  ID<=P_MAXINDEX; 
             SET CURYM = MINYM;
             WHILE CURYM<=MAXYM DO
                  SET TABLENAME =CONCAT( 'MMSTASK',CURYM)	;
                  SELECT COUNT(1)  INTO P_ISEXIST FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA`=DATABASE() AND `TABLE_NAME`=TABLENAME ;
                  IF P_ISEXIST=0 THEN
                      CALL CREATETABLE(2,CURYM);
                      IF P_ERR=1 THEN 
                         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信下行历史表创建：CREATETABLE','创建历史表出现异常');
                      END IF;
                  END IF;

                  IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                      SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
                  ELSE
                      SET CURYM = CURYM+1  ;
                  END IF;
            END WHILE;
             #转移数据
             SET P_ERR=0;
	   IF (P_MAXINDEX-P_CURRINDEX>=EACHMAX) THEN
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=PI_MININDEX+EACHMAX;
           ELSE
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=P_MAXINDEX;
           END IF;
          WHILE (PI_MININDEX <P_MAXINDEX) DO
               START TRANSACTION;
                SAVEPOINT A;
                CALL H_MMSTRANSFER(PI_MININDEX,PI_CURINDEX,0,0);
                CALL  H_MMSDELTETASK (PI_MININDEX,PI_CURINDEX,0,0);
                CALL H_PROCESSSTATUS(P_USEID,PI_CURINDEX,PI_CURINDEX,0,0,0);
		IF P_ERR = 1 THEN
                BEGIN
                    ROLLBACK TO  SAVEPOINT A;
                    INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信下行数据转移','下行数据转移出现异常');
                    SET P_DISTRACTEXCEPTION = P_DISTRACTEXCEPTION - 1;
                    SET P_ALLEXCEPTION      = P_ALLEXCEPTION - 1;                                      
                    IF P_DISTRACTEXCEPTION <= 0 OR P_ALLEXCEPTION <= 0 THEN
                       LEAVE TOP;
                   END IF;
               END;
               ELSE
                 IF (P_MAXINDEX-PI_CURINDEX>=EACHMAX) THEN
                    SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 ELSE
                    SET PI_CURINDEX=P_MAXINDEX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 END IF;
                 COMMIT;
              END IF;
        END WHILE;
        END IF;

        #5.执行上行统计
       CALL  H_MMSTRANSFERMO();

     DELETE FROM MMS_BMTREQHIS WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 60 DAY);
      IF P_ERR = 1 THEN 
         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信删除MMS_BMTREQHIS表记录','删除数据出现异常');
      END IF;
 
      IF DAYOFMONTH(NOW())=1 THEN
          DELETE FROM MMS_RPT WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
          IF P_ERR = 1 THEN 
              INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信删除MMS_RPT表记录','删除数据出现异常');
          END IF;
      END IF;
      
      INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','H_MMSDATATRANSF','彩信汇总调度存储过程执行结束');

END TOP;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR INSERTMTREPORT_SP
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `INSERTMTREPORT_SP`(P_USERID CHAR(11),P_RPTSTR VARCHAR(64))
BEGIN
	#IF P_USERID = '' OR P_RPTSTR = ''  RETURN;
	DECLARE P_IYMD INT;
	DECLARE P_SPGATE VARCHAR(21);
	DECLARE P_SPISUNCM INT;
	DECLARE P_ICOUNT INT;
	DECLARE P_ISUCC INT;
	DECLARE P_IFAIL INT;
	DECLARE P_I INT;
	DECLARE P_J INT;
	SET P_J = 1;
	SET P_I = LOCATE(',',P_RPTSTR);
	WHILE P_I > 0 DO
              IF P_J = 1 THEN
			SET P_IYMD = CAST(SUBSTRING(P_RPTSTR,1,P_I-1) AS SIGNED);
	      ELSEIF P_J = 2 THEN
		         SET P_SPGATE = SUBSTRING(P_RPTSTR,1,P_I-1);
	      ELSEIF P_J = 3 THEN
			SET P_SPISUNCM = CAST(SUBSTRING(P_RPTSTR,1,P_I-1) AS SIGNED);
	      ELSEIF P_J = 4 THEN
			SET P_ICOUNT = CAST(SUBSTRING(P_RPTSTR,1,P_I-1) AS SIGNED);
	      ELSEIF P_J = 5 THEN
			SET P_ISUCC = CAST(SUBSTRING(P_RPTSTR,1,P_I-1) AS SIGNED);
	      ELSEIF P_J = 6 THEN
			SET P_IFAIL = CAST(SUBSTRING(P_RPTSTR,1,P_I-1) AS SIGNED);
              END IF;

		SET P_J = P_J+1;
		SET P_RPTSTR = INSERT(P_RPTSTR,1,P_I,'');
		SET P_I = LOCATE(',',P_RPTSTR);
	END WHILE;
	IF P_RPTSTR <> '' THEN
		SET P_IFAIL = CAST(P_RPTSTR AS SIGNED);
        END IF;
	IF NOT EXISTS (SELECT IYMD FROM MT_DATAREPORT_SP WHERE IYMD = P_IYMD
					AND USERID = P_USERID AND SPGATE = P_SPGATE) THEN
		INSERT INTO MT_DATAREPORT_SP
				(IYMD,USERID,SPGATE,SPISUNCM,ICOUNT,ISUCC,IFAIL) VALUES
				(P_IYMD,P_USERID,P_SPGATE,P_SPISUNCM,P_ICOUNT,P_ISUCC,P_IFAIL);
	ELSE
		UPDATE MT_DATAREPORT_SP
				SET ICOUNT = P_ICOUNT,ISUCC = P_ISUCC,
					IFAIL = P_IFAIL,UPDATETIME = NOW()
			WHERE IYMD = P_IYMD AND USERID = P_USERID AND SPGATE = P_SPGATE;
	END	IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR LOADPROCERRCODE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `LOADPROCERRCODE`(PROTOCOLTYPE VARCHAR(32))
BEGIN
DECLARE PICNT INT;
SET PICNT=0;
SELECT  COUNT(*) INTO PICNT FROM HTTPERRCODE WHERE PROTOCOLTYPE = PROTOCOLTYPE ;
  IF(PICNT=0) THEN
  SELECT ERRSTATUS,PROTOCOLTYPE,ERRCODE,DESCRPTINFO FROM HTTPERRCODE ;
  ELSE
  SELECT ERRSTATUS,PROTOCOLTYPE,ERRCODE,DESCRPTINFO FROM HTTPERRCODE WHERE PROTOCOLTYPE = PROTOCOLTYPE ;
END IF;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR M_WR_MONINFO
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `M_WR_MONINFO`(P_INFOTYPE INT,P_MONINFO VARCHAR(5120) CHARSET GBK)
LOOP1:
BEGIN
/*
132,'#11632#CMSGMGR::THREADWRITEMTLEVELQUEUE#10#0#2012-07-07 11:44:51#THREAD:CMSGMGR::THREADWRITEMTLEVELQUEUE THRID:11632 STATUS:IDLE INTERVAL:5000 CURRENTINFO:EXECUTE WAITFORCOMPATIBLEEVENT#2012-07-07 12:26:21#2012-07-07 12:26:21
*/
 DECLARE P_SQL VARCHAR(5120)  ;       #返回的SQL语句
 DECLARE P_STR VARCHAR(5120)    ;     #传人的字符串
 DECLARE P_SUBSTR VARCHAR(5120)   ;   #截取的字符串
 #################-维护表M_MON_USERINFO,帐号为主键,存在更新/不存在插入###################
#INSERT INTO TESTSTR(STR) VALUES(P_MONINFO);
#LEAVE LOOP1;
	IF P_INFOTYPE=130  THEN
	   SET P_STR=P_MONINFO  ;
	   SET P_SUBSTR=(SELECT SUBSTRINGPRIKEY(P_STR,2));
	   IF EXISTS(SELECT * FROM M_MON_USERINFO WHERE USERID=P_SUBSTR)   THEN #判断主键是否存在
			SET P_SQL=BUILDUPDATESQL('M_MON_USERINFO',
			'PTCODE#USERID#USERUID#USERNAME#USERPRIVILEGE#JTYPE#LINKNUM#LOGINIP#ONLINESTATUS#USERFEE#FIXFAILURERATE#FAILURENUM#FAILURERATE#BINDINFO#MTTOTALSND#MTHAVESND#MTREMAINED#MTSNDINFO#MTSNDSPD#MOTOTALRECV#MOREMAINED#MORPTRECVSPD#MOTMOUTCNT#RPTTOTALRECV#RPTREMAINED#RPTTMOUTCNT#LOGININTM#LOGINOUTTM#UPDATETIME'
			,P_STR,CONCAT('WHERE USERID=''',P_SUBSTR,''''));
	  ELSE
	       SET P_SQL= BUILDINSERTSQL('M_MON_USERINFO',
	        'PTCODE#USERID#USERUID#USERNAME#USERPRIVILEGE#JTYPE#LINKNUM#LOGINIP#ONLINESTATUS#USERFEE#FIXFAILURERATE#FAILURENUM#FAILURERATE#BINDINFO#MTTOTALSND#MTHAVESND#MTREMAINED#MTSNDINFO#MTSNDSPD#MOTOTALRECV#MOREMAINED#MORPTRECVSPD#MOTMOUTCNT#RPTTOTALRECV#RPTREMAINED#RPTTMOUTCNT#LOGININTM#LOGINOUTTM#UPDATETIME'
	       ,P_STR);
		 END IF;
	   SET @SQL = P_SQL;
           PREPARE SL FROM @SQL;
    	   EXECUTE SL;
           DEALLOCATE PREPARE SL;
    END IF;

#################维护表DBO.M_MON_SPGATEINFO,帐号为主键,存在更新/不存在插入 ##############-
IF P_INFOTYPE=131  THEN
       SET P_STR=P_MONINFO;
       SET P_SUBSTR=(SELECT SUBSTRINGPRIKEY(P_STR,2)) ;
	   IF EXISTS(SELECT * FROM M_MON_SPGATEINFO WHERE USERID=P_SUBSTR)  THEN #判断主键是否存在
			SET P_SQL=(SELECT BUILDUPDATESQL('M_MON_SPGATEINFO',
			'PTCODE#USERID#USERUID#USERNAME#JTYPE#LINKNUM#LOGINIP#ONLINESTATUS#MTHAVESND#MTREMAINED#MTRECVSPD#MOTOTALRECV#MOHAVESND#MOREMAINED#MOSNDSPD#RPTTOTALRECV#RPTHAVESND#RPTREMAINED#RPTSNDSPD#SNDERCNT#LASTSNDERTM#LOGININTM#LOGINOUTTM#UPDATETIME'
			,P_STR,CONCAT('WHERE USERID=''',SUBSTRINGPRIKEY(P_STR,2),'''')));
	  ELSE
	       SET P_SQL=(SELECT BUILDINSERTSQL('M_MON_SPGATEINFO',
	        'PTCODE#USERID#USERUID#USERNAME#JTYPE#LINKNUM#LOGINIP#ONLINESTATUS#MTHAVESND#MTREMAINED#MTRECVSPD#MOTOTALRECV#MOHAVESND#MOREMAINED#MOSNDSPD#RPTTOTALRECV#RPTHAVESND#RPTREMAINED#RPTSNDSPD#SNDERCNT#LASTSNDERTM#LOGININTM#LOGINOUTTM#UPDATETIME'
	       ,P_STR));
		 END IF;
	   SET @SQL = P_SQL;
           PREPARE SL FROM @SQL;
    	   EXECUTE SL;
           DEALLOCATE PREPARE SL;
    END IF;

#################维护表DBO.M_MON_THREADINFO,THRID为主键,存在更新/不存在插入 ##############-
 IF P_INFOTYPE=132 THEN

	   SET P_STR=P_MONINFO   ;

	   IF EXISTS(SELECT * FROM M_MON_THREADINFO WHERE THRID=SUBSTRINGPRIKEY(P_STR,2)) THEN   #判断主键是否存在
			SET P_SQL=(SELECT BUILDUPDATESQL('M_MON_THREADINFO',
			'PTCODE#THRID#THRNAME#THRSTATUS#ERRORCNT#LASTERRORTM#THRLOGS#LASTRUNTM#THISRUNTM#UPDATETIME'
			,P_STR,CONCAT('WHERE THRID=''',SUBSTRINGPRIKEY(P_STR,2),'''')));
	  ELSE
	       SET P_SQL=(SELECT BUILDINSERTSQL('M_MON_THREADINFO',
	       'PTCODE#THRID#THRNAME#THRSTATUS#ERRORCNT#LASTERRORTM#THRLOGS#LASTRUNTM#THISRUNTM#UPDATETIME'
	        ,P_STR));
		 END IF;
	   SET @SQL = P_SQL;
           PREPARE SL FROM @SQL;
    	   EXECUTE SL;
           DEALLOCATE PREPARE SL;
    END  IF;


##################维护表M_MON_BUFINFO,原则上只有一条记录，存在更新，不存在插入 ##############-
IF P_INFOTYPE=133 THEN

	   SET P_STR=P_MONINFO     ;

	   IF ((SELECT COUNT(*) FROM M_MON_BUFINFO)>0)  THEN  #有记录更新,无记录插入
			SET P_SQL=(SELECT BUILDUPDATESQL('M_MON_BUFINFO',
			'PTCODE#ENDCNT#MOTOTALRECV#MTTOTALSND#WRMOBUF#UPDMOBUF#UPDRPTBUF#WRRPTBUF#ENDRSPBUF#SMTSNDBUF#NMTSNDBUF#MTWAITBUF#PRECNT#MTTOTALRECV#MOTOTALSND#WRMTTASKBUF#WRMTTMBUF#WRMTVFYBUF#WRMTLVLBUF#PRERSPBUF#PRERSPTMPBUF#MOSNDBUF#RPTSNDBUF#MORPTWAITBUF#LOGFILENUM#LOGBUF#RECVBUF#RESNDBUF#SUPPSNDBUF#MONLOGBUF#UPDATETIME'
			,P_STR,'WHERE 1=1'));
	  ELSE
	       SET P_SQL=(SELECT BUILDINSERTSQL('M_MON_BUFINFO',
	       'PTCODE#ENDCNT#MOTOTALRECV#MTTOTALSND#WRMOBUF#UPDMOBUF#UPDRPTBUF#WRRPTBUF#ENDRSPBUF#SMTSNDBUF#NMTSNDBUF#MTWAITBUF#PRECNT#MTTOTALRECV#MOTOTALSND#WRMTTASKBUF#WRMTTMBUF#WRMTVFYBUF#WRMTLVLBUF#PRERSPBUF#PRERSPTMPBUF#MOSNDBUF#RPTSNDBUF#MORPTWAITBUF#LOGFILENUM#LOGBUF#RECVBUF#RESNDBUF#SUPPSNDBUF#MONLOGBUF#UPDATETIME'
	        ,P_STR));
		 END IF;
	   SET @SQL = P_SQL;
           PREPARE SL FROM @SQL;
    	   EXECUTE SL;
           DEALLOCATE PREPARE SL;
    END  IF;

##################维护表M_MON_SYSINFO,原则上只有一条记录，存在更新，不存在插入 ##############-
 IF P_INFOTYPE=134 THEN

	   SET P_STR=P_MONINFO     ;

	   IF ((SELECT COUNT(*) FROM M_MON_SYSINFO)>0)   THEN #有记录更新,无记录插入
			SET P_SQL=(SELECT BUILDUPDATESQL('M_MON_SYSINFO',
			'PTCODE#CPUUSAGE#MEMUSAGE#VMEMUSAGE#DISKFREESPACE#UPDATETIME'
			,P_STR,'WHERE 1=1'));
	  ELSE
	       SET P_SQL=(SELECT  BUILDINSERTSQL('M_MON_SYSINFO',
	       'PTCODE#CPUUSAGE#MEMUSAGE#VMEMUSAGE#DISKFREESPACE#UPDATETIME'
	        ,P_STR));
		 END IF;
	   SET @SQL = P_SQL;
           PREPARE SL FROM @SQL;
    	   EXECUTE SL;
           DEALLOCATE PREPARE SL;
    END   IF;



###################维护表M_MON_LOGINFO,持续插入,一小时清空一次(清空动作由上层页面完成) ##############-
IF P_INFOTYPE=135 THEN
	   SET P_STR=P_MONINFO     ;
	   SET P_SQL=(SELECT BUILDINSERTSQL('M_MON_LOGINFO','PTCODE#LOGTYPE#LOGS',P_STR));
	   SET @SQL = P_SQL;
           PREPARE SL FROM @SQL;
    	   EXECUTE SL;
           DEALLOCATE PREPARE SL;
END IF;


#########################将监控信息转移到历史表中####################
IF P_INFOTYPE=254 THEN
         INSERT INTO  M_MON_USER_HIS( PTCODE,USERID,USERUID,USERNAME,USERPRIVILEGE,JTYPE,LINKNUM,LOGINIP,ONLINESTATUS,USERFEE,FIXFAILURERATE,
	                             FAILURENUM,FAILURERATE,BINDINFO,MTTOTALSND,MTHAVESND,MTREMAINED,MTSNDINFO,MTSNDSPD,MOTOTALRECV,MOREMAINED,
								 MORPTRECVSPD,MOTMOUTCNT,RPTTOTALRECV,RPTREMAINED,RPTTMOUTCNT,LOGININTM ,LOGINOUTTM,UPDATETIME) 
								 SELECT PTCODE,USERID,USERUID,USERNAME,USERPRIVILEGE,JTYPE,LINKNUM,LOGINIP,ONLINESTATUS,USERFEE,
								 FIXFAILURERATE,FAILURENUM,FAILURERATE,BINDINFO,MTTOTALSND,MTHAVESND,MTREMAINED,MTSNDINFO,MTSNDSPD,
								 MOTOTALRECV,MOREMAINED,MORPTRECVSPD,MOTMOUTCNT,RPTTOTALRECV,RPTREMAINED,RPTTMOUTCNT,LOGININTM ,LOGINOUTTM,UPDATETIME 
								 FROM  M_MON_USERINFO;                               
  
	INSERT INTO  M_MON_SPGATE_HIS(PTCODE,USERID,USERUID,USERNAME,JTYPE,LINKNUM,LOGINIP,ONLINESTATUS,MTHAVESND,MTREMAINED,MTRECVSPD,MOTOTALRECV,
	                              MOHAVESND,MOREMAINED,MOSNDSPD,RPTTOTALRECV,RPTHAVESND,RPTREMAINED,RPTSNDSPD,SNDERCNT,LASTSNDERTM,LOGININTM,LOGINOUTTM,UPDATETIME)
								  SELECT PTCODE,USERID,USERUID,USERNAME,JTYPE,LINKNUM,LOGINIP,ONLINESTATUS,MTHAVESND,MTREMAINED,MTRECVSPD,MOTOTALRECV,MOHAVESND,
								  MOREMAINED,MOSNDSPD,RPTTOTALRECV,RPTHAVESND,RPTREMAINED,RPTSNDSPD,SNDERCNT,LASTSNDERTM,LOGININTM,LOGINOUTTM,UPDATETIME 
								  FROM  M_MON_SPGATEINFO; 
 
	
	INSERT INTO M_MON_SYS_HIS(PTCODE,CPUUSAGE,MEMUSAGE,VMEMUSAGE,DISKFREESPACE,UPDATETIME) SELECT PTCODE,CPUUSAGE,MEMUSAGE,VMEMUSAGE,DISKFREESPACE,UPDATETIME FROM M_MON_SYSINFO;
	
	
	INSERT INTO M_MON_BUF_HIS(PTCODE,ENDCNT,MOTOTALRECV,MTTOTALSND,WRMOBUF,UPDMOBUF,UPDRPTBUF,WRRPTBUF,ENDRSPBUF,SMTSNDBUF,NMTSNDBUF,MTWAITBUF,PRECNT,
	                          MTTOTALRECV,MOTOTALSND,WRMTTASKBUF,WRMTTMBUF,WRMTVFYBUF,WRMTLVLBUF,PRERSPBUF,PRERSPTMPBUF,MOSNDBUF,RPTSNDBUF,
							  MORPTWAITBUF,LOGFILENUM,LOGBUF,RECVBUF,RESNDBUF,SUPPSNDBUF,MONLOGBUF,UPDATETIME) 
							  SELECT PTCODE,ENDCNT,MOTOTALRECV,MTTOTALSND,WRMOBUF,UPDMOBUF,UPDRPTBUF,WRRPTBUF,ENDRSPBUF,SMTSNDBUF,NMTSNDBUF,MTWAITBUF,
							  PRECNT,MTTOTALRECV,MOTOTALSND,WRMTTASKBUF,WRMTTMBUF,WRMTVFYBUF,WRMTLVLBUF,PRERSPBUF,PRERSPTMPBUF,MOSNDBUF,RPTSNDBUF,
							  MORPTWAITBUF,LOGFILENUM,LOGBUF,RECVBUF,RESNDBUF,SUPPSNDBUF,MONLOGBUF,UPDATETIME FROM M_MON_BUFINFO;
	
	INSERT INTO M_MON_THREAD_HIS(PTCODE,THRID,THRNAME,THRSTATUS,ERRORCNT,LASTERRORTM,THRLOGS,LASTRUNTM,THISRUNTM,UPDATETIME) 
	                             SELECT PTCODE,THRID,THRNAME,THRSTATUS,ERRORCNT,LASTERRORTM,THRLOGS,LASTRUNTM,THISRUNTM,UPDATETIME FROM M_MON_THREADINFO;
	
	
	INSERT INTO M_MON_LOG_HIS(PTCODE,LOGTYPE,LOGS,UPDATETIME) SELECT PTCODE,LOGTYPE,LOGS,UPDATETIME FROM M_MON_LOGINFO;

END IF;
###################清空所有表 ##############-
 IF P_INFOTYPE=255 THEN

		SET P_SQL='TRUNCATE TABLE M_MON_USERINFO;';
		SET @SQL = P_SQL;
    		PREPARE SL FROM @SQL;
    		EXECUTE SL;
                DEALLOCATE PREPARE SL;


		SET P_SQL = 'TRUNCATE TABLE M_MON_SPGATEINFO;';
		SET @SQL = P_SQL;
    		PREPARE SL FROM @SQL;
    		EXECUTE SL;
                DEALLOCATE PREPARE SL;

		SET P_SQL = 'TRUNCATE TABLE M_MON_THREADINFO;';
		SET @SQL = P_SQL;
    		PREPARE SL FROM @SQL;
   		 EXECUTE SL;
                DEALLOCATE PREPARE SL;

		SET P_SQL = 'TRUNCATE TABLE M_MON_BUFINFO;';
		SET @SQL = P_SQL;
    		PREPARE SL FROM @SQL;
    		EXECUTE SL;
                DEALLOCATE PREPARE SL;

		SET P_SQL = 'TRUNCATE TABLE M_MON_SYSINFO;';
		SET @SQL = P_SQL;
    		PREPARE SL FROM @SQL;
    		EXECUTE SL;
                DEALLOCATE PREPARE SL;
  
		SET P_SQL = 'TRUNCATE TABLE M_MON_LOGINFO;';
		SET @SQL = P_SQL;
    		PREPARE SL FROM @SQL;
    		EXECUTE SL;
                DEALLOCATE PREPARE SL;
	END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR MERGEPROCESSINGSTATUS
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `MERGEPROCESSINGSTATUS`(P_CUSEID INT,P_CUR BIGINT,P_MAXI BIGINT,P_COUNTS INT,P_DISTRACTS INT,P_DELETES INT)
BEGIN

	IF EXISTS (SELECT USEID FROM PROCESSINGSTATUS WHERE USEID=P_CUSEID) THEN
		INSERT INTO PROCESSINGSTATUS(USEID,CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS ,DELETESTATUS)
                VALUES(P_CUSEID,P_CUR,P_MAXI,P_COUNTS,P_DISTRACTS,P_DELETES);
    ELSE
		UPDATE PROCESSINGSTATUS SET CURRINDEX=P_CUR, MAXINDEX=P_MAXI,COUNTSTATUS=P_COUNTS,DISTRACTSTATUS=P_DISTRACTS ,DELETESTATUS=P_DELETES
                WHERE USEID=P_CUSEID     ;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR MMS_RD_BMTREQ
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `MMS_RD_BMTREQ`(PI_MAXREADCNT INT)
BEGIN
    DECLARE PI_SQLSTR VARCHAR(5000);
	SET PI_SQLSTR = CONCAT('SELECT  ID,MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,MSGTYPE,TASKID,TITLE,TMPLID,MSG,
    MSGFMT,REMOTEURL,LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SENDSTATUS,ERRORCODE,RECVTIME,
    SENDTIME,SENDTYPE,ATTIMEFLAG,SA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG 
    FROM MMS_BMTREQ WHERE SENDSTATUS=1 ORDER BY SENDLEVEL LIMIT  ' ,PI_MAXREADCNT);

    SET @SQL = PI_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR MMS_UPD_BMTREQ
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `MMS_UPD_BMTREQ`(
  PIID INT,
	PISENDSTATUS TINYINT,
	PITASKID INT,
	PIMSGID BIGINT,
	PIERRORCODE CHAR(7),
	PIBMTMSGID BIGINT,##=0,
  PIPTMSGIDSTR VARCHAR(8000),##='',
	PIPTMSGID BIGINT##=0
	)
BEGIN
	IF PISENDSTATUS=1 THEN
		UPDATE MMS_BMTREQ SET SENDSTATUS=PISENDSTATUS,MSGID=0,ERRORCODE=PIERRORCODE,SENDTIME=NOW()
		WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
    -- 已读取待处理
	ELSEIF PISENDSTATUS=2 THEN
		UPDATE MMS_BMTREQ SET SENDSTATUS=PISENDSTATUS,MSGID=PIMSGID,ERRORCODE=PIERRORCODE,SENDTIME=NOW()
		WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
    -- 请求有误,停止该处理该请求
	ELSEIF PISENDSTATUS=3 THEN
		UPDATE MMS_BMTREQ SET SENDSTATUS=PISENDSTATUS,ERRORCODE=PIERRORCODE,SENDTIME=NOW()
		WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
    -- 该请求所对应的文件已下载完毕，正在发送中
	ELSEIF PISENDSTATUS=4 THEN
		UPDATE MMS_BMTREQ SET SENDSTATUS=PISENDSTATUS,SENDTIME=NOW()
		WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
	-- 请求有误,停止该处理该请求
	ELSEIF PISENDSTATUS=5 THEN
		UPDATE MMS_BMTREQ SET SENDSTATUS=PISENDSTATUS,ERRORCODE=PIERRORCODE,SENDTIME=NOW()
		WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
	--
	ELSEIF PISENDSTATUS=6 THEN
	BEGIN
		UPDATE MMS_BMTREQ SET MSGID=PIPTMSGID,SENDSTATUS=PISENDSTATUS,SENDTIME=NOW()
		WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
        UPDATE MMS_LEVEL_QUEUE SET SENDSTATUS=1
               WHERE SENDSTATUS=10 AND LOCATE(CAST(PTMSGID AS CHAR(30)),PIPTMSGIDSTR)>0;
	END;
	ELSEIF PISENDSTATUS=0 THEN
	BEGIN
		UPDATE MMS_BMTREQ SET MSGID=PIPTMSGID,SENDSTATUS=PISENDSTATUS,SENDTIME=NOW()
		WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
        UPDATE MMS_LEVEL_QUEUE SET SENDSTATUS=1
               WHERE SENDSTATUS=10 AND LOCATE(CAST(PTMSGID AS CHAR(30)),PIPTMSGIDSTR)>0;
		INSERT INTO MMS_BMTREQHIS(MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,MSGTYPE,
                    TASKID,TITLE,TMPLID,MSG,MSGFMT,REMOTEURL,LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,
                    SENDSTATUS,ERRORCODE,RECVTIME,SENDTIME,SENDTYPE,ATTIMEFLAG,SA,
                    SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG)
        SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,MSGTYPE,TASKID,TITLE,TMPLID,MSG,
               MSGFMT,REMOTEURL,LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SENDSTATUS,ERRORCODE,RECVTIME,
               SENDTIME,SENDTYPE,ATTIMEFLAG,SA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG
        FROM MMS_BMTREQ WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
		DELETE FROM MMS_BMTREQ WHERE ID=PIID AND BMTMSGID=PIBMTMSGID;
	END;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR MMS_WR_LVLQUE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `MMS_WR_LVLQUE`(
	PIPTMSGID         BIGINT,
	PIUID             INT,
	PILOGINID         VARCHAR(11),
	PIDEALSTATUS      INT,
	PIUSERID          VARCHAR(11),
	PISA              VARCHAR(21),
	PIRETFLAG         INT,
	PIPHONECOUNT      INT,
	PIUNICOM          INT,
	PISENDSTATUS      INT,
	PISENDLEVEL       INT,
	PISENDTIME        DATETIME,
	PIMSGFMT          INT,
	PIMSGTYPE         INT,
	PITASKID          INT,
	PIMSGTITLE        VARCHAR(200),
	PITMPLID          BIGINT,
	PIMESSAGE         VARCHAR(3000),
	PIPHONE           VARCHAR(1500),
	PISVRTYPE         VARCHAR(64),##='',
	PIP1              VARCHAR(64),##='',
	PIP2              VARCHAR(64),##='',
	PIP3              VARCHAR(64),##='',
	PIP4              VARCHAR(64),##='',
	PIUSERMSGID       BIGINT,##=0,
	PIMODULEID        INT,##=0,
	PIATTIME          BIGINT,##=0,
	PIVALIDTIME       BIGINT ##=0    	  	
)
BEGIN
	DECLARE PILOGINUID INT;
        DECLARE PICOUNT1 INT;
        DECLARE PICOUNT2 INT;
        DECLARE PICOUNT3 INT;
        SELECT COUNT( SPGATE) INTO PICOUNT1 FROM  GT_PORT_USED WHERE USERID=PIUSERID AND SPISUNCM=PIUNICOM AND STATUS=0 AND GATETYPE=2;
        SELECT COUNT( SPGATE) INTO PICOUNT2 FROM XT_GATE_QUEUE WHERE SPISUNCM=PIUNICOM AND STATUS=0 AND GATETYPE=2;
        SELECT COUNT( SPGATE) INTO PICOUNT3 FROM  GT_PORT_USED WHERE USERID=PIUSERID AND STATUS=0 AND GATETYPE=2;
	IF PICOUNT1>0 THEN
		IF NOT EXISTS (SELECT PTMSGID FROM MMS_LEVEL_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
		INSERT INTO MMS_LEVEL_QUEUE(PTMSGID,UID,DEALSTATUS,USERID,SPGATE,CPNO,SA,RETFLAG,PHONECOUNT,
		UNICOM,SENDSTATUS,SENDLEVEL,SENDTIME,MSGFMT,MSGTYPE,TASKID,MSGTITLE,TMPLID,MESSAGE,PHONE,
		SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME)
		SELECT PIPTMSGID,PIUID,PIDEALSTATUS,PIUSERID,SPGATE,CPNO,PISA,PIRETFLAG,
		PIPHONECOUNT,PIUNICOM,PISENDSTATUS,PISENDLEVEL,PISENDTIME,PIMSGFMT,PIMSGTYPE,PITASKID,
		PIMSGTITLE,PITMPLID,PIMESSAGE,PIPHONE,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,
		PIMODULEID,PIATTIME,PIVALIDTIME 
		FROM GT_PORT_USED WHERE USERID=PIUSERID AND SPISUNCM=PIUNICOM AND STATUS=0 AND GATETYPE=2 ORDER BY ID DESC LIMIT 0,1;
		END IF;
       ELSEIF PICOUNT2>0  THEN
                IF NOT EXISTS (SELECT PTMSGID FROM MMS_LEVEL_QUEUE WHERE PTMSGID=PIPTMSGID)THEN
		INSERT INTO MMS_LEVEL_QUEUE(PTMSGID,UID,DEALSTATUS,USERID,SPGATE,CPNO,SA,RETFLAG,PHONECOUNT,
		UNICOM,SENDSTATUS,SENDLEVEL,SENDTIME,MSGFMT,MSGTYPE,TASKID,MSGTITLE,TMPLID,MESSAGE,PHONE,
		SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME)
		SELECT  PIPTMSGID,PIUID,PIDEALSTATUS,PIUSERID,SPGATE,'',PISA,PIRETFLAG,
		PIPHONECOUNT,PIUNICOM,PISENDSTATUS,PISENDLEVEL,PISENDTIME,PIMSGFMT,PIMSGTYPE,PITASKID,
		PIMSGTITLE,PITMPLID,PIMESSAGE,PIPHONE,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,
		PIMODULEID,PIATTIME,PIVALIDTIME 
		FROM XT_GATE_QUEUE WHERE SPISUNCM=PIUNICOM AND STATUS=0 AND GATETYPE=2 ORDER BY ID DESC LIMIT 0,1;
	        END IF;
      ELSEIF PICOUNT3>0 THEN
	        IF NOT EXISTS (SELECT PTMSGID FROM MMS_LEVEL_QUEUE WHERE PTMSGID=PIPTMSGID)THEN
		INSERT INTO MMS_LEVEL_QUEUE(PTMSGID,UID,DEALSTATUS,USERID,SPGATE,CPNO,SA,RETFLAG,PHONECOUNT,
		UNICOM,SENDSTATUS,SENDLEVEL,SENDTIME,MSGFMT,MSGTYPE,TASKID,MSGTITLE,TMPLID,MESSAGE,PHONE,
		SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME)
		SELECT  PIPTMSGID,PIUID,PIDEALSTATUS,PIUSERID,SPGATE,CPNO,PISA,PIRETFLAG,
		PIPHONECOUNT,SPISUNCM,PISENDSTATUS,PISENDLEVEL,PISENDTIME,PIMSGFMT,PIMSGTYPE,PITASKID,
		PIMSGTITLE,PITMPLID,PIMESSAGE,PIPHONE,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,
		PIMODULEID,PIATTIME,PIVALIDTIME 
		FROM GT_PORT_USED WHERE USERID=PIUSERID AND STATUS=0 AND GATETYPE=2 ORDER BY ID DESC LIMIT 0,1;
	        END IF;
     ELSE 
		IF NOT EXISTS (SELECT PTMSGID FROM MMS_LEVEL_QUEUE WHERE PTMSGID=PIPTMSGID)THEN
		INSERT INTO MMS_LEVEL_QUEUE(PTMSGID,UID,DEALSTATUS,USERID,SPGATE,CPNO,SA,RETFLAG,PHONECOUNT,
		UNICOM,SENDSTATUS,SENDLEVEL,SENDTIME,MSGFMT,MSGTYPE,TASKID,MSGTITLE,TMPLID,MESSAGE,PHONE,
		SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME)
		VALUES(PIPTMSGID,PIUID,PIDEALSTATUS,PIUSERID,'','',PISA,PIRETFLAG,
		PIPHONECOUNT,PIUNICOM,9,PISENDLEVEL,PISENDTIME,PIMSGFMT,PIMSGTYPE,PITASKID,
		PIMSGTITLE,PITMPLID,PIMESSAGE,PIPHONE,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,
		PIMODULEID,PIATTIME,PIVALIDTIME);
		END IF;
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR PRO_INDEX_REBUILD
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `PRO_INDEX_REBUILD`()
BEGIN
	DECLARE P_USAGE_COUNT INT;
	DECLARE P_INDEX_USAGE INT;	#索引的使用，值大于20时，需要重整索引
	DECLARE P_STR VARCHAR(200);
	DECLARE P_EXCEPTION_NUMBER INT;#允许的异常数量
	DECLARE P_ERROR	INT;

	DECLARE P_IDXNAME VARCHAR(20); #索引名称
	DECLARE P_TABNAME VARCHAR(20); #表名
	DECLARE P_DATAROWS INT ;#表中的行数
	DECLARE P_SEEKTIMES INT ; #用户索引查找次数
	DECLARE P_SCANTIMES INT; #用户索引扫描次数
        DECLARE CURFLAG INT;# DEFAULT 1;
        DECLARE MAXCNT INT ;
        DECLARE I INT;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERROR=0;

 CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_REINDEX(
        TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
	IDXNAME VARCHAR(20), #索引名称
	TABNAME VARCHAR(20), #表名
	SEEKTIMES INT , #用户索引查找次数
	SCANTIMES INT, #用户索引扫描次数);
        DATAROWS INT );#表中的行数
ALTER TABLE P_TMP_REINDEX AUTO_INCREMENT=1;

INSERT INTO P_TMP_REINDEX(IDXNAME, TABNAME , SEEKTIMES,SCANTIMES , DATAROWS)
SELECT DISTINCT OBJECT_NAME(A.OBJECT_ID),B.NAME, A.USER_SEEKS,A.USER_SCANS,C.ROWS
			FROM SYS.DM_DB_INDEX_USAGE_STATS AS A INNER JOIN SYS.INDEXES AS B ON A.INDEX_ID = B.INDEX_ID AND
			A.OBJECT_ID = B.OBJECT_ID INNER JOIN  SYS.SYSINDEXES AS C ON C.ID = B.OBJECT_ID WHERE (A.DATABASE_ID = DB_ID('EMPSVR'))
			AND (OBJECT_NAME(A.OBJECT_ID) NOT LIKE 'SYS%') AND (B.NAME IS NOT NULL);

SET P_EXCEPTION_NUMBER=10;
SELECT MIN(TMP_ID) INTO I FROM P_TMP_REINDEX;
SELECT MAX(TMP_ID) INTO MAXCNT FROM P_TMP_REINDEX;

WHILE I <= MAXCNT DO
SELECT  IDXNAME, TABNAME , SEEKTIMES,SCANTIMES , DATAROWS INTO P_TABNAME,P_IDXNAME,P_SEEKTIMES,P_SCANTIMES,P_DATAROWS FROM P_TMP_REINDEX WHERE TMP_ID= I ;
BEGIN
LABEL_PRE_ERROR:LOOP
		IF P_SCANTIMES > 0 THEN
			SET P_USAGE_COUNT = P_SEEKTIMES / P_SCANTIMES * 100;
			IF P_USAGE_COUNT > 2 THEN
				 #当索引的使用率大于2%时，需要重整索引
				  SET P_STR=CONCAT(' DBCC  DBREINDEX ("' , P_TABNAME);
                                  SET P_STR=CONCAT(P_STR,'","');
                                  SET P_STR=CONCAT(P_STR,P_IDXNAME);
                                  SET P_STR=CONCAT(P_STR,'");');
                                 SET @SQL = P_STR;

                                  PREPARE SL FROM @SQL ;
                                  EXECUTE SL;
                                  DEALLOCATE PREPARE SL;

			 END IF;
		END IF;

         IF  P_ERROR<>0 THEN
			 SET P_EXCEPTION_NUMBER  = P_EXCEPTION_NUMBER - 1;

			  IF(P_EXCEPTION_NUMBER <=0 ) THEN
				LEAVE LABEL_PRE_ERROR	;
                          ELSE
                               ITERATE LABEL_PRE_ERROR;
		          END IF;
        END IF;
END LOOP;
  END;
SET I=I+1;
END WHILE;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_ATTMRTASK
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_ATTMRTASK`(P_LOGINID VARCHAR(11),
P_ATTIME BIGINT)
BEGIN
	SELECT A.ID,A.LOGINID,A.TASKID,A.BMTMSGID,A.ATTIME,A.VALIDTIME 
	FROM ATTIME_TASK A 
	INNER JOIN BATCH_MT_REQ B ON A.BMTMSGID=B.BMTMSGID 
	WHERE A.LOGINID=P_LOGINID AND A.ATTIME<=P_ATTIME  AND B.ERRORCODE='ACCEPTD';
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MMS_QUEUE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MMS_QUEUE`(
PISPGATE VARCHAR(21),
PIUNICOM TINYINT
)
BEGIN
DECLARE PIATTIME  BIGINT;
SET PIATTIME=DATE_FORMAT(NOW(),'%Y%m%d%H%i%S') ;
SELECT ID,PTMSGID,USERMSGID,TMPLID,UID,DESTUID,LOGINUID,ECID,TASKID
,PHONECOUNT,TOTALCOUNT,DEALSTATUS,JTYPE,FEEFLAG,RETFLAG,SPLITFLAG,SENDLEVEL
,MSGFMT,MSGTYPE,TPPID,TPUDHI,PKNUMBER,PKTOTAL,LONGMSGSEQ,PASSTHROUGH,SENDSTATUS
,USERID,SVRTYPE,SPGATE,CPNO,ORDERCPNO,PHONE,MSGTITLE,MESSAGE,SENDTIME,UNICOM
,ATTIME,VALIDTIME,MODULEID,SA,P1,P2,P3,P4
FROM MMS_LEVEL_QUEUE 
WHERE SPGATE=PISPGATE AND (SENDSTATUS=1 OR SENDSTATUS=2) AND UNICOM=PIUNICOM AND ATTIME<PIATTIME ORDER BY SENDLEVEL,ID LIMIT 0,1;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MMSSNDQUE
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MMSSNDQUE`()
BEGIN
  SELECT ID,TASKID,SVRTYPE,USERID,USERPWD,CPNO,SENDLEVEL,PHONES,SENDTIME,
  EXPIRETIME,MSGTYPE,DEALSTATUS,DEALTIME,CREATETIME,
  MSGTITLE,MSGCONTENT,RESOURCEID,RESERVER1,RESERVER2,RESERVER3,RESERVER4 FROM MMS_SEND_QUEUE
  WHERE DEALSTATUS=0 AND GETDATE()>=SENDTIME
  AND NOW()<=EXPIRETIME ORDER BY SENDLEVEL DESC LIMIT 0,2000;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MOTASK
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_RD_MOTASK`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MOTASK`(P_UID INT,
	P_MAXRESNDCNT INT,
	P_MAXREADCNT INT)
BEGIN

    SELECT ID,UID,ORGUID,ECID,PTMSGID,SPNUMBER,USERID,SERVICEID,MSGFMT,TP_PID,PHONE,MSGCONTENT,TP_PID,TP_UDHI,RESENDCNT,PKNUMBER,PKTOTAL,LONGMSGSEQ,PTNOTICE,CMDID,DELIVERTIME FROM MO_TASK
    WHERE UID= P_UID AND SENDSTATUS=1 AND RESENDCNT<=P_MAXRESNDCNT LIMIT P_MAXREADCNT;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MOWAITA
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MOWAITA`(P_USERUID INT,
	P_LOGINUID INT,
	P_MAXREADCNT INT)
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    SET P_SQLSTR = 'SELECT ID,ECID,PTMSGID,USERID,SPNUMBER,MESSAGE,PHONE,DELIVERTIME ,SPGATE,CPNO,UNICOM,CMDID FROM MO_WAIT_A ';
    SET P_SQLSTR = CONCAT(P_SQLSTR,' WHERE USERUID=', P_USERUID,' AND LOGINUID=',P_LOGINUID,' LIMIT 0,',P_MAXREADCNT);

    SET @SQL = P_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MOWAITA_PUSH
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MOWAITA_PUSH`( 
	PIUSERUID INT,
	PIMAXREADCNT INT,
  PISPTYPE INT ##=1 
)
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    SET P_SQLSTR = 'SELECT MO.ID AS ID,MO.ECID AS ECID,MO.PTMSGID AS PTMSGID,MO.USERID AS USERID,
    CONCAT(RTRIM(TB.SPGATE),RTRIM(TB.CPNO)) AS SPNUMBER,SUBSTRING(MO.SPNUMBER,CHAR_LENGTH(CONCAT(RTRIM(TB.SPGATE),RTRIM(TB.CPNO)))+1,CHAR_LENGTH(MO.SPNUMBER)-CHAR_LENGTH(CONCAT(RTRIM(TB.SPGATE),RTRIM(TB.CPNO)))) AS CPNO,
    MO.MESSAGE AS MESSAGE,MO.PHONE AS PHONE,MO.DELIVERTIME AS DELIVERTIME FROM MO_WAIT_A MO
    INNER JOIN GT_PORT_USED TB ON TB.USERID=MO.USERID AND LOCATE(CONCAT(RTRIM(TB.SPGATE),RTRIM(TB.CPNO)),
    RTRIM(MO.SPNUMBER),1)=1 AND (TB.ROUTEFLAG=2 OR TB.ROUTEFLAG=0) AND TB.SPISUNCM=MO.UNICOM WHERE MO.USERUID=';
    SET P_SQLSTR = CONCAT(P_SQLSTR,PIUSERUID,' AND TB.GATETYPE=', PISPTYPE,' LIMIT 0,',PIMAXREADCNT);

    SET @SQL = P_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MTLVLQUE
-- ----------------------------

DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MTLVLQUE`(P_DESTUID INT,
	P_SENDLEVEL INT,
	P_MAXREADCNT INT,
	P_STRUID VARCHAR(4000),P_CURTIME BIGINT)
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    SET P_CURTIME = IFNULL(P_CURTIME, 0);
    SET P_SQLSTR = 'SELECT ID,UID,DESTUID,LOGINUID,ECID,TASKID,FEEFLAG,USERID,SPGATE,CPNO,PHONE,PTMSGID,RETFLAG,TPUDHI,PKNUMBER,PKTOTAL,SENDSTATUS,';
    SET P_SQLSTR = CONCAT(P_SQLSTR,'PHONECOUNT,SPLITFLAG,SENDLEVEL,LONGMSGSEQ,MSGFMT,MESSAGE,SENDTIME AS RECVMTTIME,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA  FROM MT_LEVEL0_QUEUE ');
    SET P_SQLSTR = CONCAT(P_SQLSTR,'WHERE DESTUID=', P_DESTUID,' AND UID NOT IN (',P_STRUID,') AND (ATTIME<=',P_CURTIME,' OR ATTIME<0) ');
    SET P_SQLSTR = CONCAT(P_SQLSTR,' AND SENDLEVEL=',P_SENDLEVEL,' LIMIT ',P_MAXREADCNT);

    SET @SQL = P_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MTTASKRESD
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MTTASKRESD`(P_MAXRESNDCNT INT,
	P_STRMSGID VARCHAR(4000))
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    SET P_SQLSTR = 'SELECT ID,UID,ECID,TASKID,FEEFLAG,USERID,SPGATE,CPNO,PHONE,PTMSGID,RETFLAG,';
    SET P_SQLSTR = CONCAT(P_SQLSTR,'PKNUMBER,PKTOTAL,SENDSTATUS,SENDLEVEL,TPUDHI,LONGMSGSEQ,MSGFMT,MESSAGE,RECVMTTIME,SENDTYPE,BATCHID,AREACODE  FROM MT_TASK ');
    SET P_SQLSTR = CONCAT(P_SQLSTR,'WHERE PTMSGID IN(',P_STRMSGID,') AND RESENDCNT<',P_MAXRESNDCNT);

    SET @SQL = P_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;


DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MTTASKRPT`(PIPTMSGID1 BIGINT,PIUID INT)
TOP:BEGIN
DECLARE  PICOUNT INT;
DECLARE  PICNTTB INT;
DECLARE PISQLSTR VARCHAR(256);
DECLARE PIDBNAME VARCHAR(32);
DECLARE PIMONTH INT;
DECLARE PICURYM INT;
DECLARE PIPTMSGID BIGINT;

SET PICOUNT = 0;
SET PIDBNAME = 'MTTASK';
SET PIPTMSGID=PIPTMSGID1;

#创建临时表
CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTRPT(ICOUNT INT);
CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTRPT1(SPNUMBER VARCHAR(21),PHONE VARCHAR(21),
  DONEDATE CHAR(10),ERRORCODE CHAR(7),RECVRPTTIME VARCHAR(22));
  SELECT COUNT(*) INTO PICOUNT  FROM MT_TASK WHERE PTMSGID=PIPTMSGID AND UID=PIUID;
  IF PICOUNT > 0 THEN ###2
     ##从实时表中查询需要的数据
     SELECT CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) AS SPNUMBER,PHONE,DONEDATE,ERRORCODE,
     SENDTIME AS RECVRPTTIME FROM MT_TASK WHERE PTMSGID=PIPTMSGID AND UID=PIUID;
  ELSE
  BEGIN
     SET PICURYM = CAST(DATE_FORMAT(NOW(),'%Y%m') AS SIGNED);
     SET  PIDBNAME = CONCAT('MTTASK',CAST(PICURYM AS CHAR(6)));
     SET PICOUNT = 0;
     ##从当月历史表中查询需要的数据
     SET PISQLSTR = CONCAT('INSERT INTO P_TMP_MTRPT SELECT  COUNT(*)  FROM ',PIDBNAME,' WHERE PTMSGID=',CAST(PIPTMSGID AS CHAR(20)));
     SET @SQL =PISQLSTR;
     PREPARE SL FROM @SQL ;
     EXECUTE SL ;         
     DEALLOCATE PREPARE SL;
     SELECT ICOUNT INTO PICOUNT FROM P_TMP_MTRPT;
     DELETE FROM P_TMP_MTRPT;
     IF PICOUNT > 0 THEN###1
     BEGIN
     SET PISQLSTR = CONCAT('SELECT CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) AS SPNUMBER,PHONE,DONEDATE,ERRORCODE,
SENDTIME AS RECVRPTTIME FROM ',PIDBNAME,' WHERE PTMSGID=',CAST(PIPTMSGID AS CHAR(20)));
     SET @SQL =PISQLSTR;
     PREPARE SL FROM @SQL ;
     EXECUTE SL ;         
     DEALLOCATE PREPARE SL;
     LEAVE TOP;
     END;
     ELSE
     BEGIN
       SET PIMONTH = 1;
      ##遍历最近三个月的历史表，查询需要的数据
       WHILE PIMONTH <3 DO
          SET PICURYM =PERIOD_ADD(DATE_FORMAT(NOW(),'%Y%m'), -PIMONTH );
          SET PIDBNAME =CONCAT( 'MTTASK', CAST(PICURYM AS CHAR(6)));
          ##判断表是否存在，存在的话在其中查询需要的数据
          SELECT COUNT(TABLE_NAME) INTO PICNTTB FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME=PIDBNAME;
          IF  PICNTTB >0 THEN
               SET PICOUNT = 0;
               SET  PISQLSTR = CONCAT('INSERT INTO P_TMP_MTRPT SELECT  COUNT(*) FROM ',PIDBNAME,' WHERE PTMSGID=',CAST(PIPTMSGID AS CHAR(20)));
	       SET @SQL =PISQLSTR;
               PREPARE SL FROM @SQL ;
               EXECUTE SL ;         
               DEALLOCATE PREPARE SL;
               SELECT ICOUNT  into PICOUNT FROM P_TMP_MTRPT;
               DELETE FROM P_TMP_MTRPT;
               IF PICOUNT > 0 THEN
                   SET PISQLSTR = CONCAT('SELECT CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) AS SPNUMBER,PHONE,DONEDATE,ERRORCODE,
                   SENDTIME AS RECVRPTTIME FROM ',PIDBNAME,' WHERE PTMSGID=',CAST(PIPTMSGID AS CHAR(20)));
                   SET @SQL =PISQLSTR;
                   PREPARE SL FROM @SQL ;
                   EXECUTE SL ;         
                   DEALLOCATE PREPARE SL;
                   LEAVE TOP;##当查询到所需要的数据时，直接退出
               END IF;
            END IF; ##END OF   IF  PICNTTB >0 THEN
                SET PIMONTH = PIMONTH+1;
       END WHILE;
     END;
     END IF;## END OF  1
    SELECT SPNUMBER, PHONE, DONEDATE, ERRORCODE, RECVRPTTIME FROM P_TMP_MTRPT1;
  END;
  END IF; ##END OF 2
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MTTASKSUPP
-- ----------------------------

DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_RD_MTTASKSUPP`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MTTASKSUPP`(P_OLDMSGID BIGINT,
	P_NEWMSGID BIGINT,
	P_SRCUID INT,
	P_SRCUSRID VARCHAR(11),
	P_SRCSPGATE VARCHAR(21),
	P_SRCSPNUMBER VARCHAR(21),
	P_DESTUID INT,
	P_DESTUSRID VARCHAR(11),
	P_DESTSPGATE VARCHAR(21),
	P_DESTSPNUMBER VARCHAR(21),
	P_DESTFEEFLAG INT,
	P_SPLITLEN TINYINT UNSIGNED,
	P_MULTILEN1 TINYINT UNSIGNED,
	P_MULTILEN2 TINYINT UNSIGNED,
	P_NEWSIGNLEN TINYINT UNSIGNED,
	P_OLDSIGNLEN TINYINT UNSIGNED,
	P_SIGNATURE VARCHAR(20),
  P_NEWSIGNPOS INT,
	P_OLDSIGNPOS INT,
	P_ENSPLITLEN INT, ##英文短信单条长度，小于等于0标识不支持英文短信
  P_ENMULTILEN1 INT, ##英文长短信拆分长度
  P_ENMULTILEN2 INT, ##英文长短信最后一条长度
  P_NEWENSIGNLEN INT, ##补发英文签名长度
  P_OLDENSIGNLEN INT, ##原英文签名长度
  P_ENSIGNATURE VARCHAR(20)##英文签名
	)
BEGIN
	DECLARE P_SENDNUM INT;
	DECLARE P_PKTOTAL INT;
	DECLARE P_PKNUM	 INT;
	DECLARE P_INITMSGID BIGINT;
	DECLARE P_SINGLEMSG VARCHAR(720);
	DECLARE P_LONGMSG VARCHAR(3000);
	DECLARE P_TOTALCNT INT;
	DECLARE P_LONGMSGLEN INT;
	DECLARE P_ECID INT;
	DECLARE P_PHONE VARCHAR(21);
	DECLARE P_SENDLEVEL TINYINT UNSIGNED;
	DECLARE P_TASKID INT;
	DECLARE P_RECVMTTIME DATETIME;
	DECLARE P_SRCCPNO  VARCHAR(21);
	DECLARE P_DESTCPNO VARCHAR(21);
	DECLARE P_TPUDHI TINYINT UNSIGNED;
	DECLARE P_TPPID TINYINT UNSIGNED;
	DECLARE P_LONGMSGSEQ TINYINT UNSIGNED;
	DECLARE P_MSGFMT TINYINT UNSIGNED;
	DECLARE P_UNICOM TINYINT UNSIGNED;
	DECLARE P_MOBILEAREA INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_USERMSGID BIGINT;
	DECLARE P_SENDTYPE TINYINT UNSIGNED;
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_MODULEID INT;
	DECLARE P_ATTIME BIGINT;
	DECLARE P_VALIDTIME BIGINT;
	DECLARE P_BATCHID BIGINT;
  DECLARE P_AREACODE INT;
  
  DECLARE P_SPLITLEN_V INT;
  DECLARE P_MULTILEN1_V INT;
  DECLARE P_MULTILEN2_V INT;
  DECLARE P_NEWSIGNLEN_V INT;
  DECLARE P_OLDSIGNLEN_V INT;
  DECLARE P_SIGNATURE_V  VARCHAR(22);
  
   DECLARE P_RCOUNT1 INT;
        DECLARE P_RCOUNT2 INT;

	SET P_LONGMSG='';
	SET P_RECVMTTIME = NOW();
	SET P_SRCCPNO  = SUBSTRING(P_SRCSPNUMBER,CHAR_LENGTH(P_SRCSPGATE)+1,CHAR_LENGTH(P_SRCSPNUMBER)-CHAR_LENGTH(P_SRCSPGATE));
	SET P_DESTCPNO = SUBSTRING(P_DESTSPNUMBER,CHAR_LENGTH(P_DESTSPGATE)+1,CHAR_LENGTH(P_DESTSPNUMBER)-CHAR_LENGTH(P_DESTSPGATE));
	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTSUPP(UID INT,PTMSGID BIGINT,ECID INT,TASKID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),PHONE VARCHAR(21),
	SPMSGID BIGINT,RETFLAG TINYINT UNSIGNED,FEEFLAG TINYINT UNSIGNED,PKNUMBER TINYINT UNSIGNED,PKTOTAL TINYINT UNSIGNED,SENDSTATUS TINYINT UNSIGNED,SENDFLAG TINYINT UNSIGNED,RECVFLAG TINYINT UNSIGNED,PASSTHROUGH TINYINT UNSIGNED,
	DONEDATE CHAR(10),ERRORCODE CHAR(7),SENDLEVEL TINYINT UNSIGNED,SENDTYPE TINYINT UNSIGNED,UNICOM TINYINT UNSIGNED,RESENDCNT TINYINT UNSIGNED,RECVMTTIME DATETIME,RECVTIME DATETIME,USERMSGID BIGINT,
	MESSAGE VARCHAR(3000),TPUDHI TINYINT UNSIGNED,LONGMSGSEQ TINYINT UNSIGNED,MSGFMT TINYINT UNSIGNED,MOBILEAREA INT,SVRTYPE VARCHAR(64),TPPID TINYINT UNSIGNED,P1 VARCHAR(64),
	P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,BATCHID BIGINT,AREACODE INT);
  TRUNCATE P_TMP_MTSUPP;

	##取补发帐号的费用
	SELECT SENDNUM INTO P_SENDNUM FROM USERFEE WHERE USERID=P_DESTUSRID;
	##该模式可以把原始MSGID返给用户##用旧的MSGID复制一份记录插入临时表
	INSERT INTO P_TMP_MTSUPP(UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
	SELECT UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
	##只对0,8,15编码和人工实时、批量实时短信进行补发,其他不补发
	FROM MT_TASK WHERE PTMSGID=P_OLDMSGID AND USERID=P_SRCUSRID  AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND LOCATE(P_SRCSPNUMBER,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)),1)=1 ;
        SET   P_RCOUNT1=ROW_COUNT();
        DELETE FROM P_TMP_MTSUPP  WHERE  UNICOM=5 AND MSGFMT=0;
        SET   P_RCOUNT2=ROW_COUNT();
	IF  P_RCOUNT1-P_RCOUNT2>0 THEN

		SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
                          MOBILEAREA,SVRTYPE,TPPID,USERMSGID,SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
                   INTO P_PKTOTAL,P_PKNUM,P_ECID,P_PHONE,P_SENDLEVEL,P_TASKID,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,
                          P_MOBILEAREA,P_SVRTYPE,P_TPPID,P_USERMSGID,P_SENDTYPE,P_P1,P_P2,P_P3,P_P4,P_MODULEID,P_ATTIME,P_VALIDTIME,P_BATCHID,P_AREACODE
		  FROM P_TMP_MTSUPP WHERE PTMSGID=P_OLDMSGID;
     
     ##如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
       SET P_OLDSIGNLEN_V=P_OLDENSIGNLEN;
     ELSE
       SET P_OLDSIGNLEN_V=P_OLDSIGNLEN;
     END IF; ##IF (0 == P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
     ##如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = P_MSGFMT AND 0 < P_ENSPLITLEN) THEN
       SET P_SPLITLEN_V  =P_ENSPLITLEN;
       SET P_MULTILEN1_V =P_ENMULTILEN1;
       SET P_MULTILEN2_V =P_ENMULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWENSIGNLEN;
       SET P_SIGNATURE_V =P_ENSIGNATURE;
     ELSE
       SET P_SPLITLEN_V  =P_SPLITLEN;
       SET P_MULTILEN1_V =P_MULTILEN1;
       SET P_MULTILEN2_V =P_MULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWSIGNLEN;
       SET P_SIGNATURE_V =P_SIGNATURE;
     END IF;
     
		 IF (P_PKTOTAL <= 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)) THEN ##对于非长短信补发的处理
				SET P_LONGMSG='';
				##取短信内容
				SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPP WHERE PTMSGID=P_OLDMSGID;
				##更新替换MSGID
				UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF; ##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,P_LONGMSG);
          END IF;

					##调用插入存储过程
					CALL S_WR_MTTASK(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
				ELSE
					SET P_LONGMSG='';
				END IF;##END OF IF P_LONGMSGLEN > 0
				SET P_PKNUM=1;
			#END IF;##END OF P_PKTOTAL = 1
 /*
		ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2) AND P_TPUDHI=1) THEN ##对标准协议长短信的补发
			SET P_LONGMSG='';
			##取短信内容
			SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPP WHERE PTMSGID=P_OLDMSGID;
			##更新替换MSGID
			UPDATE MT_TASK SET PTMSGID=P_NEWMSGID,RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
			IF (P_PKTOTAL=P_PKNUM) THEN ##如果是最后一条，去掉旧签名，加上新签名
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN; ##减去签名的净长度
				SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
				SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE)	;
			END IF;##END OF IF P_PKTOTAL=P_PKNUM
			SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
			IF P_LONGMSGLEN > 0 THEN
				##调用插入存储过程
				CALL S_WR_MTTASKSR(P_DESTUID,P_OLDMSGID,2,1,P_PKTOTAL,1,P_ECID,
								P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
								P_PHONE,P_DESTFEEFLAG,P_PKNUM,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
								P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,
								P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
			ELSE
				SET P_LONGMSG='';
		  END IF; ##END OF IF P_LONGMSGLEN > 0
		#END IF;## END OF IF P_PKTOTAL > 1
*/
        	ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)  AND P_TPUDHI=0) THEN ##对非标准长短信协议的处理
			SET P_LONGMSG='';
			##没有补发过且通道号跟源通道号相等
			IF EXISTS(SELECT * FROM P_TMP_MTSUPP WHERE PTMSGID=P_OLDMSGID) THEN
				##循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
				##计算起始MSGID
				SET P_INITMSGID = P_OLDMSGID-(P_PKNUM-1)*17179869184;
				SET P_PKNUM = 1;
				WHILE P_PKNUM <= P_PKTOTAL DO
				WHILELABLE:BEGIN
					##取短信内容 ##若长短信中间的某条缺失，则不补发(暂不考虑)
					SELECT MESSAGE INTO P_SINGLEMSG FROM MT_TASK WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					IF P_SINGLEMSG = '' THEN
						SET P_LONGMSG='';
						LEAVE WHILELABLE;
					END IF; ##END OF IF P_SINGLEMSG = ''
					##更新替换MSGID
					UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					##拼接短信内容
					SET P_LONGMSG = CONCAT(P_LONGMSG,P_SINGLEMSG);
					SET P_PKNUM = P_PKNUM+1;
				END WHILELABLE;
				END WHILE;##END OF WHILE P_PKNUM <= P_PKTOTAL
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF;##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,P_LONGMSG);
          END IF;

					##调用插入存储过程
					CALL S_WR_MTTASK(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);

	                   ELSE
		              SET P_LONGMSG='';
		           END IF;##END OF IF P_LONGMSGLEN > 0
		              SET P_PKNUM=1 ;
			END IF; ##END OF IF EXISTS(SELECT COUNT(*) FROM P_TMP_MTSUPP WHERE PTMSGID=P_OLDMSGID AND RESENDCNT<1 AND (CONCAT(RTRIM(SPGATE),RTRIM(CPNO)))=P_SRCSPNUMBER)
		END	IF;##END OF IF P_PKTOTAL > 1
	END IF; ##END OF IF ROWCOUNT()<>0

	SELECT P_DESTUID AS UID,P_NEWMSGID AS PTMSGID,ECID,TASKID,P_DESTUSRID AS USERID,P_DESTSPGATE AS SPGATE,
	P_DESTCPNO AS CPNO,P_PHONE AS PHONE,RETFLAG,P_DESTFEEFLAG AS FEEFLAG,P_PKNUM AS PKNUMBER,P_PKTOTAL AS PKTOTAL,
	SENDSTATUS,1 AS SENDLEVEL,P_RECVMTTIME AS RECVMTTIME,P_LONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
	MOBILEAREA,SVRTYPE,TPPID,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE FROM P_TMP_MTSUPP WHERE P_LONGMSG<>'' ;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MTVFYTASK
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MTVFYTASK`(
)
BEGIN   
    SELECT ID,VERIFYSTATUS,CMDTEXT,PARAMS FROM MT_VERIFY_TASK WHERE DEALSTATUS=1 ORDER BY ID ASC;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_MTWAITA
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_MTWAITA`(P_LOGINUID INT,
	P_MAXREADCNT INT)
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    SET P_SQLSTR = 'SELECT ID,USERUID,USERID,PTMSGID,SPNUMBER,PHONECOUNT,MESSAGE,PHONE,MSGFMT,SENDTIME AS RECVMTTIME,';
    SET P_SQLSTR = CONCAT(P_SQLSTR,'TASKID,SENDLEVEL,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,ATTIME,VALIDTIME,SENDTYPE,BATCHID,TOTALCOUNT  FROM MT_WAIT_A ');
    SET P_SQLSTR = CONCAT(P_SQLSTR,' WHERE SENDSTATUS IN (1,255,8) AND LOGINUID=',P_LOGINUID,' LIMIT ',P_MAXREADCNT);

    SET @SQL = P_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_RD_RPTWAITA_PUSH
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_RPTWAITA_PUSH`(P_USERUID INT,P_MAXREADCNT INT)
BEGIN
       DECLARE P_SQLSTR VARCHAR(4000);
	SET P_SQLSTR = 'SELECT  ID,ECID,PTMSGID,USERID,SPNUMBER,SUBMITTIME,DONETIME,PHONE,ERRORCODE,USERMSGID,MODULEID,RECVTIME
	FROM RPT_WAIT_A WHERE USERUID= ';
       SET P_SQLSTR = CONCAT(P_SQLSTR,P_USERUID,' LIMIT 0,',P_MAXREADCNT);
	SET @SQL = P_SQLSTR;
       PREPARE SL FROM @SQL;
       EXECUTE SL;
      DEALLOCATE PREPARE SL;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_STATREMAIN
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE  IF EXISTS S_STATREMAIN;
CREATE DEFINER=`root`@`%` PROCEDURE `S_STATREMAIN`(P_PICMD INT)
BEGIN
    CASE P_PICMD
  WHEN 100 THEN
  #--汇总MT_LEVEL0_QUEUE中各帐号数据
 #--前端滞留
    SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS LEVEL, UID FROM (SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL0_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL1_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL2_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL3_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL4_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL5_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL6_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL7_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL8_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL9_QUEUE WHERE UID>0) MQ  GROUP BY UID,SENDLEVEL;
  #--后端滞留
  WHEN 110 THEN
    SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS LEVEL, DESTUID AS UID FROM (SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL0_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL1_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL2_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL3_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL4_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL5_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL6_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL7_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL8_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL9_QUEUE WHERE DESTUID>0)  MQ GROUP BY DESTUID,SENDLEVEL;
  #--代理滞留
  #--ELSE IF PICMD=120 
  #--SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS LEVEL, LOGINUID AS UID FROM MT_LEVEL0_QUEUE WHERE LOGINUID>0 AND UID<>LOGINUID GROUP BY LOGINUID,SENDLEVEL;

  #--汇总MT_TIMER_QUEUE中各帐号数据
  #--前端滞留
  WHEN 200 THEN
    SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS LEVEL, UID FROM MT_TIMER_QUEUE WHERE UID>0 GROUP BY UID,SENDLEVEL;
  #--后端滞留
  WHEN 210 THEN
    SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS LEVEL, DESTUID AS UID FROM MT_TIMER_QUEUE WHERE DESTUID>0 GROUP BY DESTUID,SENDLEVEL;
  #--代理滞留
  #--ELSIF PICMD=220 
  #--SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS LEVEL, LOGINUID AS UID FROM MT_TIMER_QUEUE WHERE LOGINUID>0 AND UID<>LOGINUID GROUP BY LOGINUID,SENDLEVEL;

  #--汇总MO_TASK中各帐号数据
 #--前端滞留
  WHEN 300 THEN
   SELECT COUNT(UID) AS REMAINEDNUM, 0 AS LEVEL, UID FROM MO_TASK WHERE SENDSTATUS=1 AND UID>0 AND ORGUID>0 GROUP BY UID;
 # --后端滞留
  WHEN 310 THEN
   SELECT COUNT(UID) AS REMAINEDNUM, 0 AS LEVEL, ORGUID AS UID FROM MO_TASK WHERE SENDSTATUS=1 AND ORGUID>0 GROUP BY ORGUID;

  #--汇总RPT_WAIT_B中各帐号数据
  #--前端滞留
  WHEN 401 THEN
   SELECT COUNT(UID) AS REMAINEDNUM, 1 AS LEVEL, UID FROM RPT_WAIT_B WHERE UID>0 AND ORGUID>0 GROUP BY UID;
  #--后端滞留
  WHEN 411 THEN
   SELECT COUNT(UID) AS REMAINEDNUM, 1 AS LEVEL, ORGUID AS UID FROM RPT_WAIT_B WHERE ORGUID>0 GROUP BY ORGUID;
  
  WHEN 501 THEN
   SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, 0 AS LEVEL,USERUID AS UID FROM MT_WAIT_A WHERE USERUID>0 GROUP BY USERUID;
   
  WHEN 502 THEN
   SELECT SUM(TOTALNUM-SENDNUM) AS REMAINEDNUM, 0 AS LEVEL,USERUID AS UID FROM BATCH_MT_REQ WHERE USERUID>0 GROUP BY USERUID;
   
  ELSE
   SELECT 0 AS REMAINEDNUM, 0 AS LEVEL, 0 AS UID;
    END CASE;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_UPD_ATTMRFLAG
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_UPD_ATTMRFLAG`(
    P_TASKID INT, 
	P_ID INT, 
	P_LOGINID VARCHAR(11),
	P_BMTMSGID BIGINT
)
BEGIN   
    START TRANSACTION;    
        
    UPDATE BATCH_MT_REQ SET ATTIMEFLAG=0 WHERE BMTMSGID=P_BMTMSGID AND LOGINID=P_LOGINID;   

    IF ROW_COUNT()> 0 THEN
       DELETE FROM ATTIME_TASK WHERE ID=P_ID;
    END IF;
    
    COMMIT;   
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_RD_BATMTREQ`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_RD_BATMTREQ`(
P_LOGINID VARCHAR(11),
P_DOWNLOADFLAG TINYINT UNSIGNED
)
BEGIN
IF P_DOWNLOADFLAG=0 THEN
    SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,
	  TASKID,TITLE,MSG,MSGFMT,REMOTEURL,TRIM(LOCALPATH) AS LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TOTALNUM,SENDNUM,TASKTYPE,BATCHID FROM BATCH_MT_REQ
	  WHERE LOGINID=P_LOGINID AND SENDSTATUS=3 AND ERRORCODE='ACCEPTD' AND TRIM(LOCALPATH)='' ORDER BY SENDLEVEL LIMIT 0,1000;
ELSE
    SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,
	  TASKID,TITLE,MSG,MSGFMT,REMOTEURL,TRIM(LOCALPATH) AS LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TOTALNUM,SENDNUM,TASKTYPE,BATCHID FROM BATCH_MT_REQ
	  WHERE LOGINID=P_LOGINID AND (SENDSTATUS=4  OR SENDSTATUS=5) AND ATTIMEFLAG=0 AND ERRORCODE='ACCEPTD' AND TRIM(LOCALPATH)<>'' ORDER BY SENDLEVEL LIMIT 0,1000; 
END IF;
END;;
DELIMITER ;



DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_UPD_BATMTREQ`(
   PIUSERID       VARCHAR(11),
   PIUSERUID      INT,
   PILOGINID      VARCHAR(11),
   PISENDSTATUS   INT,
   PITASKID       INT,
   PIMSGID        BIGINT,
   PILOCALPATH    VARCHAR(256),
   PIERRORCODE    VARCHAR(7),
   PIBMTMSGID     BIGINT,
   PITOTALNUM     INT,
   PISENDNUM       INT
 )
BEGIN
        DECLARE PIROWCOUNT    INT DEFAULT 0;
##异常代码
        DECLARE P_ERR  INT DEFAULT 0;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
 IF PISENDSTATUS=0 THEN
       UPDATE BATCH_MT_REQ SET SENDSTATUS=PISENDSTATUS,SENDNUM=PISENDNUM,ERRORCODE=PIERRORCODE,SENDTIME=NOW()
       WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       SET PIROWCOUNT=ROW_COUNT();
       START TRANSACTION;
       SAVEPOINT A;
       INSERT INTO BATCH_MT_REQ_HIS  SELECT * FROM BATCH_MT_REQ WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID ;
       DELETE FROM BATCH_MT_REQ WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       DELETE FROM ATTIME_TASK WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       IF P_ERR=1 THEN
          ROLLBACK TO SAVEPOINT A;
       ELSE
          COMMIT;
       END IF;
  ELSEIF PISENDSTATUS=2  THEN 
       UPDATE BATCH_MT_REQ SET SENDSTATUS=PISENDSTATUS,ERRORCODE=PIERRORCODE,SENDTIME=NOW()
       WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       SET PIROWCOUNT=ROW_COUNT();
  ELSEIF PISENDSTATUS=3 THEN
       UPDATE BATCH_MT_REQ SET USERUID=PIUSERUID,SENDSTATUS=PISENDSTATUS,ERRORCODE=PIERRORCODE,MSGID=PIMSGID,SENDTIME=NOW()
       WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       SET PIROWCOUNT=ROW_COUNT();
  ELSEIF PISENDSTATUS=4 THEN
       UPDATE BATCH_MT_REQ SET SENDSTATUS=PISENDSTATUS,LOCALPATH=PILOCALPATH,SENDNUM=PISENDNUM,SENDTIME=NOW(),TOTALNUM=PITOTALNUM
       WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID AND SENDSTATUS=3;
       SET PIROWCOUNT=ROW_COUNT();
       IF PIROWCOUNT <> 1 THEN
       START TRANSACTION;
       SAVEPOINT A;
       UPDATE BATCH_MT_REQ SET SENDSTATUS=0,ERRORCODE='UPDFAIL',SENDTIME=NOW() WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       INSERT INTO BATCH_MT_REQ_HIS  SELECT * FROM BATCH_MT_REQ WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID ;
       DELETE FROM BATCH_MT_REQ WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       DELETE FROM ATTIME_TASK WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       IF P_ERR=1 THEN
          ROLLBACK TO SAVEPOINT A;
       ELSE
          COMMIT;
       END IF;
       END IF;
  ELSEIF PISENDSTATUS=5 THEN
       UPDATE BATCH_MT_REQ SET SENDSTATUS=PISENDSTATUS,SENDNUM=PISENDNUM,SENDTIME=NOW()
       WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID;
       SET PIROWCOUNT=ROW_COUNT();
  ELSEIF PISENDSTATUS=6 THEN
       UPDATE BATCH_MT_REQ SET ERRORCODE=PIERRORCODE,SENDNUM=PISENDNUM,SENDTIME=NOW()
       WHERE UPPER(LOGINID)=UPPER(PILOGINID) AND BMTMSGID=PIBMTMSGID; 
       SET PIROWCOUNT=ROW_COUNT();
  ELSE
      SET PIROWCOUNT=0;
 END IF;
SELECT PIROWCOUNT AS UPDROWCOUNT;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_UPD_MMS_MTRPT
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_UPD_MMS_MTRPT`(
	PISENDSTATUS INT,
	PIPTMSGID BIGINT,
	PISPMSGID BIGINT,
	PIRECVFLAG INT,
	PIERRORCODE VARCHAR(7),
	PISUBMITDATE VARCHAR(10),
	PIDONEDATE VARCHAR(10),
	PIRECVTIME DATETIME  ##=''
)
BEGIN
	SET PIRECVTIME=NOW();
	UPDATE MMS_TASK SET SENDSTATUS = PISENDSTATUS, RECVFLAG = PIRECVFLAG, ERRORCODE = PIERRORCODE, DONEDATE = PIDONEDATE, RECVTIME = PIRECVTIME
	WHERE PTMSGID = PIPTMSGID AND SENDSTATUS<>0;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_UPD_MONINFO
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_UPD_MONINFO`(
      P_GATEID INT, 
      P_SPGATE VARCHAR(21), 
      P_USRID VARCHAR(11), 
      P_ONLINESTATUS INT, 
      P_TOTALRPTSEND INT, 
      P_TOTALMOSEND INT, 
      P_HAVESENDMO INT, 
      P_HAVESENDRPT INT, 
      P_RECVMT INT, 
      P_REMAINEDMT INT, 
      P_TIMERSENDMT INT, 
      P_REMAINEDRPT INT, 
      P_REMAINEDMO INT, 
      P_RECVSPEED INT
)
BEGIN   
    IF NOT EXISTS(SELECT GATEID FROM MR_SPGATE_WATCH WHERE USRID=P_USRID AND SPGATE=P_SPGATE) THEN
		INSERT INTO MR_SPGATE_WATCH(GATEID,SPGATE,USRID,ONLINESTATUS,TOTALRPTSEND,NUMRPT,
		TOTALMOSEND,NUMMO,HAVESENDMO,HAVESENDRPT,RECVMT,NUMMT,REMAINEDMT,TIMERSENDMT,REMAINEDRPT,REMAINEDMO,RECVSPEED)
		VALUES(P_GATEID,P_SPGATE,P_USRID,P_ONLINESTATUS,P_TOTALRPTSEND,P_TOTALRPTSEND,P_TOTALMOSEND,
		P_TOTALMOSEND,P_HAVESENDMO,P_HAVESENDRPT,P_RECVMT,P_RECVMT,P_REMAINEDMT,P_TIMERSENDMT,P_REMAINEDRPT,P_REMAINEDMO,P_RECVSPEED);
	ELSE			
		UPDATE MR_SPGATE_WATCH SET SPGATE=P_SPGATE,USRID=P_USRID,ONLINESTATUS=P_ONLINESTATUS,TOTALRPTSEND=P_TOTALRPTSEND,NUMRPT=P_TOTALRPTSEND,
		TOTALMOSEND=P_TOTALMOSEND,NUMMO=P_TOTALMOSEND,HAVESENDMO=P_HAVESENDMO,HAVESENDRPT=P_HAVESENDRPT,RECVMT=P_RECVMT,NUMMT=P_RECVMT,	
		REMAINEDMT=P_REMAINEDMT,TIMERSENDMT=P_TIMERSENDMT,REMAINEDRPT=P_REMAINEDRPT,REMAINEDMO=P_REMAINEDMO,RECVSPEED=P_RECVSPEED
		WHERE USRID=P_USRID AND SPGATE=P_SPGATE;
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_UPD_MOTASK
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_UPD_MOTASK`(P_PTMSGID BIGINT,
	P_SENDSTATUS INT,
	P_UID INT,
	P_ECID INT,
	P_USERID VARCHAR(11))
BEGIN
    DECLARE P_RESENDCNT INT;
    /*IF P_SENDSTATUS=1 THEN
		SET P_RESENDCNT=1;
	ELSE
		SET P_RESENDCNT=0;
    END IF;*/
    SET P_RESENDCNT=0;

    IF P_UID=0 AND P_ECID=0 AND P_USERID='' THEN
		UPDATE MO_TASK SET SENDSTATUS=P_SENDSTATUS,RESENDCNT=RESENDCNT+P_RESENDCNT WHERE PTMSGID=P_PTMSGID;
	ELSE
		UPDATE MO_TASK SET SENDSTATUS=P_SENDSTATUS,UID=P_UID,ECID=P_ECID,USERID=P_USERID,RESENDCNT=RESENDCNT+P_RESENDCNT WHERE PTMSGID=P_PTMSGID;
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_UPD_MTRPT
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_UPD_MTRPT`(P_SENDSTATUS INT,
	P_PTMSGID BIGINT,
	P_SPMSGID BIGINT,
	P_RECVFLAG INT,
	P_ERRORCODE CHAR(7),
	P_SUBMITDATE CHAR(10),
	P_DONEDATE CHAR(10),
	P_RECVTIME DATETIME,P_SPID VARCHAR(11))
BEGIN
    SET P_RECVTIME=NOW();
	IF P_SENDSTATUS=3 THEN
		UPDATE MT_TASK SET SENDSTATUS = P_SENDSTATUS, RECVFLAG = P_RECVFLAG, ERRORCODE = P_ERRORCODE, DONEDATE = P_DONEDATE, RECVTIME = P_RECVTIME, SPID = P_SPID
		WHERE PTMSGID = P_PTMSGID AND SENDSTATUS=2;
	ELSEIF P_SENDSTATUS=5 THEN
		UPDATE MT_TASK SET SENDSTATUS = P_SENDSTATUS, RECVFLAG = P_RECVFLAG, ERRORCODE = P_ERRORCODE, DONEDATE = P_DONEDATE, RECVTIME = P_RECVTIME, SPID = P_SPID
		WHERE PTMSGID = P_PTMSGID AND SENDSTATUS<>0;
	ELSE
		UPDATE MT_TASK SET SENDSTATUS = P_SENDSTATUS, RECVFLAG = P_RECVFLAG, ERRORCODE = P_ERRORCODE, DONEDATE = P_DONEDATE, RECVTIME = P_RECVTIME, SPID = P_SPID
		WHERE PTMSGID = P_PTMSGID AND SENDSTATUS<>0;
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_UPD_MTTASK
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_UPD_MTTASK`(P_PTMSGID BIGINT,
	P_SPMSGID BIGINT,
	P_SENDSTATUS INT,
	P_SENDFLAG INT,P_SENDRPTTM VARCHAR(35))
BEGIN
	DECLARE P_SENDRPTTIME DATETIME;
	IF RTRIM(IFNULL(P_SENDRPTTM,''))='' THEN
		SET P_SENDRPTTIME = NOW();
	ELSE
		SET P_SENDRPTTIME = P_SENDRPTTM;
	END IF;

    IF P_SENDSTATUS=8  THEN
		-- 10:表示该条短信的状态报告没有返回给用户
		UPDATE MT_TASK SET SENDFLAG = 10,SENDRPTTIME=P_SENDRPTTIME WHERE PTMSGID = P_PTMSGID;
	ELSEIF P_SENDSTATUS=9 THEN
		-- 11:表示该条短信的状态报告被强制修改为DELIVRD后返回给用户
		UPDATE MT_TASK SET SENDFLAG = 11,SENDRPTTIME=P_SENDRPTTIME  WHERE PTMSGID = P_PTMSGID;
	ELSEIF P_SENDSTATUS = 3 THEN
		-- MT成功发级行业网关
		UPDATE MT_TASK SET SENDSTATUS=P_SENDSTATUS,SENDTIME=P_SENDRPTTIME  WHERE PTMSGID = P_PTMSGID;
	ELSE
		UPDATE MT_TASK SET SENDSTATUS = P_SENDSTATUS,SENDRPTTIME=P_SENDRPTTIME  WHERE PTMSGID = P_PTMSGID;
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_UPD_MTVFYTASK
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_UPD_MTVFYTASK`(
    P_UID BIGINT
)
BEGIN   
    UPDATE MT_VERIFY_TASK SET DEALSTATUS=0 WHERE ID=P_UID;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_BATMTREQ
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_BATMTREQ`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_BATMTREQ`(P_USERID VARCHAR(11),
	P_LOGINID VARCHAR(11),
	P_USERUID INT,
	P_SERVICETYPE VARCHAR(10),
	P_SENDTYPE TINYINT UNSIGNED,
	P_MSGFMT TINYINT UNSIGNED,
	P_REMOTEURL VARCHAR(256),
	P_SENDSTATUS TINYINT UNSIGNED,
	P_RECVTIME DATETIME,
	P_MSG VARCHAR(3000)  CHARSET 'GBK',
	P_TASKID INT,
	P_TITLE VARCHAR(100),
	P_SENDLEVEL TINYINT UNSIGNED,
	P_ATTIME CHAR(14),
	P_VALIDTIME CHAR(14),
	P_MSGID BIGINT,
	P_LOCALPATH VARCHAR(256),
	P_ERRORCODE CHAR(7),
	P_I64CURTIME BIGINT, 
	P_I64ATTIME BIGINT,
	P_BMTMSGID BIGINT,
	P_SA VARCHAR(21),
	P_SVRTYPE VARCHAR(64),
	P_P1 VARCHAR(64),
	P_P2 VARCHAR(64),
	P_P3 VARCHAR(64),
	P_P4 VARCHAR(64),
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_RETFLAG INT,
	P_TASKTYPE INT,
	P_BATCHID BIGINT)
BEGIN
    	DECLARE P_ATTIMEFLAG INT;
	SET P_ATTIMEFLAG=0;
	SET P_RECVTIME=NOW();
  	IF P_I64CURTIME < P_I64ATTIME THEN
		SET P_ATTIMEFLAG=1;
    	END IF;

	IF NOT EXISTS(SELECT ID FROM BATCH_MT_REQ WHERE LOGINID=P_LOGINID AND BMTMSGID=P_BMTMSGID) THEN
		INSERT INTO BATCH_MT_REQ(BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,MSGFMT,REMOTEURL,SENDSTATUS,MSGID,TASKID,TITLE,MSG,LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,ERRORCODE,RECVTIME,ATTIMEFLAG,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TASKTYPE,BATCHID)
		VALUES(P_BMTMSGID,P_USERID,P_LOGINID,P_USERUID,P_SERVICETYPE,P_SA,P_SENDTYPE,P_MSGFMT,P_REMOTEURL,P_SENDSTATUS,P_MSGID,P_TASKID,P_TITLE,P_MSG,P_LOCALPATH,P_SENDLEVEL,P_ATTIME,P_VALIDTIME,P_ERRORCODE,P_RECVTIME,P_ATTIMEFLAG,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_RETFLAG,P_TASKTYPE,P_BATCHID);
	END IF;

    	IF P_ATTIMEFLAG=1 THEN
		IF NOT EXISTS(SELECT TASKID FROM ATTIME_TASK WHERE LOGINID=P_LOGINID AND BMTMSGID=P_BMTMSGID) THEN
			INSERT INTO ATTIME_TASK(LOGINID,BMTMSGID,TASKID,ATTIME,VALIDTIME) VALUES(P_LOGINID,P_BMTMSGID,P_TASKID,P_I64ATTIME,P_I64CURTIME);
		ELSE
			UPDATE ATTIME_TASK SET ATTIME=P_I64ATTIME,VALIDTIME=P_I64CURTIME WHERE LOGINID=P_LOGINID AND BMTMSGID=P_BMTMSGID;
        END IF;
	END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MMS_MO
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MMS_MO`(
PIPTMSGID BIGINT,
PIUID INT,
PIORGUID INT,
PIECID INT,

PIUNICOM TINYINT,
PIPTNOTICE TINYINT,
PIRESENDCNT TINYINT,
PISENDSTATUS TINYINT,

PIMSGFMT TINYINT,
PIMSGTYPE TINYINT,
PITP_PID TINYINT,
PITP_UDHI TINYINT,
PIPKNUMBER TINYINT,
PIPKTOTAL TINYINT,
PILONGMSGSEQ TINYINT UNSIGNED,
PIPASSTHROUGH TINYINT,

PIUSERID VARCHAR(11),
PISERVICEID VARCHAR(50),
PISPGATE VARCHAR(21),
PISPNUMBER VARCHAR(21),
PIPHONE VARCHAR(21),
PIMSGTITLE VARCHAR(200),
PIMSGCONTENT VARCHAR(3000),
PIDELIVERTIME DATETIME
)
BEGIN
	
SELECT IFNULL(USERID,'') INTO PIUSERID FROM GT_PORT_USED WHERE SPISUNCM=PIUNICOM AND LOCATE(CONCAT(RTRIM(SPGATE),RTRIM(CPNO)), PISPNUMBER, 1)>0 LIMIT 0,1;
SELECT IFNULL(UID,0) INTO PIUID  FROM USERDATA WHERE USERID=PIUSERID;
INSERT INTO MMS_MO(
PTMSGID,UID,ORGUID,ECID,UNICOM,PTNOTICE,RESENDCNT,SENDSTATUS,
MSGFMT,MSGTYPE,TP_PID,TP_UDHI,PKNUMBER,PKTOTAL,LONGMSGSEQ,PASSTHROUGH,
USERID,SERVICEID,SPGATE,SPNUMBER,PHONE,MSGTITLE,MSGCONTENT,DELIVERTIME)
VALUES(
PIPTMSGID,PIUID,PIORGUID,PIECID,PIUNICOM,PIPTNOTICE,PIRESENDCNT,PISENDSTATUS,
PIMSGFMT,PIMSGTYPE,PITP_PID,PITP_UDHI,PIPKNUMBER,PIPKTOTAL,PILONGMSGSEQ,PIPASSTHROUGH,
PIUSERID,PISERVICEID,PISPGATE,PISPNUMBER,PIPHONE,PIMSGTITLE,PIMSGCONTENT,PIDELIVERTIME);

END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MMS_RPT
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MMS_RPT`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MMS_RPT`(
PIPTMSGID BIGINT,
PISPMSGID BIGINT,
PIUSERMSGID BIGINT,

PIUID INT,
PIORGUID INT,
PIECID INT,

PISENDLEVEL TINYINT UNSIGNED,
PIRESENDCNT TINYINT UNSIGNED,

PIUSERID VARCHAR(11),
PISPNUMBER VARCHAR(21),
PIPHONE VARCHAR(21),
PISPMSGID2 VARCHAR(64),	
PIERRORCODE CHAR(7),
PIERRORMSG VARCHAR(256),
PISUBMITTIME CHAR(10),
PIDONEDATE CHAR(10),
PIRECVTIME DATETIME
)
BEGIN
IF NOT EXISTS(SELECT PTMSGID FROM MMS_RPT WHERE PTMSGID=PIPTMSGID) THEN
BEGIN
IF PISPNUMBER=''THEN
SELECT CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) INTO PISPNUMBER FROM MMS_TASK WHERE PTMSGID=PIPTMSGID;
END IF;

INSERT MMS_RPT(
PTMSGID,SPMSGID,USERMSGID,UID,ORGUID,ECID,SENDLEVEL,RESENDCNT,
USERID,SPNUMBER,PHONE,SPMSGID2,ERRORCODE,ERRORMSG,SUBMITTIME,DONEDATE,RECVTIME)	
VALUES(
PIPTMSGID,PISPMSGID,PIUSERMSGID,PIUID,PIORGUID,PIECID,PISENDLEVEL,PIRESENDCNT,
PIUSERID,PISPNUMBER,PIPHONE,PISPMSGID2,PIERRORCODE,PIERRORMSG,PISUBMITTIME,PIDONEDATE,PIRECVTIME);
END;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MMS_TASK
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MMS_TASK`( 
PIPTMSGID BIGINT,
PISPMSGID BIGINT,
PIUSERMSGID BIGINT,
PITMPLID BIGINT,
PIATTIME BIGINT,
PIVALIDTIME BIGINT,

PIUID INT,
PIECID INT,
PITASKID INT,
PIMOBILEAREA INT,
PIMODULEID INT,

PIJTYPE TINYINT,
PIFEEFLAG TINYINT,
PIUNICOM TINYINT,
PIRETFLAG TINYINT,
PISENDTYPE TINYINT,
PISENDLEVEL TINYINT,
PISENDFLAG TINYINT,
PIRECVFLAG TINYINT,	
PIRESENDCNT TINYINT,
PISENDSTATUS TINYINT,

PIMSGFMT TINYINT,
PIMSGTYPE TINYINT,
PITPPID TINYINT,
PITPUDHI TINYINT,
PIPKNUMBER TINYINT,
PIPKTOTAL TINYINT,
PILONGMSGSEQ TINYINT UNSIGNED,
PIPASSTHROUGH TINYINT,

PIUSERID VARCHAR(11),
PISVRTYPE VARCHAR(20),
PISPGATE VARCHAR(21),
PICPNO VARCHAR(21),
PIORDERCPNO VARCHAR(21),

PIPHONE VARCHAR(21),
PIMSGTITLE VARCHAR(720),
PIMESSAGE VARCHAR(3000),
PISPMSGID2 VARCHAR(64),
PIERRORCODE CHAR(7),
PIDONEDATE CHAR(10),

PIP1 VARCHAR(64),
PIP2 VARCHAR(64),
PIP3 VARCHAR(64),
PIP4 VARCHAR(64),

PIRECVMTTIME DATETIME,
PITRANSMTTIME DATETIME,
PISENDTIME DATETIME,
PIRECVTIME DATETIME,
PITRANSRPTTIME DATETIME,
PISENDRPTTIME DATETIME,
PISPID VARCHAR(32)##=''
)
BEGIN
IF NOT EXISTS(SELECT PTMSGID FROM MMS_TASK WHERE PTMSGID=PIPTMSGID)THEN
INSERT MMS_TASK(
PTMSGID,SPMSGID,USERMSGID,TMPLID,ATTIME,VALIDTIME,
UID,ECID,TASKID,MOBILEAREA,MODULEID,
JTYPE,FEEFLAG,UNICOM,RETFLAG,SENDTYPE,SENDLEVEL,SENDFLAG,RECVFLAG,RESENDCNT,SENDSTATUS,
MSGFMT,MSGTYPE,TPPID,TPUDHI,PKNUMBER,PKTOTAL,LONGMSGSEQ,PASSTHROUGH,
USERID,SVRTYPE,SPGATE,CPNO,ORDERCPNO,
PHONE,MSGTITLE,MESSAGE,SPMSGID2,ERRORCODE,DONEDATE,
P1,P2,P3,P4,
RECVMTTIME,TRANSMTTIME,SENDTIME,RECVTIME,TRANSRPTTIME,SENDRPTTIME,SPID)
VALUES(
PIPTMSGID,PISPMSGID,PIUSERMSGID,PITMPLID,PIATTIME,PIVALIDTIME,
PIUID,PIECID,PITASKID,PIMOBILEAREA,PIMODULEID,
PIJTYPE,PIFEEFLAG,PIUNICOM,PIRETFLAG,PISENDTYPE,PISENDLEVEL,PISENDFLAG,PIRECVFLAG,PIRESENDCNT,PISENDSTATUS,
PIMSGFMT,PIMSGTYPE,PITPPID,PITPUDHI,PIPKNUMBER,PIPKTOTAL,PILONGMSGSEQ,PIPASSTHROUGH,
PIUSERID,PISVRTYPE,PISPGATE,PICPNO,PIORDERCPNO,
PIPHONE,PIMSGTITLE,PIMESSAGE,PISPMSGID2,PIERRORCODE,PIDONEDATE,
PIP1,PIP2,PIP3,PIP4,
PIRECVMTTIME,PITRANSMTTIME,PISENDTIME,PIRECVTIME,PITRANSRPTTIME,PISENDRPTTIME,PISPID);
END IF;

END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MOTASK
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MOTASK`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MOTASK`(P_PIUID           INT,
      P_PIPTMSGID       BIGINT,
      P_PISENDSTATUS    INT,
      P_PIMSGFMT        TINYINT UNSIGNED,
      P_PIECID          INT,
      P_PIUSERID        VARCHAR(11),
      P_PISPNUMBER      VARCHAR(21),
      P_PISERVICEID     VARCHAR(10),
      P_PIDELIVERTIME   DATETIME,
      P_PIPHONE         VARCHAR(21),
      P_PIMSGCONTENT    VARCHAR(3000)  CHARSET 'GBK',
      P_PIORGUID        INT,
      P_PISPGATE        VARCHAR(21),
      P_PITPUDHI        TINYINT UNSIGNED,
      P_PITPPID         TINYINT UNSIGNED,
      P_PIPKNUMBER      TINYINT UNSIGNED,
      P_PIPKTOTAL       TINYINT UNSIGNED,
      P_PILONGMSGSEQ    TINYINT UNSIGNED,
      P_PIPTNOTICE      TINYINT UNSIGNED,
      P_PIUNICON        TINYINT UNSIGNED,
      P_PICMDID         INT
      )
BEGIN
    SET P_PIDELIVERTIME=NOW();
	IF NOT EXISTS (SELECT PTMSGID FROM MO_TASK WHERE PTMSGID = P_PIPTMSGID) THEN
	   INSERT INTO MO_TASK(UID,PTMSGID,SPNUMBER,SERVICEID,SENDSTATUS,MSGFMT,DELIVERTIME,PHONE,
	   MSGCONTENT,ECID,USERID,ORGUID,SPGATE,TP_UDHI,TP_PID,PKNUMBER,PKTOTAL,LONGMSGSEQ,PTNOTICE,UNICOM,CMDID)
	   VALUES(P_PIUID,P_PIPTMSGID,P_PISPNUMBER,P_PISERVICEID,P_PISENDSTATUS,P_PIMSGFMT,P_PIDELIVERTIME,P_PIPHONE,P_PIMSGCONTENT,
	   P_PIECID,P_PIUSERID,P_PIORGUID,P_PISPGATE,P_PITPUDHI,P_PITPPID,P_PIPKNUMBER,P_PIPKTOTAL,P_PILONGMSGSEQ,P_PIPTNOTICE,P_PIUNICON,P_PICMDID);
    END IF;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MOWAITA
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MOWAITA`(P_ECID INT,
	P_USERUID INT,
	P_LOGINUID INT,
	P_PTMSGID BIGINT,
	P_USERID VARCHAR(11),
	P_PHONE VARCHAR(21),
	P_SPNUMBER VARCHAR(21),
	P_DELIVERTIME DATETIME,
	P_MESSAGE VARCHAR(3000) CHARSET 'GBK',
	P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_UNICOM TINYINT UNSIGNED,
	P_CMDID INT
	)
BEGIN
    SET P_DELIVERTIME=NOW();
	IF P_USERID='' THEN
		SELECT USERID,SPNUMBER INTO P_USERID,P_SPNUMBER FROM MO_TASK WHERE PTMSGID=P_PTMSGID;
	END IF;

	IF NOT EXISTS(SELECT PTMSGID FROM MO_WAIT_A WHERE PTMSGID = P_PTMSGID) THEN
		INSERT MO_WAIT_A(ECID,USERUID,LOGINUID,PTMSGID,USERID,SPNUMBER,PHONE,DELIVERTIME,MESSAGE,SPGATE,CPNO,UNICOM,CMDID)
		VALUES(P_ECID,P_USERUID,P_LOGINUID,P_PTMSGID,P_USERID,P_SPNUMBER,P_PHONE,P_DELIVERTIME,P_MESSAGE,P_SPGATE,P_CPNO,P_UNICOM,P_CMDID);
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MOWAITC
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MOWAITC`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MOWAITC`(
   P_PIUID           INT,
   P_PIPTMSGID       BIGINT,
   P_PISENDSTATUS    INT,
   P_PIMSGFMT        TINYINT UNSIGNED,
   P_PISPNUMBER      VARCHAR(21),
   P_PISERVICEID     VARCHAR(10),
   P_PIDELIVERTIME   DATETIME,
   P_PIPHONE         VARCHAR(21),
   P_PIMSGCONTENT    VARCHAR(3000) CHARSET 'GBK',
   P_PILOGINID       VARCHAR(11),
   P_PITPPID         TINYINT UNSIGNED,
   P_PITPUDHI        TINYINT UNSIGNED,
   P_PIPKNUMBER      TINYINT UNSIGNED,
   P_PIPKTOTAL       TINYINT UNSIGNED,
   P_PIPTNOTICE      TINYINT UNSIGNED
)
BEGIN   
    SET P_PIDELIVERTIME=NOW();
	IF NOT EXISTS(SELECT PTMSGID FROM MO_WAIT_C WHERE PTMSGID = P_PIPTMSGID) THEN
		INSERT INTO MO_WAIT_C(UID, PTMSGID, SPNUMBER, SERVICEID, SENDSTATUS, MSGFMT, DELIVERTIME, PHONE, MSGCONTENT,LOGINID,TP_UDHI,TP_PID,PKNUMBER,PKTOTAL,PTNOTICE) 
		VALUES(P_PIUID, P_PIPTMSGID, P_PISPNUMBER, P_PISERVICEID, P_PISENDSTATUS, P_PIMSGFMT,P_PIDELIVERTIME, P_PIPHONE, P_PIMSGCONTENT,P_PILOGINID,P_PITPUDHI,P_PITPPID,P_PIPKNUMBER,P_PIPKTOTAL,P_PIPTNOTICE);
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MTLVLQUE
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MTLVLQUE`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MTLVLQUE`(P_PIUID        INT,
   P_PIPTMSGID    BIGINT,
   P_PIRETFLAG    TINYINT UNSIGNED,
   P_PIPKTOTAL    TINYINT UNSIGNED,
   P_PIPHONECOUNT INT,
   P_PISENDSTATUS TINYINT UNSIGNED,
   P_PISPLITFLAG  TINYINT UNSIGNED,
   P_PIECID       INT,
   P_PIUSERID     VARCHAR(11),
   P_PISPGATE     VARCHAR(21),
   P_PICPNO       VARCHAR(21),
   P_PIRECVMTTIME DATETIME,
   P_PIPHONE      VARCHAR(3500),
   P_PIMESSAGE    VARCHAR(3000) CHARSET 'GBK',
   P_PIFEEFLAG    TINYINT UNSIGNED,
   P_PIDESTUID    INT,
   P_PILOGINUID   INT,
   P_PIPKNUMBER   TINYINT UNSIGNED,
   P_PISENDLEVEL  TINYINT UNSIGNED,
   P_PITPUDHI     TINYINT UNSIGNED,
   P_PITASKID     INT,
   P_PILONGMSGSEQ TINYINT UNSIGNED,
   P_PIMSGFMT     TINYINT UNSIGNED,
   P_PITOTALCOUNT INT,
   P_SVRTYPE VARCHAR(64),
   P_P1 VARCHAR(64),
   P_P2 VARCHAR(64),
   P_P3 VARCHAR(64),
   P_P4 VARCHAR(64),
   P_USERMSGID BIGINT,
   P_MODULEID INT,
   P_ATTIME BIGINT,
   P_VALIDTIME BIGINT,
   P_SENDTYPE INT,
   P_BATCHID BIGINT,
   P_AREACODE INT)
BEGIN
    IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL0_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL0_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
    END IF;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_MTLVLQUEV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTLVLQUEV1`(P_PIUID        INT,
   P_PIPTMSGID    BIGINT,
   P_PIRETFLAG    TINYINT UNSIGNED,
   P_PIPKTOTAL    TINYINT UNSIGNED,
   P_PIPHONECOUNT INT,
   P_PISENDSTATUS TINYINT UNSIGNED,
   P_PISPLITFLAG  TINYINT UNSIGNED,
   P_PIECID       INT,
   P_PIUSERID     VARCHAR(11),
   P_PISPGATE     VARCHAR(21),
   P_PICPNO       VARCHAR(21),
   P_PIRECVMTTIME DATETIME,
   P_PIPHONE      VARCHAR(3500),
   P_PIMESSAGE    VARCHAR(3000) CHARSET 'GBK',
   P_PIFEEFLAG    TINYINT UNSIGNED,
   P_PIDESTUID    INT,
   P_PILOGINUID   INT,
   P_PIPKNUMBER   TINYINT UNSIGNED,
   P_PISENDLEVEL  TINYINT UNSIGNED,
   P_PITPUDHI     TINYINT UNSIGNED,
   P_PITASKID     INT,
   P_PILONGMSGSEQ TINYINT UNSIGNED,
   P_PIMSGFMT     TINYINT UNSIGNED,
   P_PITOTALCOUNT INT,
   P_SVRTYPE VARCHAR(64),
   P_P1 VARCHAR(64),
   P_P2 VARCHAR(64),
   P_P3 VARCHAR(64),
   P_P4 VARCHAR(64),
   P_USERMSGID BIGINT,
   P_MODULEID INT,
   P_ATTIME BIGINT,
   P_VALIDTIME BIGINT,
   P_SENDTYPE INT,
   P_BATCHID BIGINT,
   P_AREACODE INT,
   P_CUSTID VARCHAR(64),
	 P_EXDATA VARCHAR(64))
BEGIN
    IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL0_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL0_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
    END IF;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MTTASK`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MTTASK`(P_UID INT,	P_PTMSGID BIGINT,
	P_SENDSTATUS TINYINT UNSIGNED,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_SPLITLEN TINYINT UNSIGNED,
	P_MULTILEN1 TINYINT UNSIGNED,
	P_MULTILEN2 TINYINT UNSIGNED,
	P_SIGNLEN TINYINT UNSIGNED,
	P_ECID INT,
	P_USERID VARCHAR(11), P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVMTTIME DATETIME,
	P_MESSAGE VARCHAR(3000)  CHARSET 'GBK',
	P_SHOUJI VARCHAR(3500),
	P_FEEFLAG TINYINT UNSIGNED,
	P_SENDLEVEL TINYINT UNSIGNED,
	P_TASKID INT,
	P_ERRORCODE CHAR(7),
	P_TPUDHI TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT UNSIGNED,
	P_MSGFMT TINYINT UNSIGNED,
	P_UNICOM TINYINT UNSIGNED,
  P_MOBILEAREA INT UNSIGNED, 
  P_PKNUMBER TINYINT UNSIGNED,
  P_SVRTYPE VARCHAR(64),
  P_P1 VARCHAR(64),
  P_P2 VARCHAR(64),
  P_P3 VARCHAR(64),
  P_P4 VARCHAR(64),
  P_USERMSGID BIGINT,
  P_MODULEID INT,
  P_ATTIME BIGINT,
  P_VALIDTIME BIGINT,
  P_SENDTYPE TINYINT UNSIGNED,
  P_BATCHID BIGINT,
  P_AREACODE INT)
  TOP:BEGIN
    DECLARE P_TMPMSGID BIGINT;
	DECLARE P_LOCATION INT;
	DECLARE P_START INT;
	DECLARE P_RESULTPHONE VARCHAR(21); #存储拆分后的字符
	DECLARE P_STRSPLIT VARCHAR(2);
	DECLARE P_LEN INT;
	DECLARE P_RESULTMSG VARCHAR(3000); #存储拆分后的字符
	DECLARE P_PKNUM INT;
	DECLARE P_TMPNUM INT;

    CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_WRMTTASK(UID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),
						PHONE VARCHAR(21),PTMSGID BIGINT,MESSAGE VARCHAR(3000),
						SENDSTATUS TINYINT,RETFLAG TINYINT,PKNUMBER TINYINT,
						PKTOTAL TINYINT,RECVMTTIME DATETIME,ECID INT,FEEFLAG TINYINT,
						SENDLEVEL TINYINT,TASKID INT,ERRORCODE CHAR(7),TPUDHI TINYINT,
						LONGMSGSEQ TINYINT,MSGFMT TINYINT,UNICOM TINYINT,MOBILEAREA INT,
						SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),
						P4 VARCHAR(64),USERMSGID BIGINT,MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,SENDTYPE INT,AREACODE INT);

	TRUNCATE TABLE P_TMP_WRMTTASK;

    SET P_LEN = CHAR_LENGTH(P_MESSAGE)-P_SIGNLEN;
	SET P_TMPNUM = 0;
	SET P_PKNUM = 1;
	SET P_STRSPLIT = ',';

    IF P_PHONECOUNT < 1 THEN #手机个数为0
		LEAVE TOP;
    END IF;

	IF P_MSGFMT=4 OR P_MSGFMT=248 OR P_MSGFMT=246 THEN
		SET P_SPLITLEN=140;
		SET P_MULTILEN1=134;
		SET P_MULTILEN2=134;
		SET P_SIGNLEN=0;
	END IF;

	IF P_MSGFMT=25 THEN
		IF NOT EXISTS (SELECT PTMSGID FROM MT_TASK WHERE PTMSGID=P_PTMSGID) THEN
		   INSERT INTO MT_TASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
		   RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
		   VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_PTMSGID,P_MESSAGE,P_SENDSTATUS,P_RETFLAG, P_PKNUMBER,P_PKTOTAL,
		   P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM, P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
        END IF;
	END IF;

	IF P_PHONECOUNT = 1 THEN #单发
        IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_PTMSGID) THEN
            IF P_PKTOTAL = 1 THEN
        		INSERT MT_TASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
        		RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
        		P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
        		VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_PTMSGID,P_MESSAGE,P_SENDSTATUS,
        		P_RETFLAG,P_PKTOTAL,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,
        		P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
            ELSE
        		SET P_PKNUM = 1;
        		SET P_TMPMSGID = P_PTMSGID;
                IF P_PKTOTAL = 2 AND P_LEN <= P_MULTILEN1 THEN
    				SET P_RESULTMSG = SUBSTRING(P_MESSAGE,1,P_SPLITLEN);#拆分后的字符
    				SET P_TMPMSGID = P_TMPMSGID;
    				IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_PTMSGID) THEN
        				INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
        				RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
        				VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,
        				P_RETFLAG,P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
    				END IF;

    				SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_SPLITLEN+1,P_LEN-P_SPLITLEN+P_SIGNLEN);#拆分后的字符
    				SET P_TMPMSGID = P_TMPMSGID+17179869184;
    				SET P_PKNUM = P_PKNUM+1;
    				IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_PTMSGID) THEN
        				INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
        				PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
        				VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
        				P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
                    END IF;
                ELSE
                    WHILE P_PKNUM <= P_PKTOTAL DO
						IF P_PKNUM = P_PKTOTAL THEN
							SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_TMPNUM+1,P_MULTILEN2+P_SIGNLEN);#拆分后的字符
							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
							#PRINT P_RESULTMSG
						ELSEIF P_PKNUM = P_PKTOTAL-1 THEN
							IF P_LEN-(P_PKNUM-1)*P_MULTILEN1 > P_MULTILEN2 AND P_LEN-(P_PKNUM-1)*P_MULTILEN1 <= P_MULTILEN1 THEN
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_LEN-(P_PKNUM-1)*P_MULTILEN1-1);
								SET P_TMPNUM = P_LEN-1;
							ELSE
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);
								SET P_TMPNUM = (P_PKNUM-1)*P_MULTILEN1+P_MULTILEN1;
						    END IF;

							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
						ELSE
							SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);#拆分后的字符
							#PRINT P_RESULTMSG
							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
						END IF;

						IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_TMPMSGID) THEN
    						INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    						PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
    						VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    						P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
                        END IF;

						SET P_PKNUM = P_PKNUM+1;

                    END WHILE;
                END IF;
            		INSERT INTO MT_TASK (UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
            		PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
            		SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
            		A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,P_BATCHID,P_AREACODE FROM P_TMP_WRMTTASK A;
                END IF;
            
		END IF;
	ELSE #群发
		SET P_SHOUJI = CONCAT(P_STRSPLIT , P_SHOUJI , P_STRSPLIT);
		SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI);

		IF P_PKTOTAL < 1 THEN #没有短信内容
			LEAVE TOP;
        END IF;

		IF P_PKTOTAL >= 1 THEN #需要拆分长短信
			WHILE P_LOCATION <> 0 DO #拆分手机号码
				SET P_START = P_LOCATION;
				SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI,P_START+1);
				IF P_LOCATION > 0 THEN
					SET P_RESULTPHONE = SUBSTRING(P_SHOUJI,P_START+1,P_LOCATION-P_START-1);#拆分后的字符
					#PRINT P_RESULTPHONE
					#IF P_RESULTPHONE <> ''
					SET P_TMPMSGID = P_PTMSGID;
					IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_TMPMSGID) THEN
						IF P_PKTOTAL = 1 THEN
							INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
							PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
							VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_MESSAGE,P_SENDSTATUS,P_RETFLAG,
							P_PKTOTAL,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
						ELSE
							SET P_PKNUM = 1;
							#SET P_TOTALSPLITNUM = P_PKTOTAL-1
							IF P_PKTOTAL = 2 AND P_LEN <= P_MULTILEN1 THEN
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,1,P_SPLITLEN);#拆分后的字符
								SET P_TMPMSGID = P_TMPMSGID;
								IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_TMPMSGID) THEN
    								INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    								PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
    								VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    								P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
                                END IF;

								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_SPLITLEN+1,P_LEN-P_SPLITLEN+P_SIGNLEN);#拆分后的字符
								SET P_TMPMSGID = P_TMPMSGID+17179869184;
								SET P_PKNUM = P_PKNUM+1;
								IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_TMPMSGID) THEN
    								INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    								PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
    								VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    								P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
								END IF;
                             ELSE
								WHILE P_PKNUM <= P_PKTOTAL DO
									IF P_PKNUM = P_PKTOTAL THEN
										SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_TMPNUM+1,P_MULTILEN2+P_SIGNLEN);#拆分后的字符
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									ELSEIF P_PKNUM = P_PKTOTAL-1 THEN
										IF P_LEN-(P_PKNUM-1)*P_MULTILEN1 > P_MULTILEN2 AND P_LEN-(P_PKNUM-1)*P_MULTILEN1 <= P_MULTILEN1 THEN
											SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_LEN-(P_PKNUM-1)*P_MULTILEN1-1);
											SET P_TMPNUM = P_LEN-1;
										ELSE
											SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);
											SET P_TMPNUM = (P_PKNUM-1)*P_MULTILEN1+P_MULTILEN1;
										END IF;
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									ELSE
										SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);#拆分后的字符
										#PRINT P_RESULTMSG
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									END IF;
									IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_TMPMSGID) THEN
    									INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    									PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
    									VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    									P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
									END IF;
                                    SET P_PKNUM = P_PKNUM+1;
								END WHILE;
                             END IF; #END OF P_PKTOTAL = 2
						  END IF; # END OF P_PKTOTAL = 1
					   END	IF;	#NOT EXISTS(SELECT
					   SET P_PTMSGID = P_PTMSGID+1;
                   END IF;
				END WHILE;
			END IF;

			INSERT INTO MT_TASK (UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
			PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
			SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
			A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,P_BATCHID,P_AREACODE FROM P_TMP_WRMTTASK A;
	  END IF;
END;;
DELIMITER ;
-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MTTASKC
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MTTASKC`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MTTASKC`(P_UID INT,
	P_PTMSGID BIGINT,
	P_SENDSTATUS INT,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKNUMBER TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_USERID VARCHAR(11),
	P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVTIME DATETIME,
	P_PHONE VARCHAR(3500),
	P_MESSAGE VARCHAR(3000) CHARSET 'GBK',
	P_TPUDHI TINYINT UNSIGNED,
	P_LOGINID VARCHAR(11),
	P_MSGFMT TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT UNSIGNED,
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_SENDLEVEL BIGINT,
	P_VALIDTIME BIGINT,
	P_UNICOM TINYINT UNSIGNED,
	P_TASKID INT,
	P_MOBILEAREA INT 
	)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK_C WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT MT_TASK_C(UID, LOGINID, USERID, SPGATE, CPNO, SHOUJI, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG, PKNUMBER, PKTOTAL, SENDTIME,TPUDHI,LONGMSGSEQ,MSGFMT,USERMSGID,MODULEID,SENDLEVEL,VALIDTIME,UNICOM ,TASKID ,MOBILEAREA )
	   VALUES(P_UID, P_LOGINID, P_USERID, P_SPGATE, P_CPNO, P_PHONE, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG, P_PKNUMBER, P_PKTOTAL, P_RECVTIME,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_USERMSGID,P_MODULEID,P_SENDLEVEL,P_VALIDTIME,P_UNICOM ,P_TASKID ,P_MOBILEAREA );
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MTTASKSR
-- ----------------------------

DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MTTASKSR`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MTTASKSR`(P_UID INT,P_PTMSGID BIGINT,
	P_SENDSTATUS TINYINT UNSIGNED,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_ECID INT,
	P_USERID VARCHAR(11),
	P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVMTTIME DATETIME,
	P_MESSAGE VARCHAR(3000)  CHARSET 'GBK',
	P_SHOUJI VARCHAR(3500),
	P_FEEFLAG TINYINT UNSIGNED,
	P_PKNUMBER TINYINT UNSIGNED,
	P_SENDLEVEL TINYINT UNSIGNED,
	P_TASKID INT,
	P_ERRORCODE CHAR(7),
	P_TPUDHI TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT UNSIGNED,
	P_MSGFMT TINYINT UNSIGNED,
	P_UNICOM TINYINT UNSIGNED,
	P_MOBILEAREA INT,
	P_SVRTYPE VARCHAR(64),
	P_P1 VARCHAR(64),
	P_P2 VARCHAR(64),
	P_P3 VARCHAR(64),
	P_P4 VARCHAR(64),
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_ATTIME BIGINT,
	P_VALIDTIME BIGINT,
	P_SENDTYPE INT,
	P_BATCHID BIGINT,
	P_AREACODE INT)
TOP:BEGIN
    DECLARE P_LOCATION INT;
	DECLARE P_START INT;
	DECLARE P_RESULTPHONE VARCHAR(21); #存储拆分后的字符
	DECLARE P_STRSPLIT VARCHAR(2);

    CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTSR(UID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),
						PHONE VARCHAR(21),PTMSGID BIGINT ,MESSAGE VARCHAR(3000),
						SENDSTATUS TINYINT UNSIGNED,RETFLAG TINYINT UNSIGNED,PKNUMBER TINYINT UNSIGNED,
						PKTOTAL TINYINT UNSIGNED,RECVMTTIME DATETIME,ECID INT,FEEFLAG TINYINT UNSIGNED,
						SENDLEVEL TINYINT UNSIGNED,TASKID INT,ERRORCODE CHAR(7),TPUDHI TINYINT UNSIGNED,
						LONGMSGSEQ TINYINT UNSIGNED,MSGFMT TINYINT UNSIGNED,UNICOM TINYINT UNSIGNED,MOBILEAREA INT,
						SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),
						P4 VARCHAR(64),USERMSGID BIGINT,MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,SENDTYPE INT,AREACODE INT);
    TRUNCATE TABLE P_TMP_MTSR;

    SET P_STRSPLIT = ',';

    IF P_PHONECOUNT < 1 THEN #手机个数为0
		LEAVE TOP;
    END IF;

	IF P_PHONECOUNT = 1 THEN #单发
		IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_PTMSGID) THEN
		   INSERT MT_TASK(UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
		   PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
		   P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
		   VALUES(P_UID,P_USERID, P_SPGATE, P_CPNO, P_SHOUJI, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG,
		   P_PKNUMBER, P_PKTOTAL, P_RECVMTTIME, P_ECID, P_FEEFLAG, P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,
		   P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
		END IF;
	ELSE #群发
		SET P_SHOUJI = CONCAT(P_STRSPLIT , P_SHOUJI , P_STRSPLIT);
		SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI);
		WHILE P_LOCATION <> 0 DO #拆分手机号码
			SET P_START = P_LOCATION;
			SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI,P_START+1);
			IF P_LOCATION > 0 THEN
				SET P_RESULTPHONE = SUBSTRING(P_SHOUJI,P_START+1,P_LOCATION-P_START-1);#拆分后的字符
				#PRINT P_RESULTPHONE
				IF P_RESULTPHONE <> '' THEN
					IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = P_PTMSGID) THEN
					   INSERT P_TMP_MTSR(UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
					   PKNUMBER, PKTOTAL, RECVMTTIME,ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
					   VALUES(P_UID,P_USERID, P_SPGATE, P_CPNO, P_RESULTPHONE, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG,
					   P_PKNUMBER, P_PKTOTAL, P_RECVMTTIME, P_ECID, P_FEEFLAG, P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
                    END IF;
					SET P_PTMSGID = P_PTMSGID+1;
				END IF;
			END IF;
		END	WHILE;

		INSERT INTO MT_TASK (UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
		PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
		P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
		SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
		A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,
		A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME ,A.SENDTYPE,P_BATCHID,P_AREACODE FROM P_TMP_MTSR A;
	END IF;
/*
,P_SVRTYPE VARCHAR(64),P_P1 VARCHAR(64),P_P2 VARCHAR(64),P_P3 VARCHAR(64),P_P4 VARCHAR(64),P_USERMSGID BIGINT,P_MODULEID INT,P_ATTIME BIGINT,P_VALIDTIME BIGINT
,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME
,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME
*/
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MTTMRQUE
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MTTMRQUE`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MTTMRQUE`(P_PIUID          INT,
   P_PIPTMSGID      BIGINT,
   P_PIRETFLAG      TINYINT UNSIGNED,
   P_PIPKTOTAL      TINYINT UNSIGNED,
   P_PIPHONECOUNT   INT,
   P_PISENDSTATUS   TINYINT UNSIGNED,
   P_PISPLITFLAG    TINYINT UNSIGNED,
   P_PIECID         INT,
   P_PIUSERID       VARCHAR(11),
   P_PISPGATE       VARCHAR(21),
   P_PICPNO         VARCHAR(21),
   P_PIRECVMTTIME   DATETIME,
   P_PIPHONE        VARCHAR(3500),
   P_PIMESSAGE      VARCHAR(3000) CHARSET 'GBK',
   P_PIFEEFLAG      TINYINT UNSIGNED,
   P_PIDESTUID      INT,
   P_PILOGINUID     INT,
   P_PIPKNUMBER     TINYINT UNSIGNED,
   P_PISENDLEVEL    TINYINT UNSIGNED,
   P_PITPUDHI       TINYINT UNSIGNED,
   P_PITASKID       INT,
   P_PILONGMSGSEQ   TINYINT UNSIGNED,
   P_PIMSGFMT       TINYINT UNSIGNED,
   P_PITOTALCOUNT   INT,
   P_SVRTYPE VARCHAR(64),
   P_P1 VARCHAR(64),
   P_P2 VARCHAR(64),
   P_P3 VARCHAR(64),
   P_P4 VARCHAR(64),
   P_USERMSGID BIGINT,
   P_MODULEID INT,
   P_ATTIME BIGINT,
   P_VALIDTIME BIGINT,
   P_SENDTYPE INT,
   P_BATCHID BIGINT)
BEGIN
    IF NOT EXISTS (SELECT PTMSGID FROM MT_TIMER_QUEUE WHERE PTMSGID = P_PIPTMSGID) THEN
	   INSERT INTO MT_TIMER_QUEUE(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,RETFLAG,PKTOTAL,TOTALCOUNT,PHONECOUNT,
	   SENDTIME,SENDSTATUS,SPLITFLAG,ECID,FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID)
	   VALUES(P_PIUID,P_PIUSERID,P_PISPGATE,P_PICPNO,P_PIPHONE,P_PIPTMSGID,P_PIMESSAGE,P_PIRETFLAG,P_PIPKTOTAL,P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME,P_PISENDSTATUS,P_PISPLITFLAG,P_PIECID,P_PIFEEFLAG,P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID);
    END IF;
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MTVRFYWAIT
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MTVRFYWAIT`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MTVRFYWAIT`(P_PIUID        INT,
   P_PIPTMSGID    BIGINT,
   P_PIRETFLAG    TINYINT UNSIGNED,
   P_PIPKTOTAL    TINYINT UNSIGNED,
   P_PIPHONECOUNT INT,
   P_PISENDSTATUS TINYINT UNSIGNED,
   P_PISPLITFLAG  TINYINT UNSIGNED,
   P_PIECID       INT,
   P_PIUSERID     VARCHAR(11),
   P_PISPGATE     VARCHAR(21),
   P_PICPNO       VARCHAR(21),
   P_PIRECVMTTIME DATETIME,
   P_PIPHONE      VARCHAR(3500),
   P_PIMESSAGE    VARCHAR(3000)  CHARSET 'GBK',
   P_PIFEEFLAG    TINYINT UNSIGNED,
   P_PIDESTUID    INT,
   P_PILOGINUID   INT,
   P_PIPKNUMBER   TINYINT UNSIGNED,
   P_PISENDLEVEL  TINYINT UNSIGNED,
   P_PITPUDHI     TINYINT UNSIGNED,
   P_PITASKID     INT,
   P_PILONGMSGSEQ TINYINT UNSIGNED,
   P_PIMSGFMT     TINYINT UNSIGNED,
   P_PITOTALCOUNT INT,
   P_SVRTYPE VARCHAR(64),
   P_P1 VARCHAR(64),
   P_P2 VARCHAR(64),
   P_P3 VARCHAR(64),
   P_P4 VARCHAR(64),
   P_USERMSGID BIGINT,
   P_MODULEID INT,
   P_ATTIME BIGINT,
   P_VALIDTIME BIGINT,
   P_SENDTYPE INT,
   P_BATCHID BIGINT)
BEGIN
    DECLARE P_PIDEALSTATUS INT;

	IF P_PISENDSTATUS>=10 THEN
	  SET P_PIDEALSTATUS=0;
	ELSE
	  SET P_PIDEALSTATUS=1;
    END IF;

	IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL0_QUEUE WHERE PTMSGID = P_PIPTMSGID) THEN
	   INSERT INTO MT_VERIFY_WAIT(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,RETFLAG,PKTOTAL,TOTALCOUNT,PHONECOUNT,
	   SENDTIME,SENDSTATUS,DEALSTATUS,SPLITFLAG,ECID,FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,
	   P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID)
	   VALUES(P_PIUID,P_PIUSERID,P_PISPGATE,P_PICPNO,P_PIPHONE,P_PIPTMSGID,P_PIMESSAGE,P_PIRETFLAG,P_PIPKTOTAL,P_PITOTALCOUNT,P_PIPHONECOUNT,
       P_PIRECVMTTIME,P_PISENDSTATUS,P_PIDEALSTATUS,P_PISPLITFLAG,P_PIECID,P_PIFEEFLAG,P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,P_PITPUDHI,
	   P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID);
    END IF;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MTWAITA
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `S_WR_MTWAITA`;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_MTWAITA`(P_LOGINUID INT,
	P_USERUID INT, P_USERID VARCHAR(11),
	P_PTMSGID BIGINT,
	P_SPNUMBER VARCHAR(21),
	P_SENDSTATUS TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_SENDTIME DATETIME,
	P_MESSAGE VARCHAR(3000)  CHARSET 'GBK',
	P_PHONE VARCHAR(3500),
	P_TASKID INT,
	P_SENDLEVEL TINYINT UNSIGNED,
	P_PIMSGFMT  TINYINT UNSIGNED,
	P_SVRTYPE VARCHAR(64),
	P_P1 VARCHAR(64),
	P_P2 VARCHAR(64),
	P_P3 VARCHAR(64),
	P_P4 VARCHAR(64),
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_RETFLAG TINYINT UNSIGNED,
	P_ATTIME BIGINT,
	P_VALIDTIME BIGINT,
	P_SENDTYPE INT,
	P_BATCHID BIGINT,
	P_TOTALCOUNT INT)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM MT_WAIT_A WHERE PTMSGID=P_PTMSGID) THEN
	   INSERT MT_WAIT_A (PTMSGID,ECID,LOGINUID,USERUID,USERID,SPNUMBER,SENDSTATUS,SENDLEVEL,SENDTIME,PHONECOUNT,MESSAGE,PHONE,TASKID,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,ATTIME,VALIDTIME,SENDTYPE,BATCHID,TOTALCOUNT)
	   VALUES(P_PTMSGID,0,P_LOGINUID,P_USERUID,P_USERID,P_SPNUMBER,P_SENDSTATUS,P_SENDLEVEL,
       P_SENDTIME,P_PHONECOUNT,P_MESSAGE,P_PHONE,P_TASKID,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_RETFLAG,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_TOTALCOUNT);
    END IF;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_RPTWAITC
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_RPTWAITC`(P_UID INT,
	P_PTMSGID BIGINT,
	P_SPGATE VARCHAR(21),
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_LOGINID VARCHAR(11),P_USERMSGID BIGINT,P_MODULEID INT)
BEGIN
	   INSERT RPT_WAIT_C(UID, PTMSGID, SPGATE,SPNUMBER, PHONE, SUBMITTIME, DONETIME, ERRORCODE, LOGINID,USERMSGID,MODULEID)
	   VALUES(P_UID, P_PTMSGID, P_SPGATE, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME, P_ERRORCODE, P_LOGINID,P_USERMSGID,P_MODULEID);
END;;
DELIMITER ;

-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_VERINFO
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `S_WR_VERINFO`(
    P_VERSION VARCHAR(32)
)
BEGIN
    IF NOT EXISTS(SELECT * FROM VERSION_CMPP WHERE VERSION=P_VERSION) THEN
        INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME) 
        VALUES (P_VERSION,DATE_FORMAT(NOW(),'%Y-%m-%d'),NOW());
    END IF;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `CREATE_HISTAB`;
CREATE DEFINER=`root`@`%` PROCEDURE `CREATE_HISTAB`()
BEGIN
    DECLARE PITYPE INT;
    DECLARE PICURTYPE INT;
    DECLARE PINUM  INT;
    DECLARE PICURNUM INT;
    DECLARE PIYM INT;
    DECLARE ERRO_NUM INT;
    DECLARE PITABLENAME VARCHAR(20);

    SET PITYPE=4;
    SET PINUM=36;
    SET ERRO_NUM=0;
    SET PICURTYPE=0;
   
WHILE PICURTYPE<=PITYPE DO
  SET PICURNUM=0;
  WHILE PICURNUM<PINUM DO
    SET PIYM= PERIOD_ADD(DATE_FORMAT(NOW(),'%Y%m'),PICURNUM); 
        IF PICURTYPE=0 THEN
	  SET PITABLENAME=CONCAT('GW_MTDRPT',PIYM );
	ELSEIF PICURTYPE=1 THEN
	  SET PITABLENAME=CONCAT('MTTASK',PIYM );
	ELSEIF PICURTYPE=2 THEN
	  SET PITABLENAME=CONCAT('MMSTASK',PIYM);
	ELSEIF PICURTYPE=3 THEN
	  SET PITABLENAME=CONCAT('MOTASK',PIYM);
	ELSE
	  SET PITABLENAME=CONCAT('MMSMOTASK',PIYM);
	END IF;
	IF NOT EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME=PITABLENAME) THEN
	 IF PICURTYPE=0 THEN
	  CALL   GW_CMTDATARPT(PIYM);  
	ELSE
          CALL CREATETABLE(PICURTYPE,PIYM);   
	END IF;   
	END IF;
	SET PICURNUM=PICURNUM+1;
  END WHILE;
  SET PICURTYPE=PICURTYPE+1;
END WHILE;
END;;
DELIMITER ;

-- ----------------------------
-- FUNCTION STRUCTURE FOR BUILDINSERTSQL
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` FUNCTION `BUILDINSERTSQL`(P_TABLE VARCHAR(128),P_FEILDS VARCHAR(2048),P_VALUES VARCHAR(4096)) RETURNS VARCHAR(6000) CHARSET GBK
BEGIN
	DECLARE P_VALUE VARCHAR(2048);
	DECLARE P_CURPOS INT;
	DECLARE P_SQL VARCHAR(6000);
	SET P_CURPOS = 1;

	SET P_SQL =CONCAT( 'INSERT INTO ',P_TABLE);
        SET P_SQL =CONCAT( P_SQL ,'(');
	SET P_SQL =CONCAT( P_SQL , REPLACE(P_FEILDS,'#',','));
	SET P_SQL =CONCAT( P_SQL ,') VALUES(');

	WHILE LOCATE('#', P_VALUES) <> 0 DO
		SET P_VALUE = SUBSTRING(P_VALUES, 1,  LOCATE('#', P_VALUES) - 1);
		SET P_SQL = CONCAT(P_SQL , '''');
                SET P_SQL =CONCAT(P_SQL,P_VALUE );
                SET P_SQL =CONCAT(P_SQL, ''',');
		SET P_VALUES = INSERT(P_VALUES, 1,  LOCATE('#', P_VALUES), '');
		/*IF( LOCATE('#',P_VALUES))=0 THEN
		     SET P_VALUES = CONCAT(INSERT(P_VALUES, 1,  LOCATE('#', P_VALUES), ''),'#');
                END IF;*/
	END WHILE;

	SET P_SQL = CONCAT(P_SQL , '''');
        SET P_SQL =CONCAT(P_SQL,P_VALUES );
        SET P_SQL =CONCAT(P_SQL, '''');

	SET P_SQL = CONCAT(P_SQL,' ');

	SET P_SQL = CONCAT(LEFT(P_SQL,CHAR_LENGTH(P_SQL)-1) ,',NOW())');

	RETURN P_SQL;
END;;
DELIMITER ;

-- ----------------------------
-- FUNCTION STRUCTURE FOR BUILDUPDATESQL
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` FUNCTION `BUILDUPDATESQL`(P_TABLE VARCHAR(128),P_FEILDS VARCHAR(2048),P_VALUES VARCHAR(4096),P_WHERE VARCHAR(1024)) RETURNS VARCHAR(6000) CHARSET GBK
BEGIN
	DECLARE P_VALUE VARCHAR(2048);
	DECLARE P_FIELD VARCHAR(2048);
	DECLARE P_SQL VARCHAR(6000);
	DECLARE P_STR VARCHAR(6000);

	DECLARE P_COUNT INT;

	SET P_COUNT = CHAR_LENGTH(P_FEILDS)-CHAR_LENGTH(REPLACE(P_FEILDS,'#','')) + 1;

	SET P_SQL =CONCAT( 'UPDATE ',P_TABLE, ' SET ' );

	WHILE LOCATE('#', P_FEILDS) <> 1 DO

		SET P_VALUE = SUBSTRING(P_VALUES, 1, LOCATE('#', P_VALUES) - 1);
		SET P_VALUES = INSERT(P_VALUES, 1, LOCATE('#', P_VALUES), '');
		IF( LOCATE('#',P_VALUES))=0 THEN
			SET P_VALUES =CONCAT( INSERT(P_VALUES, 1,LOCATE('#', P_VALUES), ''),'#');
		END IF;

		SET P_FIELD = SUBSTRING(P_FEILDS, 1 ,LOCATE('#', P_FEILDS) - 1);
		SET P_FEILDS = INSERT(P_FEILDS, 1,LOCATE('#', P_FEILDS), '');
		IF(LOCATE('#',P_FEILDS))=0 THEN
		SET P_FEILDS =CONCAT(INSERT(P_FEILDS, 1, LOCATE('#', P_FEILDS), ''),'#');
		END IF;

		SET P_COUNT = P_COUNT - 1;

		IF (P_COUNT = 0) THEN
			IF  (ISNULL(P_VALUE) || LENGTH(TRIM(P_VALUE))<1)  THEN
			    SET P_SQL =CONCAT( P_SQL , P_FIELD , '=NOW()');
		        ELSE
			    SET P_SQL =CONCAT( P_SQL , P_FIELD , '=''' , P_VALUE ,'''');
                        END IF;
		ELSE
			     SET P_SQL =CONCAT( P_SQL , P_FIELD , '=''' , P_VALUE ,''',');
		END IF;
		
	END WHILE;
	SET P_SQL = CONCAT(P_SQL,' ',P_WHERE);	

	RETURN P_SQL;
END;;
DELIMITER ;

-- ----------------------------
-- FUNCTION STRUCTURE FOR GETARRAYLENGTH
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` FUNCTION `GETARRAYLENGTH`( 
    P_STR VARCHAR(8000),    
    P_SPLIT VARCHAR(10)
) RETURNS INT(11)
BEGIN
     DECLARE V_LOCATION INT;
     DECLARE V_START INT;
     DECLARE V_LENGTH INT;     

     SET P_STR=LTRIM(RTRIM(P_STR));     
     SET V_LOCATION=LOCATE(P_SPLIT,P_STR);     
     SET V_LENGTH=1;     
     WHILE V_LOCATION <> 0 DO     
         SET V_START=V_LOCATION+1;
         SET V_LOCATION=LOCATE(P_SPLIT,P_STR,V_START);
         SET V_LENGTH=V_LENGTH+1;         
     END WHILE;     
          
     RETURN V_LENGTH;
END;;
DELIMITER ;

-- ----------------------------
-- FUNCTION STRUCTURE FOR GETARRAYSTROFINDEX
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` FUNCTION `GETARRAYSTROFINDEX`(P_STR VARCHAR(8000),P_SPLIT VARCHAR(10),P_INDEX INT) RETURNS VARCHAR(1024) CHARSET GBK
BEGIN
     DECLARE P_LOCATION INT;
     DECLARE P_START INT;
     DECLARE P_NEXT INT;
     DECLARE P_SEED INT;

     SET P_STR=LTRIM(RTRIM(P_STR));
     SET P_START=1;
     SET P_NEXT=1;
     SET P_SEED=CHAR_LENGTH(P_SPLIT);

     SET P_LOCATION=LOCATE(P_SPLIT,P_STR);
     WHILE P_LOCATION<>0 AND P_INDEX>P_NEXT DO
       SET P_START=P_LOCATION+P_SEED;
       SET P_LOCATION=LOCATE(P_SPLIT,P_STR,P_START);
       SET P_NEXT=P_NEXT+1;
     END WHILE;

     IF P_LOCATION =0 THEN
        SET P_LOCATION =CHAR_LENGTH(P_STR)+1 ;
        -- 这儿存在两种情况：1、字符串不存在分隔符号 2、字符串中存在分隔符号，跳出WHILE循环后，P_LOCATION为0，那默认为字符串后边有一个分隔符号。
     END IF;

     RETURN SUBSTRING(P_STR,P_START,P_LOCATION-P_START);
END;;
DELIMITER ;

-- ----------------------------
-- FUNCTION STRUCTURE FOR SUBSTRINGPRIKEY
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` FUNCTION `SUBSTRINGPRIKEY`(P_INPSTR VARCHAR(2048),P_INDEX INT) RETURNS VARCHAR(2048) CHARSET GBK
BEGIN
    DECLARE P_STR VARCHAR(2048);
	DECLARE P_STRS VARCHAR(2048);
    DECLARE P_FLAGINDEX INT ;
	SET P_FLAGINDEX=(SELECT 0);
	SET P_STRS=P_INPSTR;

WHILE(P_INDEX>0) DO
	SET P_FLAGINDEX=(SELECT LOCATE('#',P_STRS,1));
	 SET P_STR=SUBSTRING(P_STRS,1,LOCATE('#',P_STRS,1) - 1)  ;
	 SET P_STRS=(SELECT SUBSTRING(P_STRS,P_FLAGINDEX+1,CHAR_LENGTH(P_STRS)));
     	SET P_INDEX=P_INDEX-1;
END WHILE;
RETURN P_STR;
END;;
DELIMITER ;

DELIMITER ;;
CREATE TRIGGER `TIG_AGWACCOUNT` BEFORE INSERT ON `A_GWACCOUNT` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.UPDATETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATETIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_ACMDQUE
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_ACMDQUE` BEFORE INSERT ON `A_CMDQUE` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.REQTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.REQTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.DONETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.DONETIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_CMDHIS
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_CMDHIS` BEFORE INSERT ON `A_CMDQUE_HIS` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.REQTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.REQTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.DONETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.DONETIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_BATCHMTREQ
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_BATCHMTREQ` BEFORE INSERT ON `BATCH_MT_REQ` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_BATMTHIS
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_BATMTHIS` BEFORE INSERT ON `BATCH_MT_REQ_HIS` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_KCB
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_KCB` BEFORE INSERT ON `KF_CORPBASE` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.ORDERTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.ORDERTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.CANCELTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CANCELTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.MODITIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.MODITIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MONMSG
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_MONMSG` BEFORE INSERT ON `M_MON_MONMSG` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MSPGATEINFO
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_MSPGATEINFO` BEFORE INSERT ON `M_MON_SPGATEINFO` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.LASTSNDERTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LASTSNDERTM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.LOGININTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LOGININTM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.LOGINOUTTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LOGINOUTTM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.UPDATETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATETIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MTHREAD
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_MTHREAD` BEFORE INSERT ON `M_MON_THREADINFO` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.LASTERRORTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LASTERRORTM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.LASTRUNTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LASTRUNTM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.THISRUNTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.THISRUNTM= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.UPDATETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATETIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_USERINFO
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_USERINFO` BEFORE INSERT ON `M_MON_USERINFO` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.LOGININTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LOGININTM = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.LOGINOUTTM, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LOGINOUTTM= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.UPDATETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATETIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MRSPWATCH
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_MRSPWATCH` BEFORE INSERT ON `MR_SPGATE_WATCH` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.LSSENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LSSENDTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.LSRECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.LSRECVTIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.UPDATETIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.UPDATETIME = @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MT_DREPORT
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_MT_DREPORT` BEFORE INSERT ON `MT_DATAREPORT` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.STARTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.STARTTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.ENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.ENDTIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MTTASK
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_MTTASK` BEFORE INSERT ON `MT_TASK` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.RECVMTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVMTTIME = @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.TRANSMTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.TRANSMTTIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.TRANSRPTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.TRANSRPTTIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.SENDRPTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDRPTTIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MTTASKC
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_MTTASKC` BEFORE INSERT ON `MT_TASK_C` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.TRANSMTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.TRANSMTTIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_PWL
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_PWL` BEFORE INSERT ON `PB_WEBZZCMD_LOG` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.STIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.STIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.EXECTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.EXECTIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_PWQ
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_PWQ` BEFORE INSERT ON `PB_WEBZZCMD_QUEUE` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.STIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.STIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.EXECTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.EXECTIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TRIGGER_UPDATEUSERFREE
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TRIGGER_UPDATEUSERFREE` AFTER INSERT ON `PB_WEBZZCMD_QUEUE` FOR EACH ROW BEGIN
    DECLARE PUID INT;
    DECLARE PSENDNUM BIGINT;
    DECLARE P_ER INT;
    DECLARE P_USERID VARCHAR(20);
    DECLARE P_CMDTYPE INT;
    DECLARE P_CMDPARAM VARCHAR(20);
    DECLARE P_ID INT;
    DECLARE P_OCOUNT INT;
    DECLARE FLAG INT ;

    SET FLAG = 0;
    SET P_ER=0;
    SET P_OCOUNT=0;

    SET P_USERID = NEW.USERID ;
    SET P_CMDTYPE = NEW.CMDTYPE;
    SET P_CMDPARAM = NEW.CMDPARAM;
    SET P_ID = NEW.ID;
    
    SELECT UID INTO PUID FROM USERDATA WHERE USERID=UPPER(P_USERID);
    IF EXISTS( SELECT UID  FROM USERFEE WHERE USERID=UPPER(P_USERID) )  THEN
        SET FLAG =1;
    ELSE
        SET FLAG =0;
    END IF;
    IF FLAG=1 THEN
        IF CAST(P_CMDPARAM AS SIGNED)<=0 THEN
            ##需要回收/充值的条数不能为0或者负数，MYSQL不能抛出自定义异常，此处往一个不存在的表中插入数据，让系统抛异常
            INSERT INTO CONTRAL_FEE VALUES(1);
        ELSE
            IF P_CMDTYPE=113 THEN
                UPDATE USERFEE SET SENDNUM = (SENDNUM+CAST(P_CMDPARAM AS SIGNED)) WHERE USERID=UPPER(P_USERID);
            ELSEIF P_CMDTYPE=213 THEN
                SELECT SENDNUM INTO PSENDNUM FROM USERFEE WHERE USERID=UPPER(P_USERID);
                IF CAST(P_CMDPARAM AS  SIGNED)> PSENDNUM THEN
                    ##要回收的短信条数不能大于剩余的短信条数，否则安异常处理，MYSQL不能抛出自定义异常，此处往一个不存在的表中插入数据，让系统抛异常
                    INSERT INTO CONTRAL_FEE VALUES(1);
                ELSE
                    UPDATE USERFEE SET SENDNUM =(SENDNUM-CAST(P_CMDPARAM AS  SIGNED)) WHERE USERID=UPPER(P_USERID);
                END IF;
            ELSE
                ##操作命名必须是213或者113，否则安异常处理，MYSQL不能抛出自定义异常，此处往一个不存在的表中插入数据，让系统抛异常
                INSERT INTO CONTRAL_FEE VALUES(1);
            END IF;##END OF  IF P_CMDTYPE=113 THEN
        END IF;##END OF IF CAST(P_CMDPARAM AS SIGNED)<=0 THEN
   END IF;##END OF IF FLAG=1 THEN

   IF FLAG=0 THEN
       IF CAST(P_CMDPARAM AS SIGNED)<=0 THEN
           ##需要回收/充值的条数不能为0或者负数，MYSQL不能抛出自定义异常，此处往一个不存在的表中插入数据，让系统抛异常
           INSERT INTO CONTRAL_FEE VALUES(1);
        ELSE
           IF P_CMDTYPE=113 THEN
               INSERT INTO USERFEE(UID,ECID, USERID, SENDNUM, SENDEDNUM, POSTPAYUSED, THRESHOLD) VALUES(PUID,1,P_USERID,CAST(P_CMDPARAM AS SIGNED),0,0,1000);
           ELSEIF P_CMDTYPE=213 THEN
               ##回收费用时候，USERFEE中用户不存在时候，作为异常处理，否则安异常处理，MYSQL不能抛出自定义异常，此处往一个不存在的表中插入数据，让系统抛异常
                INSERT INTO CONTRAL_FEE VALUES(1);
           ELSE
                ##操作命名必须是213或者113，否则安异常处理，MYSQL不能抛出自定义异常，此处往一个不存在的表中插入数据，让系统抛异常
                INSERT INTO CONTRAL_FEE VALUES(1);
            END IF;##END OF  IF P_CMDTYPE=113 THEN
       END IF;##END OF IF CAST(P_CMDPARAM AS SIGNED)<=0 THEN
   END IF;##END OF IF FLAG=0 THEN

   INSERT INTO PB_WEBZZCMD_LOG (CMDTYPE,USERID,SID,CMDPARAM,USEIP,EXECFLAG,FEETYPE,FEE,OPID,MEMO,PRODID) 
   VALUES(NEW.CMDTYPE,NEW.USERID,NEW.SID,NEW.CMDPARAM,NEW.USEIP,NEW.EXECFLAG,NEW.FEETYPE,NEW.FEE,NEW.OPID,NEW.MEMO,NEW.PRODID) ;
   ##DELETE FROM PB_WEBZZCMD_QUEUE WHERE ID=NEW.ID; ##在MYSQL 和ORACLE的触发器中，不能对触发器所在的表进行删除数据
END;;
DELIMITER ;


-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_USERDATAEX
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_TIME_USERDATAEX` BEFORE INSERT ON `USERDATA` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.ORDERTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.ORDERTIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.CANCELTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.CANCELTIME= @P_CURTIME;
END IF;
IF DATE_FORMAT(NEW.MODITIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.MODITIME= @P_CURTIME;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_USERDATA
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `TIG_USERDATA` AFTER INSERT ON `USERDATA` FOR EACH ROW BEGIN
  SET  @PIACCOUNTTYPE=NEW.ACCOUNTTYPE;
  IF @PIACCOUNTTYPE=1 THEN
    ##若该用户已存在则更新其UID
        SET  @PIUID=NEW.UID;
        SET  @PIUSERID=NEW.USERID;
	IF EXISTS (SELECT USERID FROM USERFEE WHERE USERID=@PIUSERID) THEN
        UPDATE USERFEE SET  UID =@PIUID WHERE USERID=@PIUSERID;
        END IF;
    ##插入一条用户费用记录
	IF NOT EXISTS (SELECT USERID FROM USERFEE WHERE USERID=UPPER(@PIUSERID)) THEN
        INSERT INTO USERFEE( UID ,ECID, USERID, SENDNUM, SENDEDNUM, POSTPAYUSED, THRESHOLD)
        VALUES(@PIUID,1,@PIUSERID,0,0,0,1000);
        END IF;
END IF;
END;;
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MMSBMTREQ
-- ----------------------------
DELIMITER ;;       
CREATE TRIGGER `TIG_TIME_MMSBMTREQ` BEFORE INSERT ON `MMS_BMTREQ` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME = @P_CURTIME;
END IF;        
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME = @P_CURTIME;
END IF;        
END;;        
DELIMITER ;   
          
          
-- ----------------------------                                                   
-- TRIGGER STRUCTURE FOR TIG_TIME_MMSBTHIS                                                 
-- ----------------------------                                                             
DELIMITER ;;                                                                                
CREATE TRIGGER `TIG_TIME_MMSBTHIS` BEFORE INSERT ON `MMS_BMTREQHIS` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();                                                           
IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN                      
    SET NEW.RECVTIME = @P_CURTIME;                                                
END IF;                                                                           
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN                      
    SET NEW.SENDTIME = @P_CURTIME;                                                
END IF;  
END;;        
DELIMITER ;

-- ----------------------------                                                   
-- TRIGGER STRUCTURE FOR TIG_TIME_MMSDTRPT                                                 
-- ----------------------------                                                             
DELIMITER ;;                                                                                
CREATE TRIGGER `TIG_TIME_MMSDTRPT` BEFORE INSERT ON `MMS_DATAREPORT` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();                                                           
IF DATE_FORMAT(NEW.STARTTIME, '%Y-%m-%d') = '0000-00-00' THEN                      
    SET NEW.STARTTIME = @P_CURTIME;                                                
END IF;                                                                           
IF DATE_FORMAT(NEW.ENDTIME, '%Y-%m-%d') = '0000-00-00' THEN                      
    SET NEW.ENDTIME = @P_CURTIME;                                                
END IF;  
END;;        
DELIMITER ;

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MMSLEVQUE
-- ----------------------------
DELIMITER ;;       
CREATE TRIGGER `TIG_TIME_MMSLEVQUE` BEFORE INSERT ON `MMS_LEVEL_QUEUE` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME = @P_CURTIME;
END IF;               
END;;        
DELIMITER ;   

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MMSMO
-- ----------------------------
DELIMITER ;;       
CREATE TRIGGER `TIG_TIME_MMSMO` BEFORE INSERT ON `MMS_MO` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.DELIVERTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.DELIVERTIME = @P_CURTIME;
END IF;               
END;;        
DELIMITER ;   

-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MMSRPT
-- ----------------------------
DELIMITER ;;       
CREATE TRIGGER `TIG_TIME_MMSRPT` BEFORE INSERT ON `MMS_RPT` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();
IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME = @P_CURTIME;
END IF;               
END;;        
DELIMITER ;   
          
-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MMSTASK
-- ----------------------------
DELIMITER ;;       
CREATE TRIGGER `TIG_TIME_MMSTASK` BEFORE INSERT ON `MMS_TASK` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();

IF DATE_FORMAT(NEW.RECVMTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVMTTIME = @P_CURTIME;
END IF;  

IF DATE_FORMAT(NEW.TRANSMTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.TRANSMTTIME = @P_CURTIME;
END IF; 

IF DATE_FORMAT(NEW.SENDTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDTIME = @P_CURTIME;
END IF; 

IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME = @P_CURTIME;
END IF; 

IF DATE_FORMAT(NEW.TRANSRPTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.TRANSRPTTIME = @P_CURTIME;
END IF; 

IF DATE_FORMAT(NEW.SENDRPTTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.SENDRPTTIME = @P_CURTIME;
END IF; 
             
END;;        
DELIMITER ;   
          
-- ----------------------------
-- TRIGGER STRUCTURE FOR TIG_TIME_MMSTEMPT
-- ----------------------------
DELIMITER ;;       
CREATE TRIGGER `TIG_TIME_MMSTEMPT` BEFORE INSERT ON `MMS_TEMPLATE` FOR EACH ROW BEGIN
SET @P_CURTIME = NOW();

IF DATE_FORMAT(NEW.RECVTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.RECVTIME = @P_CURTIME;
END IF;  
   
IF DATE_FORMAT(NEW.AUDITTIME, '%Y-%m-%d') = '0000-00-00' THEN
    SET NEW.AUDITTIME = @P_CURTIME;
END IF; 

END;;        
DELIMITER ;   

-- ----------------------------
-- PROCEDURE STRUCTURE FOR GW_WRRPTWAITCV1
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRRPTWAITCV1`(P_UID INT,
	P_PTMSGID BIGINT,
	P_SPGATE VARCHAR(21),
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_LOGINID VARCHAR(11),P_USERMSGID BIGINT,P_MODULEID INT,P_RETFLAG INT,P_RECVFLAG INT,P_SENDTIME INT)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_C WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_C(UID, PTMSGID, SPGATE,SPNUMBER, PHONE, SUBMITTIME, DONETIME, RECVFLAG,ERRORCODE, LOGINID,USERMSGID,MODULEID,RETFLAG,SENDTIME)
	   VALUES(P_UID, P_PTMSGID, P_SPGATE, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME,P_RECVFLAG, P_ERRORCODE, P_LOGINID,P_USERMSGID,P_MODULEID,P_RETFLAG,P_SENDTIME);
    END IF;
END;;
DELIMITER ;
 


-- ----------------------------
-- PROCEDURE STRUCTURE FOR H_STATISTICS
-- ----------------------------
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_STATISTIV1`(P_PROCESSFLAG INT,ISP1 INT,ISP2 INT,ISP3 INT,ISP4 INT)
BEGIN
	DECLARE P_STR NVARCHAR(4000);  
	DECLARE P_USERID VARCHAR(11);
	DECLARE P_TASKID INT;
	DECLARE P_IYMD INT;
	DECLARE P_SPGATE VARCHAR(21);
	DECLARE P_SPISUNCM INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_SPID VARCHAR(21);
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_IHOUR INT;
	DECLARE P_IYEAR INT ;
	DECLARE P_IMONTH INT;
	DECLARE P_ICOUNT INT;
	DECLARE P_SUCC INT;
	DECLARE P_FAIL INT;
	DECLARE P_NRET INT;
  DECLARE MAXCNT INT ;
  DECLARE I INT;
  DECLARE P_SENDTYPE INT;
  DECLARE P_MOBILEAREA INT;


	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_STICV1( TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT, USERID VARCHAR(11),TASKID INT,SPGATE VARCHAR(21),SPISUNCM INT,
	SPID VARCHAR(32),SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),
  IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,SUCC INT,FAIL INT,NRET INT,SENDTYPE INT,MOBILEAREA INT,BATCHID BIGINT,AREACODE INT, PRIMARY KEY (TMP_ID)  );
  ALTER TABLE P_TMP_STICV1 AUTO_INCREMENT=1;

	SET P_STR = 'SELECT USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE';
        IF  ISP1 =1 THEN
           SET P_STR =CONCAT(P_STR,',P1');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P1');
         END IF;
           IF  ISP2 =1 THEN
           SET P_STR =CONCAT(P_STR,',P2');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P2');
         END IF;
    IF  ISP3 =1 THEN
           SET P_STR =CONCAT(P_STR,',P3');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P3');
         END IF;
    IF  ISP4 =1 THEN
           SET P_STR =CONCAT(P_STR,',P4');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P4');
         END IF;
           SET P_STR =CONCAT(P_STR, ',CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED) AS IYMD,
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED) AS IYEAR,
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED) AS MON,
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED) AS HOUR,
           COUNT(ID),
           SUM(CASE RTRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE 0 END),
           SUM(CASE SUBSTRING(RTRIM(ERRORCODE),1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE 0 END),
           SUM(CASE RTRIM(ERRORCODE) WHEN '''' THEN 1 ELSE 0 END),
           SENDTYPE,
           MOBILEAREA,
           BATCHID,AREACODE
           FROM MT_TASK WHERE  SENDTIME >=  ''') ;
           SET P_STR=CONCAT(P_STR, DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
           SET P_STR=CONCAT(P_STR,'''  AND SENDTIME < ''');
           SET P_STR=CONCAT(P_STR, CURDATE());
           SET P_STR=CONCAT(P_STR, ''' GROUP BY USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE');
            IF  ISP1 =1 THEN
               SET P_STR =CONCAT(P_STR,',P1');
             END IF;
           IF  ISP2 =1 THEN
               SET P_STR =CONCAT(P_STR,',P2');
             END IF;
           IF  ISP3 =1 THEN
               SET P_STR =CONCAT(P_STR,',P3');
           END IF;
           IF  ISP4 =1 THEN
               SET P_STR =CONCAT(P_STR,',P4');
           END IF;
           SET P_STR=CONCAT(P_STR,',SENDTYPE,MOBILEAREA,BATCHID,AREACODE,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED)');
 
# SELECT P_STR;

  SET @SQL =CONCAT('INSERT INTO P_TMP_STICV1(USERID ,TASKID,SPGATE,SPISUNCM,SPID ,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)', P_STR);#
       PREPARE SL FROM @SQL;
       EXECUTE SL;
       DEALLOCATE PREPARE SL;

  DELETE FROM MT_DATAREPORT WHERE IYMD BETWEEN   CAST(DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY),'%Y%m%d') AS SIGNED ) AND  CAST(DATE_FORMAT(CURDATE(),'%Y%m%d') AS SIGNED );

	INSERT INTO MT_DATAREPORT (USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)
	SELECT T.USERID,T.TASKID,T.SPGATE,T.SPISUNCM,T.SPID,T.SVRTYPE,T.P1,T.P2,T.P3,T.P4,T.IYMD,T.IHOUR,T.IMONTH,T.IYEAR,T.ICOUNT,T.SUCC,T.FAIL,(T.ICOUNT-T.SUCC-T.FAIL-T.NRET),T.NRET,T.SENDTYPE,T.MOBILEAREA,T.BATCHID,T.AREACODE FROM P_TMP_STICV1 T;

  TRUNCATE TABLE P_TMP_STICV1;
END;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_MMSSTATIV1`(P_PROCESSFLAG  INT,ISP1 INT,ISP2 INT,ISP3 INT,ISP4 INT)
BEGIN
	DECLARE P_STR NVARCHAR(4000);
	DECLARE P_USERID VARCHAR(11);
	DECLARE P_TASKID INT;
	DECLARE P_IYMD INT;
	DECLARE P_SPGATE VARCHAR(21);
	DECLARE P_SPISUNCM INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_SPID VARCHAR(21);
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_IHOUR INT;
	DECLARE P_IYEAR INT ;
	DECLARE P_IMONTH INT;
	DECLARE P_ICOUNT INT;
	DECLARE P_SUCC INT;
	DECLARE P_FAIL INT;
	DECLARE P_NRET INT;
  DECLARE MAXCNT INT ;
  DECLARE P_SENDTYPE INT;
  DECLARE P_MOBILEAREA INT;
  DECLARE I INT;


	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MMSTICV1( TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT, USERID VARCHAR(11),TASKID INT,SPGATE VARCHAR(21),SPISUNCM INT,
	SPID VARCHAR(32),SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),
  IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,SUCC INT,FAIL INT,NRET INT,SENDTYPE INT,MOBILEAREA INT,PRIMARY KEY (TMP_ID)  );
  ALTER TABLE P_TMP_MMSTICV1 AUTO_INCREMENT=1;

	SET P_STR = 'SELECT USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE';
        IF  ISP1 =1 THEN
           SET P_STR =CONCAT(P_STR,',P1');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P1');
         END IF;
           IF  ISP2 =1 THEN
           SET P_STR =CONCAT(P_STR,',P2');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P2');
         END IF;
    IF  ISP3 =1 THEN
           SET P_STR =CONCAT(P_STR,',P3');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P3');
         END IF;
    IF  ISP4 =1 THEN
           SET P_STR =CONCAT(P_STR,',P4');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P4');
         END IF;
           SET P_STR =CONCAT(P_STR, ',CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED) AS IYMD,
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED) AS IYEAR,
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED) AS MON,
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED) AS HOUR,
           COUNT(ID),
           SUM(CASE RTRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE 0 END),
           SUM(CASE SUBSTRING(RTRIM(ERRORCODE),1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE 0 END),
           SUM(CASE RTRIM(ERRORCODE) WHEN '''' THEN 1 ELSE 0 END) ,
           SENDTYPE,
           MOBILEAREA
           FROM MMS_TASK WHERE  SENDTIME  >= ''') ;
           SET P_STR=CONCAT(P_STR, DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
           SET P_STR=CONCAT(P_STR,'''  AND SENDTIME < ''');
           SET P_STR=CONCAT(P_STR, CURDATE());
           SET P_STR=CONCAT(P_STR, ''' GROUP BY USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE');
            IF  ISP1 =1 THEN
               SET P_STR =CONCAT(P_STR,',P1');
             END IF;
           IF  ISP2 =1 THEN
               SET P_STR =CONCAT(P_STR,',P2');
             END IF;
           IF  ISP3 =1 THEN
               SET P_STR =CONCAT(P_STR,',P3');
           END IF;
           IF  ISP4 =1 THEN
               SET P_STR =CONCAT(P_STR,',P4');
           END IF;
           SET P_STR=CONCAT(P_STR,',SENDTYPE,MOBILEAREA,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED)');

  SET @SQL =CONCAT('INSERT INTO P_TMP_MMSTICV1(USERID ,TASKID,SPGATE,SPISUNCM,SPID ,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA)', P_STR);#
       PREPARE SL FROM @SQL;
       EXECUTE SL;
       DEALLOCATE PREPARE SL;
  
  DELETE FROM MMS_DATAREPORT WHERE IYMD BETWEEN   CAST(DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY),'%Y%m%d') AS SIGNED ) AND  CAST(DATE_FORMAT(CURDATE(),'%Y%m%d') AS SIGNED );

	INSERT INTO MMS_DATAREPORT (USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET,SENDTYPE,MOBILEAREA)
	SELECT T.USERID,T.TASKID,T.SPGATE,T.SPISUNCM,T.SPID,T.SVRTYPE,T.P1,T.P2,T.P3,T.P4,T.IYMD,T.IHOUR,T.IMONTH,T.IYEAR,T.ICOUNT,T.SUCC,T.FAIL,(T.ICOUNT-T.SUCC-T.FAIL-T.NRET),T.NRET,T.SENDTYPE,T.MOBILEAREA FROM P_TMP_MMSTICV1 T;
                       
  TRUNCATE TABLE P_TMP_MMSTICV1;
END;;
DELIMITER ;


DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_DATATRANV1`(ISP1 INT,ISP2 INT,ISP3 INT,ISP4 INT)
TOP:
BEGIN
	DECLARE  P_COUNTINFO INT;
	DECLARE  P_PROCESSINGSTATUSCOUNT  INT; #PROCESSINGSTATUS表记录数(根据USEID设置值判断,为1正常)
	DECLARE  P_USEID                 INT; #使用哪一个USEID作为当前状态处理
	DECLARE  P_CURRINDEX             BIGINT; #当前处理位置
	DECLARE  P_MAXINDEX              BIGINT; #此次执行的最大位置
	DECLARE  P_COUNTSTATUS           INT; #统计状态0:正常,1:错误
	DECLARE  P_DISTRACTSTATUS        INT; #数据转移状态0:正常,1:错误
	DECLARE  P_DELETESTATUS          INT; #删除状态0:正常,1:错误
	DECLARE  P_PROCESSFLAG           INT; #转移方式0:处理今天（含今天)以前的，1为前一天以前的 ,2为前二天以前的...以此类推,

        DECLARE   MINYM INT;                  
        DECLARE   MAXYM INT;                  
        DECLARE   CURYM INT;                  
        DECLARE   TABLENAME       VARCHAR(20);
        DECLARE   STR       VARCHAR(4000) ;  
        DECLARE   P_ISEXIST  INT;

	#异常退出
	DECLARE  P_COUNTEXCEPTION        INT;#允许统计异常最大值
	DECLARE  P_DISTRACTEXCEPTION     INT; #允许数据转移异常最大值
	DECLARE  P_DELETEEXCEPTION       INT; #允许删除数据异常最大值
	DECLARE  P_ALLEXCEPTION          INT; #允许所有异常最大值

       ##批量转移临时变量
       DECLARE PI_CURINDEX           BIGINT;
       DECLARE PI_MAXINDEX           BIGINT;
       DECLARE PI_MININDEX           BIGINT;
       DECLARE EACHMAX               INT; ##每次处理最大数

       ##异常代码
        DECLARE P_ERR  INT DEFAULT 0;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
	#初始化
	SET P_PROCESSINGSTATUSCOUNT = 0;
	SET P_USEID                 = 1;
	SET P_CURRINDEX             = 0;
	SET P_MAXINDEX              = 0;
	SET P_COUNTSTATUS           = 1;
	SET P_DISTRACTSTATUS        = 1;
	SET P_DELETESTATUS          = 1;
	SET P_PROCESSFLAG           = 3;
	SET EACHMAX               = 500000;
	SET P_COUNTEXCEPTION        = 5;
	SET P_DISTRACTEXCEPTION     = 5;
	SET P_DELETEEXCEPTION       = 5;
	SET P_ALLEXCEPTION          = 10;

        INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','GW_H_DATATRANV1','短信汇总调度存储过程执行开始');
	#1.先汇总
	SELECT COUNT(ID) INTO P_COUNTINFO FROM MT_TASK  WHERE  SENDTIME  >= (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY)) AND SENDTIME <CURDATE() ;

	IF P_COUNTINFO>0 THEN
		CALL GW_H_STATISTIV1(P_PROCESSFLAG,ISP1,ISP2,ISP3,ISP4);
                IF P_ERR=1 THEN 
                   INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行汇总GW_H_STATISTIV1','汇总出现异常');
                END IF;
	END IF;
	#2.再转移
	#先根据指定USEID判断是否有值
	SELECT COUNT(USEID) INTO P_PROCESSINGSTATUSCOUNT FROM PROCESSINGSTATUS WHERE USEID = P_USEID;
	#如果没有先初始化PROCESSINGSTATUS,否则取当表中值
	IF P_PROCESSINGSTATUSCOUNT = 0 THEN
         BEGIN
		CALL H_PROCESSSTATUS(P_USEID,0,0,0,0,0)	;
               SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END;
	ELSE
		SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END IF;
      

	SELECT MAX(ID) INTO P_MAXINDEX FROM MT_TASK  WHERE   SENDTIME < (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
             ##判断是否存在未转移的数据
        IF P_CURRINDEX<P_MAXINDEX THEN
             ##创建不存在的历史表
             SELECT CAST(DATE_FORMAT(MIN(SENDTIME),'%Y%m') AS SIGNED), CAST(DATE_FORMAT(MAX(SENDTIME),'%Y%m') AS SIGNED)  INTO MINYM, MAXYM  FROM MT_TASK  WHERE  ID<=P_MAXINDEX;
             SET CURYM = MINYM;
             WHILE CURYM<=MAXYM DO
                  SET TABLENAME =CONCAT( 'MTTASK',CURYM)	;
                  SELECT COUNT(1)  INTO P_ISEXIST FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA`=DATABASE() AND `TABLE_NAME`=TABLENAME ;
                  IF P_ISEXIST=0 THEN
                      CALL CREATETABLE(1,CURYM);
                      IF P_ERR=1 THEN 
                         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行历史表创建：CREATETABLE','创建历史表出现异常');
                      END IF;
                  END IF;

                  IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                      SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
                  ELSE
                      SET CURYM = CURYM+1  ;
                  END IF;
            END WHILE;
             ##转移数据
             SET P_ERR=0;
	   IF (P_MAXINDEX-P_CURRINDEX>=EACHMAX) THEN
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=PI_MININDEX+EACHMAX;
           ELSE
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=P_MAXINDEX;
           END IF;
          WHILE (PI_MININDEX <P_MAXINDEX) DO
               START TRANSACTION;
                SAVEPOINT A;
                CALL H_TRANSFER(PI_MININDEX,PI_CURINDEX,0,0);              
                CALL H_DELETETASK(PI_MININDEX,PI_CURINDEX,0,0);
                CALL H_PROCESSSTATUS(P_USEID,PI_CURINDEX,PI_CURINDEX,0,0,0);
		IF P_ERR = 1 THEN
                BEGIN
                    ROLLBACK TO  SAVEPOINT A;
                    INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行数据转移','下行数据转移出现异常');
                    SET P_DISTRACTEXCEPTION = P_DISTRACTEXCEPTION - 1;
                    SET P_ALLEXCEPTION      = P_ALLEXCEPTION - 1;                                      
                    IF P_DISTRACTEXCEPTION <= 0 OR P_ALLEXCEPTION <= 0 THEN
                       LEAVE TOP;
                   END IF;
               END;
               ELSE
                 IF (P_MAXINDEX-PI_CURINDEX>=EACHMAX) THEN
                    SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 ELSE
                    SET PI_CURINDEX=P_MAXINDEX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 END IF;
                 COMMIT;
              END IF;
        END WHILE;
        END IF;

        #5.执行上行统计
CALL  H_TRANSFERMO();

      DELETE FROM BATCH_MT_REQ_HIS WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 60 DAY);
      IF P_ERR = 1 THEN 
         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除BATCH_MT_REQ_HIS表记录','删除数据出现异常');
      END IF;
      
      IF DAYOFMONTH(NOW())=1 THEN

          DELETE FROM MO_WAIT_A WHERE DELIVERTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
          IF P_ERR = 1 THEN 
              INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除MO_WAIT_A表记录','删除数据出现异常');
          END IF;

          DELETE FROM RPT_WAIT_A WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
          IF P_ERR = 1 THEN 
              INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除RPT_WAIT_A表记录','删除数据出现异常');
          END IF;
     
          DELETE FROM RPT_WAIT_B WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
          IF P_ERR = 1 THEN 
              INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除RPT_WAIT_B表记录','删除数据出现异常');
          END IF;

      END IF;
      
      INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','GW_H_DATATRANV1','短信汇总调度存储过程执行结束');
END TOP;;
DELIMITER ;



DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_MMSDATATV1`(P_PROCESSFLAG INT,ISP1 INT,ISP2 INT,ISP3 INT,ISP4 INT)
TOP:
BEGIN
	DECLARE  P_COUNTINFO INT;
	DECLARE  P_PROCESSINGSTATUSCOUNT  INT; #PROCESSINGSTATUS表记录数(根据USEID设置值判断,为1正常)
	DECLARE  P_USEID                 INT; #使用哪一个USEID作为当前状态处理
	DECLARE  P_CURRINDEX             BIGINT; #当前处理位置
	DECLARE  P_MAXINDEX              BIGINT; #此次执行的最大位置
	DECLARE  P_COUNTSTATUS           INT; #统计状态0:正常,1:错误
	DECLARE  P_DISTRACTSTATUS        INT; #数据转移状态0:正常,1:错误
	DECLARE  P_DELETESTATUS          INT; #删除状态0:正常,1:错误
        ##DECLARE  P_PROCESSFLAG           INT; #转移方式0:处理今天（含今天)以前的，1为前一天以前的 ,2为前二天以前的...以此类推,

        DECLARE   MINYM INT;                  
        DECLARE   MAXYM INT;                  
        DECLARE   CURYM INT;                  
        DECLARE   TABLENAME       VARCHAR(20);
        DECLARE   STR       VARCHAR(4000) ;  
        DECLARE   P_ISEXIST  INT;

	#异常退出
	DECLARE  P_COUNTEXCEPTION        INT;#允许统计异常最大值
	DECLARE  P_DISTRACTEXCEPTION     INT; #允许数据转移异常最大值
	DECLARE  P_DELETEEXCEPTION       INT; #允许删除数据异常最大值
	DECLARE  P_ALLEXCEPTION          INT; #允许所有异常最大值
	  ##批量转移临时变量
       DECLARE PI_CURINDEX           BIGINT;
       DECLARE PI_MAXINDEX           BIGINT;
       DECLARE PI_MININDEX           BIGINT;
       DECLARE EACHMAX               INT; ##每次处理最大数
	
        DECLARE P_ERR  INT DEFAULT 0;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
	#初始化
	SET P_PROCESSINGSTATUSCOUNT = 0;
	SET P_USEID                 = 2;
	SET P_CURRINDEX             = 0;
	SET P_MAXINDEX              = 0;
	SET P_COUNTSTATUS           = 1;
	SET P_DISTRACTSTATUS        = 1;
	SET P_DELETESTATUS          = 1;
	##SET P_PROCESSFLAG           = 2;
	SET EACHMAX               = 500000;
	SET P_COUNTEXCEPTION        = 5;
	SET P_DISTRACTEXCEPTION     = 5;
	SET P_DELETEEXCEPTION       = 5;
	SET P_ALLEXCEPTION          = 10;

         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','GW_H_MMSDATATV1','彩信汇总调度存储过程执行开始');
	#1.先汇总
	SELECT COUNT(ID) INTO P_COUNTINFO FROM MMS_TASK  WHERE  SENDTIME  >= (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY)) AND SENDTIME < CURDATE() ;

	IF P_COUNTINFO>0 THEN
		CALL GW_H_MMSSTATIV1(P_PROCESSFLAG,ISP1,ISP2,ISP3,ISP4);
                IF P_ERR=1 THEN 
                   INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信下行汇总GW_H_MMSSTATIV1','汇总出现异常');
                END IF;
	END IF;
	#2.再转移
	#先根据指定USEID判断是否有值
	SELECT COUNT(USEID) INTO P_PROCESSINGSTATUSCOUNT FROM PROCESSINGSTATUS WHERE USEID = P_USEID;
	#如果没有先初始化PROCESSINGSTATUS,否则取当表中值
	IF P_PROCESSINGSTATUSCOUNT = 0 THEN
         BEGIN
		CALL H_PROCESSSTATUS(P_USEID,0,0,0,0,0)	;
               SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END;
	ELSE
		SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END IF;
       
         SELECT MAX(ID) INTO P_MAXINDEX FROM MMS_TASK  WHERE  SENDTIME <(DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY)); 
            #判断是否存在未转移的数据
           IF P_CURRINDEX<P_MAXINDEX THEN
            ##创建不存在的历史表
            SELECT CAST(DATE_FORMAT(MIN(SENDTIME),'%Y%m') AS SIGNED), CAST(DATE_FORMAT(MAX(SENDTIME),'%Y%m') AS SIGNED)  INTO  MINYM, MAXYM  FROM MMS_TASK  WHERE  ID<=P_MAXINDEX; 
             SET CURYM = MINYM;
             WHILE CURYM<=MAXYM DO
                  SET TABLENAME =CONCAT( 'MMSTASK',CURYM)	;
                  SELECT COUNT(1)  INTO P_ISEXIST FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA`=DATABASE() AND `TABLE_NAME`=TABLENAME ;
                  IF P_ISEXIST=0 THEN
                      CALL CREATETABLE(2,CURYM);
                      IF P_ERR=1 THEN 
                         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信下行历史表创建：CREATETABLE','创建历史表出现异常');
                      END IF;
                  END IF;

                  IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                      SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
                  ELSE
                      SET CURYM = CURYM+1  ;
                  END IF;
            END WHILE;
             #转移数据
             SET P_ERR=0;
	   IF (P_MAXINDEX-P_CURRINDEX>=EACHMAX) THEN
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=PI_MININDEX+EACHMAX;
           ELSE
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=P_MAXINDEX;
           END IF;
          WHILE (PI_MININDEX <P_MAXINDEX) DO
               START TRANSACTION;
                SAVEPOINT A;
                CALL H_MMSTRANSFER(PI_MININDEX,PI_CURINDEX,0,0);
                CALL  H_MMSDELTETASK (PI_MININDEX,PI_CURINDEX,0,0);
                CALL H_PROCESSSTATUS(P_USEID,PI_CURINDEX,PI_CURINDEX,0,0,0);
		IF P_ERR = 1 THEN
                BEGIN
                    ROLLBACK TO  SAVEPOINT A;
                    INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信下行数据转移','下行数据转移出现异常');
                    SET P_DISTRACTEXCEPTION = P_DISTRACTEXCEPTION - 1;
                    SET P_ALLEXCEPTION      = P_ALLEXCEPTION - 1;                                      
                    IF P_DISTRACTEXCEPTION <= 0 OR P_ALLEXCEPTION <= 0 THEN
                       LEAVE TOP;
                   END IF;
               END;
               ELSE
                 IF (P_MAXINDEX-PI_CURINDEX>=EACHMAX) THEN
                    SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 ELSE
                    SET PI_CURINDEX=P_MAXINDEX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 END IF;
                 COMMIT;
              END IF;
        END WHILE;
        END IF;

        #5.执行上行统计
       CALL  H_MMSTRANSFERMO();

     DELETE FROM MMS_BMTREQHIS WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 60 DAY);
      IF P_ERR = 1 THEN 
         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信删除MMS_BMTREQHIS表记录','删除数据出现异常');
      END IF;
 
      IF DAYOFMONTH(NOW())=1 THEN
          DELETE FROM MMS_RPT WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
          IF P_ERR = 1 THEN 
              INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('MMS','彩信删除MMS_RPT表记录','删除数据出现异常');
          END IF;
      END IF;
      
      INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS, RUNFLAG) VALUES('MMS','GW_H_MMSDATATV1','彩信汇总调度存储过程执行结束',1);

END TOP;;
DELIMITER ;

  
  
  
 
DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_LOADDATA`;
CREATE  DEFINER=`root`@`%`  PROCEDURE `GW_LOADDATA`(FLAG INT, INCRES   BIGINT,PRETIME INT)
TOP:
BEGIN
DECLARE  STR  NVARCHAR(5120) DEFAULT '';
DECLARE  STR1  NVARCHAR(5120) DEFAULT '';
DECLARE  STR2  NVARCHAR(5120) DEFAULT '';
DECLARE  STR3  NVARCHAR(5120) DEFAULT '';
DECLARE P_STR NVARCHAR(4000) DEFAULT '';
DECLARE TBNAME  VARCHAR(30) ;
DECLARE TBNAMEBAK VARCHAR(30);
DECLARE STARTID  BIGINT DEFAULT 0;
DECLARE MINID  BIGINT DEFAULT 0;
DECLARE ENDID  BIGINT DEFAULT 0;
DECLARE CURMINID  BIGINT DEFAULT 0;
DECLARE CURENDID BIGINT DEFAULT 0;
DECLARE COUNTID  BIGINT DEFAULT 0;
DECLARE NUM  BIGINT DEFAULT 0;
DECLARE TNUM  BIGINT DEFAULT 0;
DECLARE REMAINDER  BIGINT DEFAULT 0;
DECLARE ISSUCCES  BIGINT DEFAULT 1;
DECLARE TRANLOGID  BIGINT DEFAULT 0;
DECLARE TBNAMEERR VARCHAR(30);
DECLARE CURMINID1  BIGINT DEFAULT 0;

DECLARE I  BIGINT DEFAULT 0;
DECLARE J  BIGINT DEFAULT 0;

DECLARE C_ID INT;
DECLARE C_STARTID INT;
DECLARE C_ENDID INT;
DECLARE DONE INT DEFAULT 0;
      ##异常代码
 DECLARE PICODE  INT DEFAULT 0;
 DECLARE PICODE1  INT DEFAULT 0;
 DECLARE CUR1 CURSOR FOR SELECT  ID,STARTID,ENDID FROM GW_TRAN_DEL_LOG WHERE OPRTYPE=FLAG+4 AND ISSUCCES = 0;

 DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION SET PICODE=1;
 DECLARE CONTINUE HANDLER  FOR SQLSTATE '23000'  SET PICODE=2  ;
 DECLARE CONTINUE HANDLER  FOR NOT FOUND SET DONE = 1;
 ##DECLARE CUR1 CURSOR FOR SELECT  ID,STARTID,ENDID FROM GW_TRAN_DEL_LOG WHERE OPRTYPE=FLAG+4 AND ISSUCCES = 0;

SELECT  IFNULL(MAX(ENDID),0)  INTO STARTID  FROM GW_TRAN_DEL_LOG WHERE OPRTYPE=FLAG AND ISSUCCES = 1;  ##根据 上次成功转移的记录查找本次转移的开始id


 IF FLAG =1 THEN
 SELECT IFNULL(MIN(ID),0),IFNULL(MAX(ID),0),IFNULL(COUNT(ID),0) INTO  MINID,ENDID,COUNTID  FROM  MT_TASK  WHERE SENDTIME<=DATE_SUB(NOW(),INTERVAL PRETIME MINUTE);   ##转移十分钟前的数据 
 INSERT INTO MT_TASK(PTMSGID)  VALUES( CAST(DATE_FORMAT(NOW(),'%Y%m%d%H%i%s') AS SIGNED));
 SET  TBNAME ='MT_TASK';
 SET TBNAMEBAK ='GW_MT_TASK_BAK';
 SET    STR1='(ID , PTMSGID , UID , ECID , USERID , SPID , SPGATE , CPNO , PHONE , SPMSGID , RETFLAG , FEEFLAG , PKNUMBER , PKTOTAL , SENDSTATUS ,SENDFLAG , RECVFLAG , DONEDATE , ERRORCODE ,  SENDLEVEL , SENDTYPE , UNICOM , MOBILEAREA , SENDTIME , RECVTIME , MESSAGE ,  RESENDCNT , TASKID , MSGFMT , LONGMSGSEQ , TPUDHI ,  TPPID , USERMSGID ,  MODULEID ,  SVRTYPE  , P1  ,  P2 ,  P3 ,  P4 ,  RECVMTTIME ,  TRANSMTTIME , TRANSRPTTIME , SENDRPTTIME , ATTIME , VALIDTIME , BATCHID , AREACODE ,FLAGMTSDOK,FLAGRPTRVOK,FLAGRPTSDOK,MTSUBMITTIME,ERRRESENDCNT,NETERRCNT,SENDRESULT,SPGATESEND,SPNUMBER,SENDERRCODE,SUBMITDATE )';
 SET    STR2 = '`ID`,`PTMSGID`,`UID`,`ECID`,`USERID`,`SPID`,`SPGATE`,`CPNO`,`PHONE`,`SPMSGID`,`RETFLAG`,`FEEFLAG`,`PKNUMBER`,`PKTOTAL`,`SENDSTATUS`,`SENDFLAG`,`RECVFLAG`,`DONEDATE`,`ERRORCODE`, `SENDLEVEL`,`SENDTYPE`,`UNICOM`,`MOBILEAREA`,`SENDTIME`,`RECVTIME`,`MESSAGE`, `RESENDCNT`,`TASKID`,`MSGFMT`,`LONGMSGSEQ`,`TPUDHI`, `TPPID`,`USERMSGID`, `MODULEID`, `SVRTYPE` ,`P1` , `P2`, `P3`, `P4`, `RECVMTTIME`, `TRANSMTTIME`,`TRANSRPTTIME`,`SENDRPTTIME`,`ATTIME`,`VALIDTIME`,`BATCHID`,`AREACODE`,0 AS FLAGMTSDOK,0 AS FLAGRPTRVOK, 0 AS FLAGRPTSDOK,NOW() AS  MTSUBMITTIME,0 AS ERRRESENDCNT,0 AS NETERRCNT,1 AS SENDRESULT,'''' AS SPGATESEND,'''' AS SPNUMBER,'''' AS SENDERRCODE,'''' AS  SUBMITDATE ';
SET     STR3=' ID , PTMSGID , UID , ECID , USERID , SPID , SPGATE , CPNO , PHONE , SPMSGID , RETFLAG , FEEFLAG , PKNUMBER , PKTOTAL , SENDSTATUS ,SENDFLAG , RECVFLAG , DONEDATE , ERRORCODE ,  SENDLEVEL , SENDTYPE , UNICOM , MOBILEAREA , SENDTIME , RECVTIME , MESSAGE ,  RESENDCNT , TASKID , MSGFMT , LONGMSGSEQ , TPUDHI ,  TPPID , USERMSGID ,  MODULEID ,  SVRTYPE  , P1  ,  P2 ,  P3 ,  P4 ,  RECVMTTIME ,  TRANSMTTIME , TRANSRPTTIME , SENDRPTTIME , ATTIME , VALIDTIME , BATCHID , AREACODE ,FLAGMTSDOK,FLAGRPTRVOK,FLAGRPTSDOK,MTSUBMITTIME,ERRRESENDCNT,NETERRCNT,SENDRESULT,SPGATESEND,SPNUMBER,SENDERRCODE,SUBMITDATE  ';
ELSE
  LEAVE TOP;
END IF;

IF ( ENDID=0 ) THEN
##IF ( ENDID=0 and MINID=0 ) THEN
  LEAVE TOP;
END IF;

##针对 前几次 删除 不成功处理   循环读出 然后删除  更新控制表
IF MINID  < STARTID+1  THEN
 OPEN CUR1;
       FETCH CUR1 INTO C_ID, C_STARTID,C_ENDID;
      WHILE DONE<1 DO 
        SET P_STR= CONCAT('DELETE FROM ',TBNAME,' WHERE ID BETWEEN ',C_STARTID,' and ',C_ENDID);
       SET @SQL = P_STR;
        PREPARE stmt FROM @SQL;
         EXECUTE stmt;
          DEALLOCATE PREPARE stmt; 
       IF PICODE =0  THEN
       UPDATE GW_TRAN_DEL_LOG SET END_TIME=NOW() ,ISSUCCES=1 WHERE ID=C_ID;   
       END IF;
          FETCH cur1 INTO C_ID, C_STARTID,C_ENDID;
      END WHILE;
CLOSE CUR1;
##把此次转移的起始id重置 根据控制表上次转移成功id 重置  把上次成功转移的最大id 复制给此次转移的最小id
 SET MINID = STARTID+1;
END IF;

##若此次转移的最大id 等于上次成功转移的最大id 则退出
IF  ENDID=MINID-1 THEN
  LEAVE TOP;
END IF;

SET TNUM=CEIL((ENDID-MINID+1)/INCRES);

WHILE (NUM<TNUM) DO

SET CURMINID=MINID+NUM*INCRES;
SET CURENDID=MINID+(NUM+1)*INCRES-1;
IF NUM=TNUM-1 THEN
SET CURENDID=ENDID;
END IF;

INSERT INTO GW_TRAN_DEL_LOG(OPRTYPE,STARTID,ENDID,ISSUCCES,IN_TIME, END_TIME) values(FLAG,CURMINID,CURENDID,0,NOW(),NOW()); ##   mttask  2... 3..  4...
SELECT MAX(ID) INTO TRANLOGID FROM GW_TRAN_DEL_LOG;
##转移数据 循环执行3次
SET I=0;
WHILE (I<3) DO
       SET PICODE=0;
       SET   P_STR=CONCAT('INSERT  INTO ',TBNAMEBAK,STR1,'  SELECT ',STR2,' FROM ',TBNAME,' WHERE ID BETWEEN ',CURMINID,' AND ',CURENDID);
        SET @SQL = P_STR;
         PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt; 
    SET PICODE1=PICODE;
   ## select PICODE ,'PICODE',i,CURMINID,CURENDID;
     IF PICODE1=0 THEN    ##插入数据正常
        UPDATE GW_TRAN_DEL_LOG SET END_TIME= NOW(),ISSUCCES=1 WHERE ID=TRANLOGID;
        INSERT INTO GW_TRAN_DEL_LOG(OPRTYPE,STARTID,ENDID,ISSUCCES,IN_TIME, END_TIME) values(FLAG+4,CURMINID,CURENDID,0,NOW(),NOW());  ##1   mttask  2... 3..  4...
        SELECT MAX(ID) INTO TRANLOGID FROM GW_TRAN_DEL_LOG;
         SET J=0;  
         WHILE J<3 DO
            SET PICODE=0;
            SET P_STR= CONCAT('DELETE FROM ',TBNAME,' WHERE ID BETWEEN ',CURMINID,' AND ',CURENDID);
             SET @SQL = P_STR;
            PREPARE stmt FROM @SQL;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt; 
           IF PICODE =0  THEN  ##删除数据正常
                UPDATE GW_TRAN_DEL_LOG SET END_TIME=NOW() ,ISSUCCES=1 WHERE ID=TRANLOGID;
                SET  J=3;
              ELSE
                SET J=J+1;
              END IF;
          END WHILE;   ##END WHILE J<3 DO
      SET   I=3;
      END IF;

      IF PICODE1=2 THEN  ##插入数据遇到主键错误
         ##先把重合的id转移到err表  
       SET CURMINID1=CURMINID; 
       WHILE  CURMINID1<=CURENDID DO 
         SET PICODE=0;
  
         SET P_STR =CONCAT('INSERT  INTO GW_MT_TASK_BAK',STR1,'  SELECT ',STR2,' FROM ',TBNAME,'  WHERE ID= ',CURMINID1);
         SET @SQL = P_STR;
         PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt; 
        IF PICODE>0 THEN
            SET P_STR =CONCAT('INSERT  INTO GW_MT_TASK_ERR',STR1,'  SELECT ',STR2,' FROM ',TBNAME,'  WHERE ID= ',CURMINID1);
           SET @SQL = P_STR;
            PREPARE stmt FROM @SQL;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt; 
        END IF;
         SET P_STR =CONCAT( 'DELETE FROM ',TBNAME,' WHERE ID= ',CURMINID1);
         SET @SQL = P_STR;
         PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt; 
     
        SET CURMINID1=CURMINID1+1;
        END WHILE;
       SET I=I+1;
     END IF;
 
      IF PICODE1=1 THEN 
        INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('LOADDATA',CONCAT(TBNAME,'...TO...',TBNAMEBAK),'转移数据错误');
        SET I=I+1; 
     END IF;

END WHILE; 
SET NUM=NUM+1;
END WHILE;  
 DELETE FROM GW_MT_TASK_BAK WHERE PTMSGID BETWEEN 0 AND 30000000000000;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_UPPMTSDOK`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_UPPMTSDOK`(PRETIME BIGINT,INCRES BIGINT,STARTTIME DATETIME)
TOP:
BEGIN
 DECLARE ROWS1 BIGINT DEFAULT 0;
 DECLARE LOGID BIGINT DEFAULT 0;
 DECLARE PICODE BIGINT DEFAULT 0;

 DECLARE MAXID  BIGINT DEFAULT 0;
 DECLARE MINID BIGINT DEFAULT 0;
 DECLARE CURMINID  BIGINT DEFAULT 0;
 DECLARE CURMAXID  BIGINT DEFAULT 0;
 DECLARE NUM  BIGINT DEFAULT 0;
 DECLARE TNUM  BIGINT DEFAULT 0;

 DECLARE ENDTTIME DATETIME ;
 DECLARE MINLONG BIGINT DEFAULT 0;

 DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION SET PICODE=1;

##更新MT_SDOK表-------------------------------------------

SELECT IFNULL(MIN(ID),0),IFNULL(MAX(ID),0) INTO  MINID,MAXID  FROM  GW_MTSDOK ;

IF MINID=0 AND MAXID=0 THEN
LEAVE TOP;
END IF;

SET TNUM=CEIL((MAXID-MINID+1)/INCRES);
SET NUM=0;

WHILE (NUM<TNUM) DO
SET CURMINID=MINID+NUM*INCRES;
SET CURMAXID=MINID+(NUM+1)*INCRES-1;
IF NUM=TNUM-1 THEN
SET CURMAXID=MAXID;
END IF;

INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(1,1,0,0,NOW(),NOW());
SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
SET PICODE = 0;
UPDATE GW_MT_TASK_BAK A ,GW_MTSDOK  B
SET A.SPMSGID     =B.SPMSGID ,
      A.SENDSTATUS  =A.SENDSTATUS+10,
      A.SPID        =B.SPID,
      A.TRANSMTTIME =B.TRANSMTTIME,
      A.MTSUBMITTIME=B.MTSUBMITTIME,
      A.SENDTIME    =B.SENDTIME,
      A.ERRRESENDCNT=B.ERRRESENDCNT,
      A.NETERRCNT   =B.NETERRCNT,
      A.SENDRESULT  =B.SENDRESULT,
      A.SPGATESEND  =B.SPGATESEND,
     
      A.SENDERRCODE =B.SENDERRCODE,
     
      A.FLAGMTSDOK=1 WHERE A.FLAGMTSDOK=0 AND A.PTMSGID=B.PTMSGID AND B.ID >= CURMINID AND B.ID <= CURMAXID;   
  SET ROWS1=ROW_COUNT();
   IF PICODE = 0 THEN
      UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID  ;

   END IF;

##删除更新成功的
  INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(4,0,0,0,NOW(),NOW());
  SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
  SET  PICODE = 0;
  DELETE FROM  GW_MTSDOK WHERE EXISTS (SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE GW_MTSDOK.PTMSGID =GW_MT_TASK_BAK.PTMSGID AND GW_MT_TASK_BAK.FLAGMTSDOK=1  ) AND ID >= CURMINID AND ID <= CURMAXID;
  SET ROWS1=ROW_COUNT();
   IF PICODE = 0 THEN
   UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW()  WHERE ID=LOGID ;
  END IF;
SET MINLONG=TIMESTAMPDIFF(MINUTE,STARTTIME,NOW());
IF MINLONG>=PRETIME THEN
    SET NUM=TNUM;
ELSE
    SET NUM=NUM+1;
END IF;
END WHILE;
END;;
DELIMITER ;



DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_UPPRPTRVOK`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_UPPRPTRVOK`(PRETIME BIGINT,INCRES BIGINT,STARTTIME DATETIME)
TOP:
BEGIN
 DECLARE ROWS1 BIGINT DEFAULT 0;
 DECLARE LOGID BIGINT DEFAULT 0;
 DECLARE PICODE BIGINT DEFAULT 0;

 DECLARE MAXID  BIGINT DEFAULT 0;
 DECLARE MINID BIGINT DEFAULT 0;
 DECLARE CURMINID  BIGINT DEFAULT 0;
 DECLARE CURMAXID  BIGINT DEFAULT 0;
 DECLARE NUM  BIGINT DEFAULT 0;
 DECLARE TNUM  BIGINT DEFAULT 0;

 DECLARE ENDTTIME DATETIME ;
 DECLARE MINLONG BIGINT DEFAULT 0;
 DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION SET PICODE=1;
##更新rpt_rvok表-------------------------------------------
SELECT IFNULL(MIN(ID),0),IFNULL(MAX(ID),0) INTO  MINID,MAXID  FROM  GW_RPTRVOK ;

IF MINID=0 AND MAXID=0 THEN
LEAVE TOP;
END IF;

SET TNUM=CEIL((MAXID-MINID+1)/INCRES);
SET NUM=0;
WHILE (NUM<TNUM) DO
SET CURMINID=MINID+NUM*INCRES;
SET CURMAXID=MINID+(NUM+1)*INCRES-1;
IF NUM=TNUM-1 THEN
SET CURMAXID=MAXID;
END IF;

INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(2,1,0,0,NOW(),NOW());
SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;

SET PICODE=0 ;
update  GW_MT_TASK_BAK A,GW_RPTRVOK B 
  set  A.SENDSTATUS=A.SENDSTATUS+100,
      A.RECVTIME  =B.RECVTIME  ,
      A.DONEDATE  =B.DONEDATE  ,
      A.SUBMITDATE=B.SUBMITDATE,
      A.ERRORCODE =B.ERRORCODE ,
   
      A.FLAGRPTRVOK=1 WHERE A.FLAGRPTRVOK=0 AND  A.PTMSGID=B.PTMSGID AND B.ID >= CURMINID AND B.ID <= CURMAXID;        
     SET ROWS1=ROW_COUNT();
   IF PICODE=0 THEN
      UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID  AND ISSUCCES=0;
   END IF;


##删除更新成功的
  INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(5,0,0,0,NOW(),NOW());
SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
 SET  PICODE=0;
  DELETE FROM  GW_RPTRVOK WHERE EXISTS (SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE GW_RPTRVOK.PTMSGID =GW_MT_TASK_BAK.PTMSGID AND GW_MT_TASK_BAK.FLAGRPTRVOK=1 ) AND ID >= CURMINID AND ID <= CURMAXID; 
  SET ROWS1=ROW_COUNT();
  IF PICODE=0 THEN
    UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID;
  END IF;
SET MINLONG=TIMESTAMPDIFF(MINUTE,STARTTIME,NOW());
 IF MINLONG>=PRETIME THEN
    SET NUM=TNUM;
ELSE
    SET NUM=NUM+1;
END IF;

END WHILE;
END;;
DELIMITER ;





DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_UPPRPTSDOK`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_UPPRPTSDOK`(PRETIME BIGINT,INCRES BIGINT,STARTTIME DATETIME)
TOP:
BEGIN
 DECLARE ROWS1 BIGINT DEFAULT 0;
 DECLARE LOGID BIGINT DEFAULT 0;
 DECLARE PICODE BIGINT DEFAULT 0;

 DECLARE MAXID  BIGINT DEFAULT 0;
 DECLARE MINID BIGINT DEFAULT 0;
 DECLARE CURMINID  BIGINT DEFAULT 0;
 DECLARE CURMAXID  BIGINT DEFAULT 0;
 DECLARE NUM  BIGINT DEFAULT 0;
 DECLARE TNUM  BIGINT DEFAULT 0;

 DECLARE ENDTTIME DATETIME ;
 DECLARE MINLONG BIGINT DEFAULT 0;
 DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION SET PICODE=1;
##-更新rpt_SDok表-

 SELECT IFNULL(MIN(ID),0),IFNULL(MAX(ID),0) INTO  MINID,MAXID  FROM  GW_RPTSDOK;

IF MINID=0 AND MAXID=0 THEN
LEAVE TOP;
END IF;

SET TNUM=CEIL((MAXID-MINID+1)/INCRES);
SET NUM=0;
WHILE (NUM<TNUM) DO

SET CURMINID=MINID+NUM*INCRES;
SET CURMAXID=MINID+(NUM+1)*INCRES-1;
IF NUM=TNUM-1 THEN
SET CURMAXID=MAXID;
END IF;

 INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(3,1,0,0,NOW(),NOW());
SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
SET PICODE=0;
update GW_MT_TASK_BAK  A, GW_RPTSDOK  B
 set  A.SENDSTATUS  =A.SENDSTATUS+1000  ,
       A.SENDFLAG    =B.SENDFLAG    ,
       A.SENDRPTTIME =B.SENDRPTTIME ,
       A.TRANSRPTTIME=B.TRANSRPTTIME,
       A.ERRORCODE   =B.ERRORCODE   ,
       A.FLAGRPTSDOK=1 WHERE  A.FLAGRPTSDOK=0 AND A.PTMSGID=B.PTMSGID AND B.ID >= CURMINID AND B.ID <= CURMAXID; 
   SET ROWS1=ROW_COUNT();      
   IF PICODE=0 THEN
            UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID  AND ISSUCCES=0;
   END IF;

##删除更新成功的
  INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(6,0,0,0,NOW(),NOW());
  SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
 SET PICODE=0;
  DELETE FROM  GW_RPTSDOK WHERE EXISTS (SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE GW_RPTSDOK.PTMSGID =GW_MT_TASK_BAK.PTMSGID AND GW_MT_TASK_BAK.FLAGRPTSDOK=1 ) AND ID >= CURMINID AND ID <= CURMAXID;
 SET ROWS1=ROW_COUNT();
 IF PICODE=0 THEN
       UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID;
  END IF;
SET MINLONG=TIMESTAMPDIFF(MINUTE,STARTTIME,NOW());
 IF MINLONG>=PRETIME THEN
    SET NUM=TNUM;
ELSE
    SET NUM=NUM+1;
END IF;
END WHILE;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_UPPDATA_ALL`;
CREATE  DEFINER=`root`@`%`  PROCEDURE `GW_UPPDATA_ALL`(PRETIME INT,INCRES_LOAD   BIGINT,INCRES BIGINT)
BEGIN

 DECLARE ROWS1 BIGINT DEFAULT 0;
 DECLARE LOGID BIGINT DEFAULT 0;
 DECLARE PICODE BIGINT DEFAULT 0;
 DECLARE COUNTID BIGINT DEFAULT 0;
 DECLARE MAXID  BIGINT DEFAULT 0;
 DECLARE MINID BIGINT DEFAULT 0;
 DECLARE CURMINID  BIGINT DEFAULT 0;
 DECLARE CURMAXID  BIGINT DEFAULT 0;
 DECLARE NUM  BIGINT DEFAULT 0;
 DECLARE TNUM  BIGINT DEFAULT 0;
 DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION SET PICODE=1;
 

 CALL GW_LOADDATA(1,INCRES_LOAD,PRETIME) ;

##更新MT_SDOK表-------------------------------------------

 SELECT IFNULL(MIN(ID),0),IFNULL(MAX(ID),0),IFNULL(COUNT(ID),0) INTO  MINID,MAXID,COUNTID  FROM  GW_MTSDOK ;
SET TNUM=CEIL((MAXID-MINID+1)/INCRES);
SET NUM=0;
WHILE (NUM<TNUM) DO

SET CURMINID=MINID+NUM*INCRES;
SET CURMAXID=MINID+(NUM+1)*INCRES-1;
IF NUM=TNUM-1 THEN
SET CURMAXID=MAXID;
END IF;

INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(1,1,0,0,NOW(),NOW());
SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
SET PICODE = 0;
UPDATE GW_MT_TASK_BAK A ,GW_MTSDOK  B
SET A.SPMSGID     =B.SPMSGID ,
      A.SENDSTATUS  =A.SENDSTATUS+10,
      A.SPID        =B.SPID,
      A.TRANSMTTIME =B.TRANSMTTIME,
      A.MTSUBMITTIME=B.MTSUBMITTIME,
      A.SENDTIME    =B.SENDTIME,
      A.ERRRESENDCNT=B.ERRRESENDCNT,
      A.NETERRCNT   =B.NETERRCNT,
      A.SENDRESULT  =B.SENDRESULT,
      A.SPGATESEND  =B.SPGATESEND,
    
      A.SENDERRCODE =B.SENDERRCODE,
     
      A.FLAGMTSDOK=1 WHERE A.FLAGMTSDOK=0 AND A.PTMSGID=B.PTMSGID AND B.ID >= CURMINID AND B.ID <= CURMAXID;   
  SET ROWS1=ROW_COUNT();
   IF PICODE = 0 THEN
      UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID  ;

   END IF;

##删除更新成功的
  INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(4,0,0,0,NOW(),NOW());
  SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
  DELETE FROM  GW_MTSDOK WHERE EXISTS (SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE GW_MTSDOK.PTMSGID =GW_MT_TASK_BAK.PTMSGID AND GW_MT_TASK_BAK.FLAGMTSDOK=1  ) AND ID >= CURMINID AND ID <= CURMAXID;
  SET ROWS1=ROW_COUNT();
  IF ROWS1>=0 THEN
   UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW()  WHERE ID=LOGID ;
  END IF;
SET NUM=NUM+1;
END WHILE;

##更新rpt_rvok表-------------------------------------------
 SELECT IFNULL(MIN(ID),0),IFNULL(MAX(ID),0),IFNULL(COUNT(ID),0) INTO  MINID,MAXID,COUNTID  FROM  GW_RPTRVOK ;
SET TNUM=CEIL((MAXID-MINID+1)/INCRES);
SET NUM=0;
WHILE (NUM<TNUM) DO

SET CURMINID=MINID+NUM*INCRES;
SET CURMAXID=MINID+(NUM+1)*INCRES-1;
IF NUM=TNUM-1 THEN
SET CURMAXID=MAXID;
END IF;

INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(2,1,0,0,NOW(),NOW());
SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;

SET PICODE=0 ;
update  GW_MT_TASK_BAK A,GW_RPTRVOK B 
  set  A.SENDSTATUS=A.SENDSTATUS+100,
      A.RECVTIME  =B.RECVTIME  ,
      A.DONEDATE  =B.DONEDATE  ,
      A.SUBMITDATE=B.SUBMITDATE,
      A.ERRORCODE =B.ERRORCODE ,
     
      A.FLAGRPTRVOK=1 WHERE A.FLAGRPTRVOK=0 AND  A.PTMSGID=B.PTMSGID AND B.ID >= CURMINID AND B.ID <= CURMAXID;        
     SET ROWS1=ROW_COUNT();
   IF PICODE=0 THEN
      UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID  AND ISSUCCES=0;
   END IF;


##删除更新成功的
  INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(5,0,0,0,NOW(),NOW());
SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
  DELETE FROM  GW_RPTRVOK WHERE EXISTS (SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE GW_RPTRVOK.PTMSGID =GW_MT_TASK_BAK.PTMSGID AND GW_MT_TASK_BAK.FLAGRPTRVOK=1 ) AND ID >= CURMINID AND ID <= CURMAXID; 
  SET ROWS1=ROW_COUNT();
  IF ROWS1>=0 THEN
    UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID;
  END IF;

SET NUM=NUM+1;

END WHILE;


##-更新rpt_SDok表-

 SELECT IFNULL(MIN(ID),0),IFNULL(MAX(ID),0),IFNULL(COUNT(ID),0) INTO  MINID,MAXID,COUNTID  FROM  GW_RPTSDOK;
SET TNUM=CEIL((MAXID-MINID+1)/INCRES);
SET NUM=0;
WHILE (NUM<TNUM) DO

SET CURMINID=MINID+NUM*INCRES;
SET CURMAXID=MINID+(NUM+1)*INCRES-1;
IF NUM=TNUM-1 THEN
SET CURMAXID=MAXID;
END IF;

 INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(3,1,0,0,NOW(),NOW());
SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
SET PICODE=0;
update GW_MT_TASK_BAK  A, GW_RPTSDOK  B
 set  A.SENDSTATUS  =A.SENDSTATUS+1000  ,
       A.SENDFLAG    =B.SENDFLAG    ,
       A.SENDRPTTIME =B.SENDRPTTIME ,
       A.TRANSRPTTIME=B.TRANSRPTTIME,
       A.ERRORCODE   =B.ERRORCODE   ,
       A.FLAGRPTSDOK=1 WHERE  A.FLAGRPTSDOK=0 AND A.PTMSGID=B.PTMSGID AND B.ID >= CURMINID AND B.ID <= CURMAXID;     
   SET ROWS1=ROW_COUNT();  
   IF PICODE=0 THEN
            UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID  AND ISSUCCES=0;
   END IF;

##删除更新成功的
  INSERT INTO GW_UPD_DEL_LOG(OPRTYPE,UPTYPE,COUNTID,ISSUCCES,IN_TIME,END_TIME) VALUES(6,0,0,0,NOW(),NOW());
  SELECT MAX(ID) INTO LOGID FROM GW_UPD_DEL_LOG;
  DELETE FROM  GW_RPTSDOK WHERE EXISTS (SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE GW_RPTSDOK.PTMSGID =GW_MT_TASK_BAK.PTMSGID AND GW_MT_TASK_BAK.FLAGRPTSDOK=1 ) AND ID >= CURMINID AND ID <= CURMAXID;
   SET ROWS1=ROW_COUNT();
  IF ROWS1>=0 THEN
       UPDATE GW_UPD_DEL_LOG SET COUNTID=ROWS1,ISSUCCES=1, END_TIME=NOW() WHERE ID=LOGID;
  END IF;
SET NUM=NUM+1;
END WHILE;

END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_UPPDATAMODE2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_UPPDATAMODE2`( PRETIME INT,INCRES_LOAD BIGINT,INCRES_UPP BIGINT)
TOP:
BEGIN
 DECLARE STARTTIME DATETIME ;
 DECLARE ENDTTIME DATETIME ;
 DECLARE MINLONG BIGINT DEFAULT 0;
 DECLARE I BIGINT DEFAULT 0;
 
WHILE (I<3) DO
SET STARTTIME=NOW();
  CALL GW_LOADDATAV1(1,INCRES_LOAD,PRETIME) ;

SET MINLONG=TIMESTAMPDIFF(MINUTE,STARTTIME,NOW());
IF MINLONG>=PRETIME THEN
   SET I=I+1;
ELSE
   CALL GW_UPPMTSDOK(PRETIME,INCRES_UPP,STARTTIME);
   SET MINLONG=TIMESTAMPDIFF(MINUTE,STARTTIME,NOW());
   IF MINLONG>=PRETIME THEN
   SET I=I+1;
   ELSE
     CALL GW_UPPRPTRVOK(PRETIME,INCRES_UPP,STARTTIME);
      SET MINLONG=TIMESTAMPDIFF(MINUTE,STARTTIME,NOW());
      IF MINLONG>=PRETIME THEN
         SET I=I+1;
     ELSE
        CALL GW_UPPRPTSDOK(PRETIME,INCRES_UPP,STARTTIME);
          SET MINLONG=TIMESTAMPDIFF(MINUTE,STARTTIME,NOW());
            IF MINLONG>=PRETIME THEN
              SET I=I+1;
            ELSE
              SET I=5;
            END IF;
     END IF;
  END IF;
END IF;
END WHILE;  
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_DEL_ERR`;
CREATE  DEFINER=`root`@`%`  PROCEDURE `GW_DEL_ERR`()
BEGIN
DECLARE STR NVARCHAR(5120);
DECLARE STR1 NVARCHAR(5120);
DECLARE  STR2  NVARCHAR(5120) DEFAULT '';
DECLARE PROCESSFLAG BIGINT;
 DECLARE PIERROR NVARCHAR(5120);
 DECLARE PICODE BIGINT DEFAULT 0;
 DECLARE I  BIGINT DEFAULT 0;
DECLARE AA VARCHAR(30);
 DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION SET PICODE=1;
 DECLARE CONTINUE HANDLER  FOR SQLSTATE '23000'  SET PICODE=2  ;
  SET PROCESSFLAG=3;

 SET I=0;
 WHILE (I<3) DO
  SET PICODE=0;
 SET STR1=' (ID,PTMSGID,SPMSGID,SENDSTATUS,SPID,TRANSMTTIME,MTSUBMITTIME,SENDTIME,ERRRESENDCNT,NETERRCNT,SENDRESULT,SPGATESEND,SPNUMBER,PHONE,SENDERRCODE,TPUDHI,TPPID,PKTOTAL,PKNUMBER,LONGMSGSEQ,IN_TIME) ';
SET STR2=' ID,PTMSGID,SPMSGID,SENDSTATUS,SPID,TRANSMTTIME,MTSUBMITTIME,SENDTIME,ERRRESENDCNT,NETERRCNT,SENDRESULT,SPGATESEND,SPNUMBER,PHONE,SENDERRCODE,TPUDHI,TPPID,PKTOTAL,PKNUMBER,LONGMSGSEQ,IN_TIME'; 
SET  STR =CONCAT('INSERT  INTO GW_MTSDOK_ERR', STR1,' SELECT ',STR2,' FROM GW_MTSDOK WHERE (IN_TIME  <  ''',DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY),''')');
       SET @SQL = STR;
        PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt;   
  IF PICODE =2  THEN
      DELETE FROM GW_MTSDOK_ERR  WHERE EXISTS (SELECT PTMSGID FROM  GW_MTSDOK  B WHERE GW_MTSDOK_ERR.ID=B.ID AND B.IN_TIME < DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY) ) ;
    ELSEIF PICODE =1  THEN
      INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('TRANERR','GW_MTSDOK..TO..GW_MTSDOK_ERR','转移非主键错误');
    ELSE
        DELETE FROM GW_MTSDOK WHERE  IN_TIME < DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY)  ;
        SET I=3;
  END IF;
 SET I=I+1; 
END WHILE;

 SET I=0; 
 WHILE (I<3) DO
  SET PICODE=0;
  SET STR1='(ID,PTMSGID,SPMSGID,SENDSTATUS,RECVTIME,DONEDATE,SUBMITDATE,ERRORCODE ,PHONE,SPNUMBER,IN_TIME) ';
  SET STR2='ID,PTMSGID,SPMSGID,SENDSTATUS,RECVTIME,DONEDATE,SUBMITDATE,ERRORCODE ,PHONE,SPNUMBER,IN_TIME ';
  SET  STR =CONCAT('INSERT  INTO GW_RPTRVOK_ERR', STR1,' SELECT ',STR2,' FROM GW_RPTRVOK WHERE  (IN_TIME  <  ''',DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY),''')');
       SET @SQL = STR;
        PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt;   
  IF PICODE =2  THEN
      DELETE FROM GW_RPTRVOK_ERR  WHERE EXISTS (SELECT PTMSGID FROM  GW_RPTRVOK  B WHERE GW_RPTRVOK_ERR.ID=B.ID AND B.IN_TIME <DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY) ) ;
    ELSEIF PICODE =1  THEN
      INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('TRANERR','GW_RPTRVOK..TO..GW_RPTRVOK_ERR','转移非主键错误');
    ELSE
        DELETE FROM GW_RPTRVOK WHERE  IN_TIME <DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY) ;
        SET I=3;
  END IF;
   SET I=I+1; 
END WHILE;


 SET I=0;
 WHILE (I<3) DO
  SET PICODE=0;
  SET STR1='( ID,PTMSGID,SPMSGID,SENDSTATUS,SENDFLAG,SENDRPTTIME,TRANSRPTTIME,ERRORCODE,PHONE,SPNUMBER,IN_TIME) ';
  SET STR2=' ID,PTMSGID,SPMSGID,SENDSTATUS,SENDFLAG,SENDRPTTIME,TRANSRPTTIME,ERRORCODE,PHONE,SPNUMBER,IN_TIME ';
  SET  STR =CONCAT('INSERT  INTO GW_RPTSDOK_ERR', STR1,' SELECT ',STR2,' FROM GW_RPTSDOK WHERE  (IN_TIME  <  ''',DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY),''')');    
  SET @SQL = STR;
        PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt;    
  IF PICODE =2  THEN
      DELETE FROM GW_RPTSDOK_ERR  WHERE EXISTS (SELECT PTMSGID FROM  GW_RPTSDOK  B WHERE GW_RPTSDOK_ERR.ID=B.ID AND B.IN_TIME <DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY) );
 ELSEIF PICODE =1  THEN
      INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('TRANERR','GW_RPTSDOK..TO..GW_RPTSDOK_ERR','转移非主键错误');
  ELSE 
        DELETE FROM GW_RPTSDOK WHERE  IN_TIME < DATE_SUB(CURDATE(),INTERVAL PROCESSFLAG DAY) ;
        SET I=3;
  END IF;
SET I=I+1; 
END WHILE;

DELETE FROM GW_TRAN_DEL_LOG WHERE END_TIME<DATE_SUB(CURDATE(),INTERVAL 90 DAY);
DELETE FROM GW_UPD_DEL_LOG WHERE END_TIME<DATE_SUB(CURDATE(),INTERVAL 90 DAY);

DELETE FROM GW_MT_TASK_ERR WHERE SENDTIME<DATE_SUB(CURDATE(),INTERVAL 90 DAY);
DELETE FROM GW_MTSDOK_ERR WHERE IN_TIME<DATE_SUB(CURDATE(),INTERVAL 90 DAY);
DELETE FROM GW_RPTRVOK_ERR WHERE IN_TIME<DATE_SUB(CURDATE(),INTERVAL 90 DAY);
DELETE FROM GW_RPTSDOK_ERR WHERE IN_TIME<DATE_SUB(CURDATE(),INTERVAL 90 DAY);

END;;
DELIMITER ;






DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_MTSDOK`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTSDOK`
 (PIPTMSGID BIGINT,
  PISPMSGID BIGINT,
  PISENDSTATUS INT,
  PISPID  VARCHAR(32),
  PITRANSMTTIME DATETIME,
  PIMTSUBMITTIME DATETIME,
  PISENDTIME DATETIME,
  PIERRRESENDCNT INT,
  PINETERRCNT INT,
  PISENDRESULT INT,
  PISPGATESEND VARCHAR(21),
  PISPNUMBER VARCHAR(21),
  PIPHONE  VARCHAR(21),
  PISENDERRCODE   VARCHAR(10),
  PITPUDHI INT  ,
  PITPPID INT  ,
  PIPKTOTAL INT  ,
  PIPKNUMBER INT  ,
  PILONGMSGSEQ  INT 
 )
BEGIN
  IF NOT EXISTS (SELECT PTMSGID   FROM GW_MTSDOK WHERE PTMSGID = PIPTMSGID)  THEN
     INSERT INTO GW_MTSDOK(PTMSGID,SPMSGID,SENDSTATUS,SPID,TRANSMTTIME,MTSUBMITTIME,SENDTIME,ERRRESENDCNT,NETERRCNT,SENDRESULT,SPGATESEND,SPNUMBER,PHONE,SENDERRCODE,TPUDHI,TPPID,PKTOTAL,PKNUMBER,LONGMSGSEQ)
     VALUES(PIPTMSGID,PISPMSGID,PISENDSTATUS,PISPID,PITRANSMTTIME,PIMTSUBMITTIME,PISENDTIME,PIERRRESENDCNT,PINETERRCNT,PISENDRESULT,PISPGATESEND,PISPNUMBER,PIPHONE,PISENDERRCODE,PITPUDHI,PITPPID,PIPKTOTAL,PIPKNUMBER,PILONGMSGSEQ);
  END IF;
END;;
DELIMITER ;

 
DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_RPTRVOK`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_RPTRVOK`
 (   PIPTMSGID BIGINT,
     PISPMSGID BIGINT,
     PISENDSTATUS INT ,
     PIRECVTIME DATETIME ,
     PIDONEDATE CHAR(10) ,
     PISUBMITDATE  CHAR(10) ,
     PIERRORCODE   CHAR(7) ,
     PIPHONE VARCHAR(21) ,
     PISPNUMBER  VARCHAR(21)
 )
BEGIN
	 
  IF NOT EXISTS (SELECT PTMSGID  FROM GW_RPTRVOK WHERE PTMSGID = PIPTMSGID ) THEN
     INSERT INTO GW_RPTRVOK(PTMSGID,SPMSGID,SENDSTATUS,RECVTIME,DONEDATE,SUBMITDATE,ERRORCODE ,PHONE,SPNUMBER )
     VALUES(PIPTMSGID,PISPMSGID,PISENDSTATUS,PIRECVTIME,PIDONEDATE,PISUBMITDATE,PIERRORCODE ,PIPHONE,PISPNUMBER);
  END IF;

END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_RPTSDOK`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_RPTSDOK`
 (  PIPTMSGID BIGINT ,
  PISPMSGID BIGINT ,
  PISENDSTATUS BIGINT,
  PISENDFLAG BIGINT,
  PISENDRPTTIME  DATETIME ,
  PITRANSRPTTIME DATETIME  ,
  PIERRORCODE  CHAR(7) ,
  PIPHONE VARCHAR(21),
  PISPNUMBER  VARCHAR(21) 
 )
BEGIN
	 
   IF NOT EXISTS (SELECT PTMSGID   FROM GW_RPTSDOK WHERE PTMSGID = PIPTMSGID)  THEN
     INSERT INTO GW_RPTSDOK(PTMSGID,SPMSGID,SENDSTATUS,SENDFLAG,SENDRPTTIME,TRANSRPTTIME,ERRORCODE,PHONE,SPNUMBER)
     VALUES(PIPTMSGID,PISPMSGID,PISENDSTATUS,PISENDFLAG,PISENDRPTTIME,PITRANSRPTTIME,PIERRORCODE,PIPHONE,PISPNUMBER);
   END IF;

END;;
DELIMITER ;  
  

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_H_DELTASKV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_DELTASKV1`(P_MININDEX BIGINT,P_MAXINDEX BIGINT,P_PROCESSFLAG INT,P_LOTSIZE INT)
BEGIN
	 DELETE  FROM GW_MT_TASK_BAK  WHERE (ID <= P_MAXINDEX)  ;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_H_TRANSFERV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_TRANSFERV1`(P_MININDEX BIGINT,P_MAXINDEX BIGINT,P_PROCESSFLAG INT,P_LOTSIZE INT)
BEGIN

	DECLARE P_STR VARCHAR(4000);
	DECLARE P_TABLENAME VARCHAR(20);
        DECLARE   CURYM INT;
        DECLARE   MINYM INT;
        DECLARE   MAXYM INT;

        #转移
        SELECT CAST(DATE_FORMAT(MIN(SENDTIME) ,'%Y%m') AS SIGNED) ,CAST(DATE_FORMAT(MAX(SENDTIME) ,'%Y%m') AS SIGNED)  INTO MINYM,MAXYM FROM GW_MT_TASK_BAK WHERE ID BETWEEN P_MININDEX AND P_MAXINDEX;
        SET CURYM = MINYM;
        WHILE CURYM<=MAXYM DO

	SET P_TABLENAME = CONCAT('MTTASK',CURYM );
        SET P_STR = CONCAT('INSERT  INTO ',P_TABLENAME,
			 ' (ID,MDAY,USERID,SPGATE,CPNO,PHONE,SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,SENDTIME,RECVTIME,MESSAGE,TASKID,ECID,PTMSGID,MOBILEAREA,SPID,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,CUSTID,EXDATA)
                          SELECT ID, DATE_FORMAT(M.SENDTIME,''%d'') AS MDAY,USERID,SPGATE,CPNO,PHONE,SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,SENDTIME,RECVTIME,MESSAGE,TASKID,ECID,PTMSGID,MOBILEAREA,SPID,SVRTYPE,
                          P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,CUSTID,EXDATA
                          FROM GW_MT_TASK_BAK M WHERE CAST(DATE_FORMAT(SENDTIME,''%Y%m'') AS SIGNED)=',CURYM,' AND ID<=',P_MAXINDEX);
#SELECT P_STR;
	SET @SQL=P_STR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;

          IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
          ELSE
               SET CURYM = CURYM+1  ;
          END IF;
        END WHILE;
END;;
DELIMITER ;



DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_H_STATISTIV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_STATISTIV2`(P_PROCESSFLAG INT,ISP1 INT,ISP2 INT,ISP3 INT,ISP4 INT)
BEGIN
	DECLARE P_STR NVARCHAR(4000);  
	DECLARE P_USERID VARCHAR(11);
	DECLARE P_TASKID INT;
	DECLARE P_IYMD INT;
	DECLARE P_SPGATE VARCHAR(21);
	DECLARE P_SPISUNCM INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_SPID VARCHAR(21);
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_IHOUR INT;
	DECLARE P_IYEAR INT ;
	DECLARE P_IMONTH INT;
	DECLARE P_ICOUNT INT;
	DECLARE P_SUCC INT;
	DECLARE P_FAIL INT;
	DECLARE P_NRET INT;
  DECLARE MAXCNT INT ;
  DECLARE I INT;
  DECLARE P_SENDTYPE INT;
  DECLARE P_MOBILEAREA INT;
  DECLARE MINIYMD BIGINT;
  DECLARE MAXIYMD BIGINT;
        DROP TEMPORARY TABLE IF  EXISTS P_TMP_STICV2;
	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_STICV2( TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT, USERID VARCHAR(11),TASKID INT,SPGATE VARCHAR(21),SPISUNCM INT,
	SPID VARCHAR(32),SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),
  IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,SUCC INT,FAIL INT,NRET INT,SENDTYPE INT,MOBILEAREA INT,BATCHID BIGINT,AREACODE INT, PRIMARY KEY (TMP_ID)  );
  ALTER TABLE P_TMP_STICV2 AUTO_INCREMENT=1;

 

	SET P_STR = 'SELECT USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE';
        IF  ISP1 =1 THEN
           SET P_STR =CONCAT(P_STR,',P1');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P1');
         END IF;
           IF  ISP2 =1 THEN
           SET P_STR =CONCAT(P_STR,',P2');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P2');
         END IF;
    IF  ISP3 =1 THEN
           SET P_STR =CONCAT(P_STR,',P3');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P3');
         END IF;
    IF  ISP4 =1 THEN
           SET P_STR =CONCAT(P_STR,',P4');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P4');
         END IF;
           SET P_STR =CONCAT(P_STR, ',CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED) AS IYMD,
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED) AS IYEAR,
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED) AS MON,
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED) AS HOUR,
           COUNT(ID),
           SUM(CASE RTRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE 0 END),
           SUM(CASE SUBSTRING(RTRIM(ERRORCODE),1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE 0 END),
           SUM(CASE RTRIM(ERRORCODE) WHEN '''' THEN 1 ELSE 0 END),
           SENDTYPE,
           MOBILEAREA,
           BATCHID,AREACODE
           FROM GW_MT_TASK_BAK WHERE  SENDTIME >=  ''') ;
           SET P_STR=CONCAT(P_STR, DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
           SET P_STR=CONCAT(P_STR,'''  AND SENDTIME < ''');
           SET P_STR=CONCAT(P_STR, CURDATE());
           SET P_STR=CONCAT(P_STR, ''' GROUP BY USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE');
            IF  ISP1 =1 THEN
               SET P_STR =CONCAT(P_STR,',P1');
             END IF;
           IF  ISP2 =1 THEN
               SET P_STR =CONCAT(P_STR,',P2');
             END IF;
           IF  ISP3 =1 THEN
               SET P_STR =CONCAT(P_STR,',P3');
           END IF;
           IF  ISP4 =1 THEN
               SET P_STR =CONCAT(P_STR,',P4');
           END IF;
           SET P_STR=CONCAT(P_STR,',SENDTYPE,MOBILEAREA,BATCHID,AREACODE,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED)');
 
# SELECT P_STR;

  SET @SQL =CONCAT('INSERT INTO P_TMP_STICV2(USERID ,TASKID,SPGATE,SPISUNCM,SPID ,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)', P_STR);#
       PREPARE SL FROM @SQL;
       EXECUTE SL;
       DEALLOCATE PREPARE SL;
   SELECT MIN(IYMD),MAX(IYMD) INTO  MINIYMD,MAXIYMD FROM P_TMP_STICV2 ;
  # DELETE FROM MT_DATAREPORT WHERE IYMD BETWEEN   CAST(DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY),'%Y%m%d') AS SIGNED ) AND  CAST(DATE_FORMAT(CURDATE(),'%Y%m%d') AS SIGNED );

  DELETE FROM MT_DATAREPORT WHERE IYMD BETWEEN   MINIYMD AND  MAXIYMD;
	INSERT INTO MT_DATAREPORT (USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)
	SELECT T.USERID,T.TASKID,T.SPGATE,T.SPISUNCM,T.SPID,T.SVRTYPE,T.P1,T.P2,T.P3,T.P4,T.IYMD,T.IHOUR,T.IMONTH,T.IYEAR,T.ICOUNT,T.SUCC,T.FAIL,(T.ICOUNT-T.SUCC-T.FAIL-T.NRET),T.NRET,T.SENDTYPE,T.MOBILEAREA,T.BATCHID,T.AREACODE FROM P_TMP_STICV2 T;

  TRUNCATE TABLE P_TMP_STICV2;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_RDMTTASKRSV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_RDMTTASKRSV1`(P_MAXRESNDCNT INT,
	P_STRMSGID VARCHAR(4000))
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    SET P_SQLSTR = 'SELECT ID,UID,ECID,TASKID,FEEFLAG,USERID,SPGATE,CPNO,PHONE,PTMSGID,RETFLAG,';
    SET P_SQLSTR = CONCAT(P_SQLSTR,'PKNUMBER,PKTOTAL,SENDSTATUS,SENDLEVEL,TPUDHI,LONGMSGSEQ,MSGFMT,MESSAGE,RECVMTTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA  FROM GW_MT_TASK_BAK ');
    SET P_SQLSTR = CONCAT(P_SQLSTR,'WHERE PTMSGID IN(',P_STRMSGID,') AND RESENDCNT<',P_MAXRESNDCNT);

    SET @SQL = P_SQLSTR;
    PREPARE SL FROM @SQL;
    EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_RDMTTASKRPV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_RDMTTASKRPV1`(PIPTMSGID1 BIGINT,PIUID INT)
TOP:BEGIN
DECLARE  PICOUNT INT;
DECLARE  PICNTTB INT;
DECLARE PISQLSTR VARCHAR(256);
DECLARE PIDBNAME VARCHAR(32);
DECLARE PIMONTH INT;
DECLARE PICURYM INT;
DECLARE PIPTMSGID BIGINT;

SET PICOUNT = 0;
SET PIDBNAME = 'MTTASK';
SET PIPTMSGID=PIPTMSGID1;

#创建临时表
CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTRPTV1(ICOUNT INT);
CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTRPTV11(SPNUMBER VARCHAR(21),PHONE VARCHAR(21),
  DONEDATE CHAR(10),ERRORCODE CHAR(7),RECVRPTTIME VARCHAR(22));
  SELECT COUNT(*) INTO PICOUNT  FROM GW_RPTRVOK WHERE PTMSGID=PIPTMSGID;
  IF PICOUNT > 0 THEN ###GW_RPTRVOK
    ##从实时表中查询需要的数据
    SELECT SPNUMBER,PHONE,DONEDATE,ERRORCODE,
    RECVTIME AS RECVRPTTIME FROM GW_RPTRVOK WHERE PTMSGID=PIPTMSGID;
  ELSE 
  BEGIN      
    SELECT COUNT(*) INTO PICOUNT  FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID AND UID=PIUID;
    IF PICOUNT > 0 THEN ###GW_MT_TASK_BAK
      ##从实时表中查询需要的数据
      SELECT CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) AS SPNUMBER,PHONE,DONEDATE,ERRORCODE,
      SENDTIME AS RECVRPTTIME FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID AND UID=PIUID;
    ELSE
    BEGIN
      SELECT COUNT(*) INTO PICOUNT  FROM MT_TASK WHERE PTMSGID=PIPTMSGID AND UID=PIUID;
      IF PICOUNT > 0 THEN ###MT_TASK
        ##从实时表中查询需要的数据
        SELECT CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) AS SPNUMBER,PHONE,DONEDATE,ERRORCODE,
        SENDTIME AS RECVRPTTIME FROM MT_TASK WHERE PTMSGID=PIPTMSGID AND UID=PIUID;
      ELSE
      BEGIN
        SET PICURYM = CAST(DATE_FORMAT(NOW(),'%Y%m') AS SIGNED);
        SET  PIDBNAME = CONCAT('MTTASK',CAST(PICURYM AS CHAR(6)));
        SET PICOUNT = 0;
        ##从当月历史表中查询需要的数据
        SET PISQLSTR = CONCAT('INSERT INTO P_TMP_MTRPTV1 SELECT  COUNT(*)  FROM ',PIDBNAME,' WHERE PTMSGID=',CAST(PIPTMSGID AS CHAR(20)));
        SET @SQL =PISQLSTR;
        PREPARE SL FROM @SQL ;
        EXECUTE SL ;         
        DEALLOCATE PREPARE SL;
        SELECT ICOUNT INTO PICOUNT FROM P_TMP_MTRPTV1;
        DELETE FROM P_TMP_MTRPTV1;
        IF PICOUNT > 0 THEN###历史
        BEGIN
          SET PISQLSTR = CONCAT('SELECT CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) AS SPNUMBER,PHONE,DONEDATE,ERRORCODE,
          SENDTIME AS RECVRPTTIME FROM ',PIDBNAME,' WHERE PTMSGID=',CAST(PIPTMSGID AS CHAR(20)));
          SET @SQL =PISQLSTR;
          PREPARE SL FROM @SQL ;
          EXECUTE SL ;         
          DEALLOCATE PREPARE SL;
          LEAVE TOP;
        END;
        ELSE
        BEGIN
          SET PIMONTH = 1;
          ##遍历最近三个月的历史表，查询需要的数据
          WHILE PIMONTH <3 DO
            SET PICURYM =PERIOD_ADD(DATE_FORMAT(NOW(),'%Y%m'), -PIMONTH );
            SET PIDBNAME =CONCAT( 'MTTASK', CAST(PICURYM AS CHAR(6)));
            ##判断表是否存在，存在的话在其中查询需要的数据
            SELECT COUNT(TABLE_NAME) INTO PICNTTB FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME=PIDBNAME;
            IF  PICNTTB >0 THEN
              SET PICOUNT = 0;
              SET  PISQLSTR = CONCAT('INSERT INTO P_TMP_MTRPTV1 SELECT  COUNT(*) FROM ',PIDBNAME,' WHERE PTMSGID=',CAST(PIPTMSGID AS CHAR(20)));
	            SET @SQL =PISQLSTR;
              PREPARE SL FROM @SQL ;
              EXECUTE SL ;         
              DEALLOCATE PREPARE SL;
              SELECT ICOUNT  into PICOUNT FROM P_TMP_MTRPTV1;
              DELETE FROM P_TMP_MTRPTV1;
              IF PICOUNT > 0 THEN
                SET PISQLSTR = CONCAT('SELECT CONCAT(RTRIM(SPGATE),RTRIM(CPNO)) AS SPNUMBER,PHONE,DONEDATE,ERRORCODE,
                SENDTIME AS RECVRPTTIME FROM ',PIDBNAME,' WHERE PTMSGID=',CAST(PIPTMSGID AS CHAR(20)));
                SET @SQL =PISQLSTR;
                PREPARE SL FROM @SQL ;
                EXECUTE SL ;         
                DEALLOCATE PREPARE SL;
                LEAVE TOP;##当查询到所需要的数据时，直接退出
              END IF;
            END IF; ##END OF   IF  PICNTTB >0 THEN
            SET PIMONTH = PIMONTH+1;
          END WHILE;
        END;
        END IF;## 历史
      SELECT SPNUMBER, PHONE, DONEDATE, ERRORCODE, RECVRPTTIME FROM P_TMP_MTRPTV11;
      END;
  END IF;##MT_TASK
  END;
  END IF;##GW_MT_TASK_BAK
  END;
  END IF; ##GW_RPTRVOK
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_MTTASKSUPPV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_MTTASKSUPPV1`(P_OLDMSGID BIGINT,
	P_NEWMSGID BIGINT,
	P_SRCUID INT,
	P_SRCUSRID VARCHAR(11),
	P_SRCSPGATE VARCHAR(21),
	P_SRCSPNUMBER VARCHAR(21),
	P_DESTUID INT,
	P_DESTUSRID VARCHAR(11),
	P_DESTSPGATE VARCHAR(21),
	P_DESTSPNUMBER VARCHAR(21),
	P_DESTFEEFLAG INT,
	P_SPLITLEN TINYINT,
	P_MULTILEN1 TINYINT,
	P_MULTILEN2 TINYINT,
	P_NEWSIGNLEN TINYINT,
	P_OLDSIGNLEN TINYINT,
	P_SIGNATURE VARCHAR(20),
  P_NEWSIGNPOS INT,
	P_OLDSIGNPOS INT,
	P_ENSPLITLEN INT, ##英文短信单条长度，小于等于0标识不支持英文短信
  P_ENMULTILEN1 INT, ##英文长短信拆分长度
  P_ENMULTILEN2 INT, ##英文长短信最后一条长度
  P_NEWENSIGNLEN INT, ##补发英文签名长度
  P_OLDENSIGNLEN INT, ##原英文签名长度
  P_ENSIGNATURE VARCHAR(20)##英文签名
	)
BEGIN
	DECLARE P_SENDNUM INT;
	DECLARE P_PKTOTAL INT;
	DECLARE P_PKNUM	 INT;
	DECLARE P_INITMSGID BIGINT;
	DECLARE P_SINGLEMSG VARCHAR(720);
	DECLARE P_LONGMSG VARCHAR(3000);
	DECLARE P_TOTALCNT INT;
	DECLARE P_LONGMSGLEN INT;
	DECLARE P_ECID INT;
	DECLARE P_PHONE VARCHAR(21);
	DECLARE P_SENDLEVEL TINYINT;
	DECLARE P_TASKID INT;
	DECLARE P_RECVMTTIME DATETIME;
	DECLARE P_SRCCPNO  VARCHAR(21);
	DECLARE P_DESTCPNO VARCHAR(21);
	DECLARE P_TPUDHI TINYINT;
	DECLARE P_TPPID TINYINT;
	DECLARE P_LONGMSGSEQ TINYINT UNSIGNED;
	DECLARE P_MSGFMT TINYINT;
	DECLARE P_UNICOM TINYINT;
	DECLARE P_MOBILEAREA INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_USERMSGID BIGINT;
	DECLARE P_SENDTYPE TINYINT;
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_MODULEID INT;
	DECLARE P_ATTIME BIGINT;
	DECLARE P_VALIDTIME BIGINT;
	DECLARE P_BATCHID BIGINT;
  DECLARE P_AREACODE INT;
  
  DECLARE P_SPLITLEN_V INT;
  DECLARE P_MULTILEN1_V INT;
  DECLARE P_MULTILEN2_V INT;
  DECLARE P_NEWSIGNLEN_V INT;
  DECLARE P_OLDSIGNLEN_V INT;
  DECLARE P_SIGNATURE_V  VARCHAR(22);
  
   DECLARE P_RCOUNT1 INT;
        DECLARE P_RCOUNT2 INT;

	SET P_LONGMSG='';
	SET P_RECVMTTIME = NOW();
	SET P_SRCCPNO  = SUBSTRING(P_SRCSPNUMBER,CHAR_LENGTH(P_SRCSPGATE)+1,CHAR_LENGTH(P_SRCSPNUMBER)-CHAR_LENGTH(P_SRCSPGATE));
	SET P_DESTCPNO = SUBSTRING(P_DESTSPNUMBER,CHAR_LENGTH(P_DESTSPGATE)+1,CHAR_LENGTH(P_DESTSPNUMBER)-CHAR_LENGTH(P_DESTSPGATE));
	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTSUPPV1(UID INT,PTMSGID BIGINT,ECID INT,TASKID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),PHONE VARCHAR(21),
	SPMSGID BIGINT,RETFLAG TINYINT,FEEFLAG TINYINT,PKNUMBER TINYINT,PKTOTAL TINYINT,SENDSTATUS TINYINT,SENDFLAG TINYINT,RECVFLAG TINYINT,PASSTHROUGH TINYINT,
	DONEDATE CHAR(10),ERRORCODE CHAR(7),SENDLEVEL TINYINT,SENDTYPE TINYINT,UNICOM TINYINT,RESENDCNT TINYINT,RECVMTTIME DATETIME,RECVTIME DATETIME,USERMSGID BIGINT,
	MESSAGE VARCHAR(3000),TPUDHI TINYINT,LONGMSGSEQ TINYINT UNSIGNED,MSGFMT TINYINT,MOBILEAREA INT,SVRTYPE VARCHAR(64),TPPID TINYINT,P1 VARCHAR(64),
	P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,BATCHID BIGINT,AREACODE INT);
  TRUNCATE P_TMP_MTSUPPV1;

	##取补发帐号的费用
	SELECT SENDNUM INTO P_SENDNUM FROM USERFEE WHERE USERID=P_DESTUSRID;
	##该模式可以把原始MSGID返给用户##用旧的MSGID复制一份记录插入临时表
	INSERT INTO P_TMP_MTSUPPV1(UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
	SELECT UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
	##只对0,8,15编码和人工实时、批量实时短信进行补发,其他不补发
	FROM  GW_MT_TASK_BAK WHERE PTMSGID=P_OLDMSGID AND USERID=P_SRCUSRID  AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND LOCATE(P_SRCSPNUMBER,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)),1)=1 ;
        SET   P_RCOUNT1=ROW_COUNT();
        DELETE FROM P_TMP_MTSUPPV1  WHERE  UNICOM=5 AND MSGFMT=0;
        SET   P_RCOUNT2=ROW_COUNT();
	IF  P_RCOUNT1-P_RCOUNT2>0 THEN

		SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
                          MOBILEAREA,SVRTYPE,TPPID,USERMSGID,SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
                   INTO P_PKTOTAL,P_PKNUM,P_ECID,P_PHONE,P_SENDLEVEL,P_TASKID,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,
                          P_MOBILEAREA,P_SVRTYPE,P_TPPID,P_USERMSGID,P_SENDTYPE,P_P1,P_P2,P_P3,P_P4,P_MODULEID,P_ATTIME,P_VALIDTIME,P_BATCHID,P_AREACODE
		  FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
     
     ##如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
       SET P_OLDSIGNLEN_V=P_OLDENSIGNLEN;
     ELSE
       SET P_OLDSIGNLEN_V=P_OLDSIGNLEN;
     END IF; ##IF (0 == P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
     ##如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = P_MSGFMT AND 0 < P_ENSPLITLEN) THEN
       SET P_SPLITLEN_V  =P_ENSPLITLEN;
       SET P_MULTILEN1_V =P_ENMULTILEN1;
       SET P_MULTILEN2_V =P_ENMULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWENSIGNLEN;
       SET P_SIGNATURE_V =P_ENSIGNATURE;
     ELSE
       SET P_SPLITLEN_V  =P_SPLITLEN;
       SET P_MULTILEN1_V =P_MULTILEN1;
       SET P_MULTILEN2_V =P_MULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWSIGNLEN;
       SET P_SIGNATURE_V =P_SIGNATURE;
     END IF;
     
		 IF (P_PKTOTAL <= 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)) THEN ##对于非长短信补发的处理
				SET P_LONGMSG='';
				##取短信内容
				SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
				##更新替换MSGID
				UPDATE  GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF; ##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,P_LONGMSG);
          END IF;

					##调用插入存储过程
					CALL S_WR_MTTASK(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
				ELSE
					SET P_LONGMSG='';
				END IF;##END OF IF P_LONGMSGLEN > 0
				SET P_PKNUM=1;
			#END IF;##END OF P_PKTOTAL = 1
 /*
		ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2) AND P_TPUDHI=1) THEN ##对标准协议长短信的补发
			SET P_LONGMSG='';
			##取短信内容
			SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
			##更新替换MSGID
			UPDATE  GW_MT_TASK_BAK SET PTMSGID=P_NEWMSGID,RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
			IF (P_PKTOTAL=P_PKNUM) THEN ##如果是最后一条，去掉旧签名，加上新签名
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN; ##减去签名的净长度
				SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
				SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE)	;
			END IF;##END OF IF P_PKTOTAL=P_PKNUM
			SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
			IF P_LONGMSGLEN > 0 THEN
				##调用插入存储过程
				CALL S_WR_MTTASKSR(P_DESTUID,P_OLDMSGID,2,1,P_PKTOTAL,1,P_ECID,
								P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
								P_PHONE,P_DESTFEEFLAG,P_PKNUM,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
								P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,
								P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
			ELSE
				SET P_LONGMSG='';
		  END IF; ##END OF IF P_LONGMSGLEN > 0
		#END IF;## END OF IF P_PKTOTAL > 1
*/
        	ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)  AND P_TPUDHI=0) THEN ##对非标准长短信协议的处理
			SET P_LONGMSG='';
			##没有补发过且通道号跟源通道号相等
			IF EXISTS(SELECT * FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID) THEN
				##循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
				##计算起始MSGID
				SET P_INITMSGID = P_OLDMSGID-(P_PKNUM-1)*17179869184;
				SET P_PKNUM = 1;
				WHILE P_PKNUM <= P_PKTOTAL DO
				WHILELABLE:BEGIN
					##取短信内容 ##若长短信中间的某条缺失，则不补发(暂不考虑)
					SELECT MESSAGE INTO P_SINGLEMSG FROM  GW_MT_TASK_BAK WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					IF P_SINGLEMSG = '' THEN
						SET P_LONGMSG='';
						LEAVE WHILELABLE;
					END IF; ##END OF IF P_SINGLEMSG = ''
					##更新替换MSGID
					UPDATE  GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					##拼接短信内容
					SET P_LONGMSG = CONCAT(P_LONGMSG,P_SINGLEMSG);
					SET P_PKNUM = P_PKNUM+1;
				END WHILELABLE;
				END WHILE;##END OF WHILE P_PKNUM <= P_PKTOTAL
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF;##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,P_LONGMSG);
          END IF;

					##调用插入存储过程
					CALL S_WR_MTTASK(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);

	                   ELSE
		              SET P_LONGMSG='';
		           END IF;##END OF IF P_LONGMSGLEN > 0
		              SET P_PKNUM=1 ;
			END IF; ##END OF IF EXISTS(SELECT COUNT(*) FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID AND RESENDCNT<1 AND (CONCAT(RTRIM(SPGATE),RTRIM(CPNO)))=P_SRCSPNUMBER)
		END	IF;##END OF IF P_PKTOTAL > 1
	END IF; ##END OF IF ROWCOUNT()<>0

	SELECT P_DESTUID AS UID,P_NEWMSGID AS PTMSGID,ECID,TASKID,P_DESTUSRID AS USERID,P_DESTSPGATE AS SPGATE,
	P_DESTCPNO AS CPNO,P_PHONE AS PHONE,RETFLAG,P_DESTFEEFLAG AS FEEFLAG,P_PKNUM AS PKNUMBER,P_PKTOTAL AS PKTOTAL,
	SENDSTATUS,1 AS SENDLEVEL,P_RECVMTTIME AS RECVMTTIME,P_LONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
	MOBILEAREA,SVRTYPE,TPPID,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE FROM P_TMP_MTSUPPV1 WHERE P_LONGMSG<>'' ;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRRPTWAITBV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRRPTWAITBV1`(P_UID INT,
	P_PTMSGID BIGINT,
	P_ECID INT,
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_USERID VARCHAR(11),
	P_ORGUID INT,
        P_USERMSGID BIGINT,
        P_MODULEID INT,
        P_RECVTIME DATETIME,
        P_SPMSGID BIGINT)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_B WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_B(UID, PTMSGID, SPNUMBER, PHONE, SUBMITTIME, DONETIME, ERRORCODE, USERID, ECID, ORGUID,USERMSGID,MODULEID,RECVTIME,SPMSGID)
	   VALUES(P_UID, P_PTMSGID, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME, P_ERRORCODE, P_USERID, P_ECID, P_ORGUID,P_USERMSGID,P_MODULEID,P_RECVTIME,P_SPMSGID);
    END IF;
END;;
DELIMITER ;


##GW_WRRPTWAITBV1---->GW_WRRPTWAITBV2
DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRRPTWAITBV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRRPTWAITBV2`(P_UID INT,
	P_PTMSGID BIGINT,
	P_ECID INT,
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_USERID VARCHAR(11),
	P_ORGUID INT,
  P_USERMSGID BIGINT,
  P_MODULEID INT,
  P_RECVTIME DATETIME,
  P_SPMSGID BIGINT,
  P_PKTOTAL BIGINT)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_B WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_B(UID, PTMSGID, SPNUMBER, PHONE, SUBMITTIME, DONETIME, ERRORCODE, USERID, 
	   ECID, ORGUID,USERMSGID,MODULEID,RECVTIME,SPMSGID,PKTOTAL)
	   VALUES(P_UID, P_PTMSGID, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME, P_ERRORCODE, P_USERID, 
	   P_ECID, P_ORGUID,P_USERMSGID,P_MODULEID,P_RECVTIME,P_SPMSGID,P_PKTOTAL);
    END IF;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRRPTWAITBV3`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRRPTWAITBV3`(P_UID INT,
	P_PTMSGID BIGINT,
	P_ECID INT,
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_USERID VARCHAR(11),
	P_ORGUID INT,
  P_USERMSGID BIGINT,
  P_MODULEID INT,
  P_RECVTIME DATETIME,
  P_SPMSGID BIGINT,
  P_PKTOTAL BIGINT,
  P_CUSTID VARCHAR(64),
	P_EXDATA VARCHAR(64))
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_B WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_B(UID, PTMSGID, SPNUMBER, PHONE, SUBMITTIME, DONETIME, ERRORCODE, USERID, 
	   ECID, ORGUID,USERMSGID,MODULEID,RECVTIME,SPMSGID,PKTOTAL,CUSTID,EXDATA)
	   VALUES(P_UID, P_PTMSGID, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME, P_ERRORCODE, P_USERID, 
	   P_ECID, P_ORGUID,P_USERMSGID,P_MODULEID,P_RECVTIME,P_SPMSGID,P_PKTOTAL,P_CUSTID,P_EXDATA);
    END IF;
END;;
DELIMITER ;



DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRRPTWAITCV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRRPTWAITCV2`(P_UID INT,
	P_PTMSGID BIGINT,
	P_SPGATE VARCHAR(21),
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_LOGINID VARCHAR(11),
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_RETFLAG INT,
	P_RECVFLAG INT,
	P_SENDTIME INT,
	P_SPMSGID BIGINT, 
	P_WTRPTFLAG INT,
	P_RECVTIME DATETIME)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_C WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_C(UID, PTMSGID, SPGATE,SPNUMBER, PHONE, SUBMITTIME, DONETIME, RECVFLAG,ERRORCODE, LOGINID,
	   USERMSGID,MODULEID,RETFLAG,SENDTIME,SPMSGID,WTRPTFLAG,RECVTIME)
	   VALUES(P_UID, P_PTMSGID, P_SPGATE, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME,P_RECVFLAG, P_ERRORCODE, P_LOGINID,
	   P_USERMSGID,P_MODULEID,P_RETFLAG,P_SENDTIME,P_SPMSGID,P_WTRPTFLAG,P_RECVTIME);
    END IF;
END;;
DELIMITER ;

##GW_WRRPTWAITCV2----->GW_WRRPTWAITCV3
DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRRPTWAITCV3`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRRPTWAITCV3`(P_UID INT,
	P_PTMSGID BIGINT,
	P_SPGATE VARCHAR(21),
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_LOGINID VARCHAR(11),
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_RETFLAG INT,
	P_RECVFLAG INT,
	P_SENDTIME BIGINT,
	P_SPMSGID BIGINT, 
	P_WTRPTFLAG INT,
	P_RECVTIME DATETIME,
	P_PKTOTAL BIGINT)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_C WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_C(UID, PTMSGID, SPGATE,SPNUMBER, PHONE, SUBMITTIME, DONETIME, RECVFLAG,ERRORCODE, LOGINID,
	   USERMSGID,MODULEID,RETFLAG,SENDTIME,SPMSGID,WTRPTFLAG,RECVTIME,PKTOTAL)
	   VALUES(P_UID, P_PTMSGID, P_SPGATE, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME,P_RECVFLAG, P_ERRORCODE, P_LOGINID,
	   P_USERMSGID,P_MODULEID,P_RETFLAG,P_SENDTIME,P_SPMSGID,P_WTRPTFLAG,P_RECVTIME,P_PKTOTAL);
    END IF;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRRPTWAITCV4`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRRPTWAITCV4`(P_UID INT,
	P_PTMSGID BIGINT,
	P_SPGATE VARCHAR(21),
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_LOGINID VARCHAR(11),
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_RETFLAG INT,
	P_RECVFLAG INT,
	P_SENDTIME BIGINT,
	P_SPMSGID BIGINT, 
	P_WTRPTFLAG INT,
	P_RECVTIME DATETIME,
	P_PKTOTAL BIGINT,
	P_CUSTID VARCHAR(64),
	P_EXDATA VARCHAR(64))
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_C WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_C(UID, PTMSGID, SPGATE,SPNUMBER, PHONE, SUBMITTIME, DONETIME, RECVFLAG,ERRORCODE, LOGINID,
	   USERMSGID,MODULEID,RETFLAG,SENDTIME,SPMSGID,WTRPTFLAG,RECVTIME,PKTOTAL,CUSTID,EXDATA)
	   VALUES(P_UID, P_PTMSGID, P_SPGATE, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME,P_RECVFLAG, P_ERRORCODE, P_LOGINID,
	   P_USERMSGID,P_MODULEID,P_RETFLAG,P_SENDTIME,P_SPMSGID,P_WTRPTFLAG,P_RECVTIME,P_PKTOTAL,P_CUSTID,P_EXDATA);
    END IF;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRMTTASKCV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRMTTASKCV1`(P_UID INT,
	P_PTMSGID BIGINT,
	P_SENDSTATUS INT,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKNUMBER TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_USERID VARCHAR(11),
	P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVTIME DATETIME,
	P_PHONE VARCHAR(3500),
	P_MESSAGE VARCHAR(3000) CHARSET 'GBK',
	P_TPUDHI TINYINT UNSIGNED,
	P_LOGINID VARCHAR(11),
	P_TRANSMTTIME   DATETIME,
	P_MSGFMT TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT  UNSIGNED,
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_SENDLEVEL BIGINT,
	P_VALIDTIME BIGINT,
	P_UNICOM TINYINT UNSIGNED,
	P_TASKID INT,
	P_MOBILEAREA INT ,
	P_NETERRORCNT       INT ,
  P_SUBMITERRORCNT   INT 
	)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK_C WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT MT_TASK_C(UID, LOGINID, USERID, SPGATE, CPNO, SHOUJI, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG, PKNUMBER, PKTOTAL, SENDTIME,TPUDHI,LONGMSGSEQ,TRANSMTTIME,MSGFMT,USERMSGID,MODULEID,SENDLEVEL,VALIDTIME,UNICOM ,TASKID ,MOBILEAREA,NETERRORCNT,SUBMITERRORCNT )
	   VALUES(P_UID, P_LOGINID, P_USERID, P_SPGATE, P_CPNO, P_PHONE, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG, P_PKNUMBER, P_PKTOTAL, P_RECVTIME,P_TPUDHI,P_LONGMSGSEQ,P_TRANSMTTIME,P_MSGFMT,P_USERMSGID,P_MODULEID,P_SENDLEVEL,P_VALIDTIME,P_UNICOM ,P_TASKID ,P_MOBILEAREA,P_NETERRORCNT,P_SUBMITERRORCNT );
    END IF;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRMTTASKCV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRMTTASKCV2`(P_UID INT,
	P_PTMSGID BIGINT,
	P_SENDSTATUS INT,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKNUMBER TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_USERID VARCHAR(11),
	P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVTIME DATETIME,
	P_PHONE VARCHAR(3500),
	P_MESSAGE VARCHAR(3000) CHARSET 'GBK',
	P_TPUDHI TINYINT UNSIGNED,
	P_LOGINID VARCHAR(11),
	P_TRANSMTTIME   DATETIME,
	P_MSGFMT TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT  UNSIGNED,
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_SENDLEVEL BIGINT,
	P_VALIDTIME BIGINT,
	P_UNICOM TINYINT UNSIGNED,
	P_TASKID INT,
	P_MOBILEAREA INT ,
	P_NETERRORCNT       INT ,
  P_SUBMITERRORCNT   INT,
  P_CUSTID VARCHAR(64),
	P_EXDATA VARCHAR(64) 
	)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK_C WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT MT_TASK_C(UID, LOGINID, USERID, SPGATE, CPNO, SHOUJI, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG, PKNUMBER, PKTOTAL, SENDTIME,TPUDHI,LONGMSGSEQ,TRANSMTTIME,MSGFMT,USERMSGID,MODULEID,SENDLEVEL,VALIDTIME,UNICOM ,TASKID ,MOBILEAREA,NETERRORCNT,SUBMITERRORCNT,CUSTID,EXDATA)
	   VALUES(P_UID, P_LOGINID, P_USERID, P_SPGATE, P_CPNO, P_PHONE, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG, P_PKNUMBER, P_PKTOTAL, P_RECVTIME,P_TPUDHI,P_LONGMSGSEQ,P_TRANSMTTIME,P_MSGFMT,P_USERMSGID,P_MODULEID,P_SENDLEVEL,P_VALIDTIME,P_UNICOM ,P_TASKID ,P_MOBILEAREA,P_NETERRORCNT,P_SUBMITERRORCNT,P_CUSTID,P_EXDATA);
    END IF;
END;;
DELIMITER ;


DROP PROCEDURE IF EXISTS `GW_RD_BATREQV1`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_RD_BATREQV1`(
P_LOGINID VARCHAR(11),
P_DOWNLOADFLAG TINYINT UNSIGNED,
P_CLUGWNO INT(11)
)
BEGIN
IF P_DOWNLOADFLAG=0 THEN
    SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,
	  TASKID,TITLE,MSG,MSGFMT,REMOTEURL,TRIM(LOCALPATH) AS LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SVRTYPE,
	  P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TOTALNUM,SENDNUM,TASKTYPE,BATCHID,CLUPATH,CLUGWNO FROM BATCH_MT_REQ
	  WHERE LOGINID=P_LOGINID AND SENDSTATUS=3 AND ERRORCODE='ACCEPTD' AND TRIM(LOCALPATH)='' ORDER BY SENDLEVEL LIMIT 0,1000;
ELSE
    IF P_CLUGWNO=99 THEN
    SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,
	  TASKID,TITLE,MSG,MSGFMT,REMOTEURL,TRIM(LOCALPATH) AS LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SVRTYPE,
	  P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TOTALNUM,SENDNUM,TASKTYPE,BATCHID,CLUPATH,CLUGWNO FROM BATCH_MT_REQ
	  WHERE LOGINID=P_LOGINID AND (SENDSTATUS=4  OR SENDSTATUS=5) AND ATTIMEFLAG=0 AND ERRORCODE='ACCEPTD' 
	  AND TRIM(LOCALPATH)<>'' ORDER BY SENDLEVEL LIMIT 0,1000; 
	  ELSE
	  SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,
	  TASKID,TITLE,MSG,MSGFMT,REMOTEURL,TRIM(LOCALPATH) AS LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SVRTYPE,
	  P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TOTALNUM,SENDNUM,TASKTYPE,BATCHID,CLUPATH,CLUGWNO FROM BATCH_MT_REQ
	  WHERE LOGINID=P_LOGINID AND (SENDSTATUS=4  OR SENDSTATUS=5) AND ATTIMEFLAG=0 AND ERRORCODE='ACCEPTD' 
	  AND TRIM(CLUPATH)<>'' AND TRIM(LOCALPATH)<>'' ORDER BY SENDLEVEL LIMIT 0,1000; 
	  END IF;
END IF;
END;;
DELIMITER ;


DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `CREATETABLE`(PITYPE INT,PIYM INT)
BEGIN
DECLARE STR VARCHAR(4000);
DECLARE TABLENAME VARCHAR(16);

IF PITYPE=1 THEN
SET TABLENAME=CONCAT('MTTASK',PIYM);
SET STR=CONCAT('CREATE TABLE `',TABLENAME,
'` (
  `ID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `MDAY` INT(11) NOT NULL DEFAULT ''0'',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '''',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '''',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '''',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '''',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '''',
  `SPMSGID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `RETFLAG` INT(11) NOT NULL DEFAULT ''0'',
  `FEEFLAG` INT(11) NOT NULL DEFAULT ''0'',
  `PKNUMBER` INT(11) NOT NULL DEFAULT ''0'',
  `PKTOTAL` INT(11) NOT NULL DEFAULT ''0'',
  `SENDSTATUS` INT(11) NOT NULL DEFAULT ''0'',
  `SENDFLAG` INT(11) NOT NULL DEFAULT ''0'',
  `RECVFLAG` INT(11) NOT NULL DEFAULT ''0'',
  `DONEDATE` VARCHAR(10) NOT NULL DEFAULT '''',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '''',
  `SENDLEVEL` INT(11) NOT NULL DEFAULT ''0'',
  `SENDTYPE` INT(11) NOT NULL DEFAULT ''0'',
  `UNICOM` INT(11) NOT NULL DEFAULT ''0'',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT ''0'',
  `SENDTIME` DATETIME NOT NULL DEFAULT ''0000-00-00 00:00:00'',
  `RECVTIME` DATETIME NOT NULL DEFAULT ''0000-00-00 00:00:00'',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '''',
  `TASKID` INT(11) NOT NULL DEFAULT ''0'',
  `ECID` INT(11) NOT NULL DEFAULT ''0'',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '''',
  `P1` VARCHAR(64) NOT NULL DEFAULT '''',
  `P2` VARCHAR(64) NOT NULL DEFAULT '''',
  `P3` VARCHAR(64) NOT NULL DEFAULT '''',
  `P4` VARCHAR(64) NOT NULL DEFAULT '''',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `MODULEID` INT(11) NOT NULL DEFAULT ''0'',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT ''0'',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT ''0'',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT 0,
  `AREACODE`  INT(11) NOT NULL DEFAULT 0 ,
  `CUSTID`	VARCHAR(64)  NOT NULL DEFAULT '''',
  `EXDATA`	VARCHAR(64)  NOT NULL DEFAULT '''',
  UNIQUE KEY `IX_',TABLENAME,'_PTID` (`PTMSGID`),
  KEY `IX_',TABLENAME,'_P1` (`P1`),
  KEY `IX_',TABLENAME,'_SVRTYPE` (`SVRTYPE`),
  KEY `IX_',TABLENAME,'_TASKID` (`TASKID`),
  KEY `IX_',TABLENAME,'_STIME` (`SENDTIME`),
  KEY `IX_',TABLENAME,'_UID` (`USERID`),
  KEY `IX_',TABLENAME,'_BATCHID` (`BATCHID`),
  KEY `IX_',TABLENAME,'_AREACODE` (`AREACODE`),
   KEY `IX_',TABLENAME,'_PHONE` (`PHONE`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;');

ELSEIF PITYPE=2 THEN
SET TABLENAME=CONCAT('MMSTASK',PIYM);
SET STR=CONCAT('CREATE TABLE `',TABLENAME,
'` (
  `ID` INT(11) NOT NULL,
  `MDAY` INT(11) NOT NULL DEFAULT ''0'',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '''',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '''',
  `CPNO` VARCHAR(21) NOT NULL DEFAULT '''',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '''',
  `SPMSGID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `RETFLAG` INT(11) NOT NULL DEFAULT ''0'',
  `FEEFLAG` INT(11) NOT NULL DEFAULT ''0'',
  `PKNUMBER` INT(11) NOT NULL DEFAULT ''0'',
  `PKTOTAL` INT(11) NOT NULL DEFAULT ''0'',
  `SENDSTATUS` INT(11) NOT NULL DEFAULT ''0'',
  `SENDFLAG` INT(11) NOT NULL DEFAULT ''0'',
  `RECVFLAG` INT(11) NOT NULL DEFAULT ''0'',
  `DONEDATE` VARCHAR(10) NOT NULL DEFAULT '''',
  `ERRORCODE` VARCHAR(7) NOT NULL DEFAULT '''',
  `SENDLEVEL` INT(11) NOT NULL DEFAULT ''0'',
  `SENDTYPE` INT(11) NOT NULL DEFAULT ''0'',
  `UNICOM` INT(11) NOT NULL DEFAULT ''0'',
  `SENDTIME` DATETIME NOT NULL DEFAULT ''0000-00-00 00:00:00'',
  `RECVTIME` DATETIME NOT NULL DEFAULT ''0000-00-00 00:00:00'',
  `MESSAGE` VARCHAR(3000) NOT NULL DEFAULT '''',
  `TASKID` INT(11) NOT NULL DEFAULT ''0'',
  `ECID` INT(11) NOT NULL DEFAULT ''0'',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '''',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT ''0'',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '''',
  `P1` VARCHAR(64) NOT NULL DEFAULT '''',
  `P2` VARCHAR(64) NOT NULL DEFAULT '''',
  `P3` VARCHAR(64) NOT NULL DEFAULT '''',
  `P4` VARCHAR(64) NOT NULL DEFAULT '''',
  `USERMSGID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `MODULEID` INT(11) NOT NULL DEFAULT ''0'',
  `ATTIME` BIGINT(20) NOT NULL DEFAULT ''0'',
  `VALIDTIME` BIGINT(20) NOT NULL DEFAULT ''0'',
  `SPMSGID2` VARCHAR(64) NOT NULL DEFAULT '''',
  `JTYPE` TINYINT(4) NOT NULL DEFAULT ''0'',
  `ORDERCPNO` VARCHAR(21) NOT NULL DEFAULT '''',
  `PASSTHROUGH` TINYINT(4) NOT NULL DEFAULT ''0'',
  `MSGTITLE` VARCHAR(720) NOT NULL DEFAULT '''',
  `TMPLID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `MSGTYPE` TINYINT(4) NOT NULL DEFAULT ''0'',
  `ERRORMSG` VARCHAR(256) NOT NULL DEFAULT '''',
  PRIMARY KEY  (`ID`),
  UNIQUE KEY `IX_',TABLENAME,'_PTMSGID` (`PTMSGID`),
  KEY `IX_',TABLENAME,'_USERID` (`USERID`),
  KEY `IX_',TABLENAME,'_SENDTIME` (`SENDTIME`),
  KEY `IX_',TABLENAME,'_TASKID` (`TASKID`),
  KEY `IX_',TABLENAME,'_SVRTYPE` (`SVRTYPE`),
  KEY `IX_',TABLENAME,'_P1` (`P1`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;');

ELSEIF  PITYPE=3 THEN
SET TABLENAME=CONCAT('MOTASK',PIYM);
SET STR=CONCAT('CREATE TABLE `',TABLENAME,
'` (
  `ID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `UID` INT(11) NOT NULL DEFAULT ''0'',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '''',
  `SPNUMBER` VARCHAR(21) NOT NULL DEFAULT '''',
  `SERVICEID` VARCHAR(10) NOT NULL DEFAULT '''',
  `SENDSTATUS` INT(11) NOT NULL DEFAULT ''0'',
  `DELIVERTIME` TIMESTAMP NOT NULL DEFAULT ''0000-00-00 00:00:00'',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '''',
  `MSGCONTENT` VARCHAR(3000) NOT NULL DEFAULT '''',
  `ECID` INT(11) NOT NULL DEFAULT ''0'',
  `ORGUID` INT(11) NOT NULL DEFAULT ''0'',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `TP_PID` INT(11) NOT NULL DEFAULT ''0'',
  `TP_UDHI` INT(11) NOT NULL DEFAULT ''0'',
  `MSGFMT` INT(11) NOT NULL DEFAULT ''0'',
  `UNICOM` INT(11) NOT NULL DEFAULT ''0'',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;');

ELSE
SET TABLENAME=CONCAT('MMSMOTASK',PIYM);
SET STR=CONCAT('CREATE TABLE `',TABLENAME,
'` (
  `ID` INT(11) NOT NULL,
  `UID` INT(11) NOT NULL DEFAULT ''0'',
  `USERID` VARCHAR(11) NOT NULL DEFAULT '''',
  `SPNUMBER` VARCHAR(11) NOT NULL DEFAULT '''',
  `SERVICEID` VARCHAR(10) NOT NULL DEFAULT '''',
  `SENDSTATUS` INT(11) NOT NULL DEFAULT ''0'',
  `DELIVERTIME` DATETIME NOT NULL DEFAULT ''0000-00-00 00:00:00'',
  `PHONE` VARCHAR(21) NOT NULL DEFAULT '''',
  `MSGCONTENT` VARCHAR(3000) NOT NULL DEFAULT '''',
  `ECID` INT(11) NOT NULL DEFAULT ''0'',
  `ORGUID` INT(11) NOT NULL DEFAULT ''0'',
  `PTMSGID` BIGINT(20) NOT NULL DEFAULT ''0'',
  `TP_PID` INT(11) NOT NULL DEFAULT ''0'',
  `TP_UDHI` INT(11) NOT NULL DEFAULT ''0'',
  `MSGFMT` INT(11) NOT NULL DEFAULT ''15'',
  `UNICOM` INT(11) NOT NULL DEFAULT ''0'',
  `PASSTHROUGH` TINYINT(4) NOT NULL DEFAULT ''0'',
  `MSGTYPE` TINYINT(4) NOT NULL DEFAULT ''0'',
  `MSGTITLE` VARCHAR(200) NOT NULL DEFAULT '''',
  PRIMARY KEY  (`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;');
END IF;

SET @SQL=STR;
PREPARE SL FROM @SQL;
EXECUTE SL;
DEALLOCATE PREPARE SL;

END;;
DELIMITER ;
     
DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_LOADSVRTYPE`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_LOADSVRTYPE`()
BEGIN
  SELECT BUS_ID AS SVRID,UPPER(BUS_CODE) AS SVRCODE,BUS_NAME AS SVRNAME,STATE AS SVRSTATE FROM LF_BUSMANAGER;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_CMTDATARPT`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_CMTDATARPT`(PIYM INT)
BEGIN
DECLARE STR VARCHAR(4000);
DECLARE TABLENAME VARCHAR(16);

SET TABLENAME=CONCAT('GW_MTDRPT',PIYM);
SET STR=CONCAT('CREATE TABLE `',TABLENAME,
'` (
   `USERID` VARCHAR(11) NOT NULL DEFAULT '''',
  `TASKID` INT(11) NOT NULL DEFAULT ''0'',
  `SPGATE` VARCHAR(21) NOT NULL DEFAULT '''',
  `IYMD` INT(11) NOT NULL DEFAULT ''0'',
  `IHOUR` INT(11) NOT NULL DEFAULT ''0'',
  `PTCODE` VARCHAR(10) NOT NULL DEFAULT '''',
  `IMONTH` INT(11) NOT NULL DEFAULT ''0'',
  `ICOUNT` INT(11) NOT NULL DEFAULT ''0'',
  `SUCC` INT(11) NOT NULL DEFAULT ''0'',
  `FAIL1` INT(11) NOT NULL DEFAULT ''0'',
  `FAIL2` INT(11) NOT NULL DEFAULT ''0'',
  `FAIL3` INT(11) NOT NULL DEFAULT ''0'',
  `NRET` INT(11) NOT NULL DEFAULT ''0'',
  `RSUCC` INT(11) NOT NULL DEFAULT ''0'',
  `RFAIL1` INT(11) NOT NULL DEFAULT ''0'',
  `RFAIL2` INT(11) NOT NULL DEFAULT ''0'',
  `RNRET` INT(11) NOT NULL DEFAULT ''0'',
  `RELEASEFLAG` INT(11) NOT NULL DEFAULT ''1'',
  `STARTTIME` DATETIME NOT NULL DEFAULT ''0000-00-00 00:00:00'',
  `ENDTIME` DATETIME NOT NULL DEFAULT ''0000-00-00 00:00:00'',
  `Y` INT(11) NOT NULL DEFAULT ''0'',
  `SPISUNCM` INT(11) NOT NULL DEFAULT ''0'',
  `SPID` VARCHAR(32) NOT NULL DEFAULT '''',
  `SVRTYPE` VARCHAR(64) NOT NULL DEFAULT '''',
  `P1` VARCHAR(64) NOT NULL DEFAULT '''',
  `P2` VARCHAR(64) NOT NULL DEFAULT '''',
  `P3` VARCHAR(64) NOT NULL DEFAULT '''',
  `P4` VARCHAR(64) NOT NULL DEFAULT '''',
  `ID` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `SENDTYPE` INT(11) NOT NULL DEFAULT ''1'',
  `MOBILEAREA` INT(11) NOT NULL DEFAULT ''0'',
  `BATCHID`  BIGINT(20) NOT NULL DEFAULT ''0'',
  `AREACODE`  INT(11) NOT NULL DEFAULT ''0'',
  PRIMARY KEY  (`USERID`,`TASKID`,`SPGATE`,`IYMD`,`IHOUR`,`SPISUNCM`,`SPID`,`SVRTYPE`,`P1`,`P2`,`P3`,`P4`,`MOBILEAREA`,`SENDTYPE`,`BATCHID`,`AREACODE`),
  KEY `IX_',TABLENAME,'_TASKID` (`TASKID`),
  KEY `IX_',TABLENAME,'_ID`(`ID`)
) ENGINE=INNODB DEFAULT CHARSET=GBK;');

SET @SQL=STR;
PREPARE SL FROM @SQL;
EXECUTE SL;
DEALLOCATE PREPARE SL;

END;;
DELIMITER ;



DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_H_STATISTIV3`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_STATISTIV3`(ISP1 INT,ISP2 INT,ISP3 INT,ISP4 INT)
BEGIN
	DECLARE P_STR NVARCHAR(4000);  
	DECLARE P_USERID VARCHAR(11);
	DECLARE P_TASKID INT;
	DECLARE P_IYMD INT;
	DECLARE P_SPGATE VARCHAR(21);
	DECLARE P_SPISUNCM INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_SPID VARCHAR(21);
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_IHOUR INT;
	DECLARE P_IYEAR INT ;
	DECLARE P_IMONTH INT;
	DECLARE P_ICOUNT INT;
	DECLARE P_SUCC INT;
	DECLARE P_FAIL INT;
	DECLARE P_NRET INT;
  DECLARE MAXCNT INT ;
  DECLARE I INT;
  DECLARE P_SENDTYPE INT;
  DECLARE P_MOBILEAREA INT;
  DECLARE P_TABLENAME VARCHAR(20);
  DECLARE MINIYM INT;
  DECLARE MAXIYM INT;
  DECLARE CURIYM INT;
  DECLARE MINYMD INT;
  DECLARE MAXYMD INT;

  
  DROP TEMPORARY TABLE IF  EXISTS P_TMP_STICV3;
	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_STICV3( TMP_ID INT UNSIGNED NOT NULL AUTO_INCREMENT, USERID VARCHAR(11),TASKID INT,SPGATE VARCHAR(21),SPISUNCM INT,
	SPID VARCHAR(32),SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),
  IYMD INT,IYEAR INT,IMONTH INT,IHOUR INT,ICOUNT INT,SUCC INT,FAIL INT,NRET INT,SENDTYPE INT,MOBILEAREA INT,BATCHID BIGINT,AREACODE INT, PRIMARY KEY (TMP_ID)  );
  ALTER TABLE P_TMP_STICV3 AUTO_INCREMENT=1;

 

	SET P_STR = 'SELECT USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE';
        IF  ISP1 =1 THEN
           SET P_STR =CONCAT(P_STR,',P1');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P1');
         END IF;
           IF  ISP2 =1 THEN
           SET P_STR =CONCAT(P_STR,',P2');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P2');
         END IF;
    IF  ISP3 =1 THEN
           SET P_STR =CONCAT(P_STR,',P3');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P3');
         END IF;
    IF  ISP4 =1 THEN
           SET P_STR =CONCAT(P_STR,',P4');
        ELSE 
            SET P_STR =CONCAT(P_STR,', '' '' AS P4');
         END IF;
           SET P_STR =CONCAT(P_STR, ',CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED) AS IYMD,
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED) AS IYEAR,
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED) AS MON,
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED) AS HOUR,
           COUNT(ID),
           SUM(CASE RTRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE 0 END),
           SUM(CASE SUBSTRING(RTRIM(ERRORCODE),1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE 0 END),
           SUM(CASE RTRIM(ERRORCODE) WHEN '''' THEN 1 ELSE 0 END),
           SENDTYPE,
           MOBILEAREA,
           BATCHID,AREACODE
           FROM GW_MT_TASK_BAK WHERE  SENDTIME <  ''') ;
           SET P_STR=CONCAT(P_STR, CURDATE());
           SET P_STR=CONCAT(P_STR, ''' GROUP BY USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE');
            IF  ISP1 =1 THEN
               SET P_STR =CONCAT(P_STR,',P1');
             END IF;
           IF  ISP2 =1 THEN
               SET P_STR =CONCAT(P_STR,',P2');
             END IF;
           IF  ISP3 =1 THEN
               SET P_STR =CONCAT(P_STR,',P3');
           END IF;
           IF  ISP4 =1 THEN
               SET P_STR =CONCAT(P_STR,',P4');
           END IF;
           SET P_STR=CONCAT(P_STR,',SENDTYPE,MOBILEAREA,BATCHID,AREACODE,
           CAST(DATE_FORMAT(SENDTIME,''%Y%m%d'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%Y'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%m'') AS SIGNED),
           CAST(DATE_FORMAT(SENDTIME,''%H'') AS SIGNED)');
 
#SELECT P_STR;

  SET @SQL =CONCAT('INSERT INTO P_TMP_STICV3(USERID ,TASKID,SPGATE,SPISUNCM,SPID ,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)', P_STR);#
       PREPARE SL FROM @SQL;
       EXECUTE SL;
       DEALLOCATE PREPARE SL;
   SELECT CAST(DATE_FORMAT(MIN(IYMD),'%Y%m') AS SIGNED),CAST(DATE_FORMAT(MAX(IYMD),'%Y%m') AS SIGNED)  INTO  MINIYM,MAXIYM FROM P_TMP_STICV3 ;
   SET CURIYM=MINIYM;
   WHILE CURIYM<=MAXIYM DO
  
        SET P_TABLENAME = CONCAT('GW_MTDRPT',CURIYM);
       IF NOT EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME=P_TABLENAME) THEN
          CALL GW_CMTDATARPT(CURIYM);      
	END IF;
	    
	     SELECT IFNULL(MIN(IYMD),0) ,IFNULL(MAX(IYMD),0)   INTO MINYMD,MAXYMD FROM  P_TMP_STICV3 WHERE CAST(DATE_FORMAT(IYMD,'%Y%m') AS SIGNED)=CURIYM;
	     
        SET P_STR = CONCAT( 'DELETE FROM ',P_TABLENAME, ' WHERE IYMD  >=''',MINYMD,''' AND IYMD<=''',MAXYMD,'''');
	       SET @SQL=P_STR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;
   
       SET P_STR = CONCAT('INSERT  INTO ',P_TABLENAME, '(USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)
          SELECT T.USERID,T.TASKID,T.SPGATE,T.SPISUNCM,T.SPID,T.SVRTYPE,T.P1,T.P2,T.P3,T.P4,T.IYMD,T.IHOUR,T.IMONTH,T.IYEAR,T.ICOUNT,T.SUCC,T.FAIL,(T.ICOUNT-T.SUCC-T.FAIL-T.NRET),T.NRET,T.SENDTYPE,T.MOBILEAREA,T.BATCHID,T.AREACODE FROM P_TMP_STICV3 T
         WHERE  T.IYMD  >=',MINYMD,' AND IYMD<=',MAXYMD);
	       SET @SQL=P_STR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
         DEALLOCATE PREPARE SL;

          IF CAST(SUBSTRING(CAST(CURIYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                SET CURIYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURIYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
          ELSE
               SET CURIYM = CURIYM+1  ;
          END IF;
   
   END WHILE;
   
  TRUNCATE TABLE P_TMP_STICV3;
END;;
DELIMITER ;

#############加载SPGATE主备绑定表
DROP PROCEDURE IF EXISTS `GW_LOADCLUBIND`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_LOADCLUBIND`(P_GWNO INT)
BEGIN
SELECT ID,PTACCUID,GWNO,GWEIGHT,UPDTIME FROM GW_CLUSPBIND 
WHERE PTACCUID=(SELECT PTACCUID FROM GW_CLUSPBIND WHERE GWNO=P_GWNO);
END
;;
DELIMITER ;

#############更新主备状态
DROP PROCEDURE IF EXISTS `GW_UPDCLUSTATS`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_UPDCLUSTATS`(
PI_GWTYPE INT,
PI_GWNO INT,
PI_PRIGWNO INT,
PI_OLDPRIGWNO INT,
PI_RUNSTATUS INT,
PI_GWEIGHT INT,
PI_RUNWEIGHT INT,
PI_UPDTYPE INT
)
BEGIN
DECLARE PI_ROWCNT1 INT; ##0表示更新失败  1表示更新成功
DECLARE PI_ROWCNT2 INT; ##0表示更新失败  1表示更新成功
DECLARE PI_UPDRESULT INT; ##0表示更新失败  1表示更新成功
##异常代码                                                        
DECLARE P_ERR  INT DEFAULT 0;                                    
DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;

   IF PI_UPDTYPE=1 THEN
      UPDATE GW_CLUSTATUS SET  RUNSTATUS=PI_RUNSTATUS , GWEIGHT=PI_GWEIGHT ,
      RUNWEIGHT=PI_RUNWEIGHT , UPDTIME=NOW() WHERE GWNO=PI_GWNO AND GWTYPE=PI_GWTYPE ; 
      SET PI_ROWCNT1 = ROW_COUNT(); 
      
	    UPDATE GW_CLUDECISION SET RUNGWNO=PI_GWNO , RUNUPDTIME=NOW() 
	    WHERE GWNO=PI_PRIGWNO AND GWTYPE=PI_GWTYPE AND RUNGWNO=PI_OLDPRIGWNO;
	    SET PI_ROWCNT2 = ROW_COUNT(); 
	    
      IF (PI_ROWCNT1<0) OR (PI_ROWCNT2)<0 THEN##更新失败         
         SET PI_UPDRESULT = 0;                                   
      ELSE##更新成功                                             
         SET PI_UPDRESULT = 1;                                   
      END IF;                                                    
	                                   
	    
	    SELECT GWCLUSTATUS.GWTYPE,GWCLUSTATUS.GWNO,GWCLUSTATUS.PRIGWNO,GWCLUSTATUS.RUNSTATUS,CN.RUNPRIGWNO,CN.APPLYGWNO,CN.APPLYSTATUS,
      GWCLUSTATUS.GWEIGHT,GWCLUSTATUS.RUNWEIGHT,GWCLUSTATUS.UPDTIME,PI_UPDRESULT AS UPDRESULT,NOW() AS DBTIME 
      FROM GW_CLUSTATUS GWCLUSTATUS,(SELECT RUNGWNO  AS RUNPRIGWNO ,APPLYGWNO ,APPLYSTATUS FROM GW_CLUDECISION 
      WHERE GWNO= (SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO))CN
      WHERE PRIGWNO=( SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO);
      
   ELSEIF PI_UPDTYPE=2 THEN
      UPDATE GW_CLUDECISION SET APPLYGWNO=PI_GWNO , APPLYSTATUS=1 WHERE GWNO=PI_PRIGWNO AND GWTYPE=PI_GWTYPE ; 
      IF ROW_COUNT()<0 THEN ##更新失败
         SET PI_UPDRESULT = 0;
      ELSE##更新成功
         SET PI_UPDRESULT = 1;
      END IF;
      ##返回：运行主用权限的信息
      SELECT GWCLUSTATUS.GWTYPE,GWCLUSTATUS.GWNO,GWCLUSTATUS.PRIGWNO,GWCLUSTATUS.RUNSTATUS,CN.RUNPRIGWNO,CN.APPLYGWNO,CN.APPLYSTATUS,
      GWCLUSTATUS.GWEIGHT,GWCLUSTATUS.RUNWEIGHT,GWCLUSTATUS.UPDTIME,PI_UPDRESULT AS UPDRESULT,NOW() AS DBTIME 
      FROM GW_CLUSTATUS GWCLUSTATUS,(SELECT RUNGWNO  AS RUNPRIGWNO ,APPLYGWNO ,APPLYSTATUS FROM GW_CLUDECISION 
      WHERE GWNO= (SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO))CN
      WHERE PRIGWNO=( SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO);
   ELSEIF PI_UPDTYPE=3 THEN
      UPDATE GW_CLUSTATUS SET RUNSTATUS=PI_RUNSTATUS , GWEIGHT=PI_GWEIGHT , 
      RUNWEIGHT=PI_RUNWEIGHT , UPDTIME=NOW() WHERE GWNO=PI_GWNO AND GWTYPE=PI_GWTYPE ;
      SET PI_ROWCNT1 = ROW_COUNT();
      
	    UPDATE GW_CLUDECISION SET RUNGWNO=0 , RUNUPDTIME=NOW() , APPLYGWNO=0 , APPLYSTATUS=0 
	    WHERE GWNO=PI_PRIGWNO AND GWTYPE=PI_GWTYPE ;
	    SET PI_ROWCNT2 = ROW_COUNT();

      IF (PI_ROWCNT1<0) OR (PI_ROWCNT2)<0 THEN##更新失败         
         SET PI_UPDRESULT = 0;                                   
      ELSE##更新成功                                             
         SET PI_UPDRESULT = 1;                                   
      END IF;                                                    

	    SELECT GWCLUSTATUS.GWTYPE,GWCLUSTATUS.GWNO,GWCLUSTATUS.PRIGWNO,GWCLUSTATUS.RUNSTATUS,CN.RUNPRIGWNO,CN.APPLYGWNO,CN.APPLYSTATUS,
      GWCLUSTATUS.GWEIGHT,GWCLUSTATUS.RUNWEIGHT,GWCLUSTATUS.UPDTIME,PI_UPDRESULT AS UPDRESULT,NOW() AS DBTIME 
      FROM GW_CLUSTATUS GWCLUSTATUS,(SELECT RUNGWNO  AS RUNPRIGWNO ,APPLYGWNO ,APPLYSTATUS FROM GW_CLUDECISION 
      WHERE GWNO= (SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO))CN
      WHERE PRIGWNO=( SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO);
   ELSEIF PI_UPDTYPE=4 THEN
      START TRANSACTION;
      ##SELECT ID,GWTYPE,GWNO,RUNGWNO,RUNUPDTIME,APPLYGWNO,APPLYSTATUS FROM GW_CLUDECISION
      ##WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO AND RUNGWNO=PI_OLDPRIGWNO FOR UPDATE ;
      UPDATE GW_CLUDECISION SET RUNUPDTIME=NOW(),APPLYGWNO=0,APPLYSTATUS=0 ,RUNGWNO=PI_GWNO
      WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_PRIGWNO AND RUNGWNO=PI_OLDPRIGWNO;
      SET PI_ROWCNT1 = ROW_COUNT();
      IF PI_ROWCNT1>0 THEN
         UPDATE GW_CLUSTATUS SET RUNSTATUS=1,GWEIGHT=PI_GWEIGHT ,RUNWEIGHT=0, UPDTIME=NOW()
         WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO ; 
      END IF;
      IF P_ERR = 1 THEN
         ROLLBACK;
         ##SELECT 0 AS UPDRESULT;
      ELSE
         COMMIT;
         ##返回：运行主用权限的信息
         SELECT GWCLUSTATUS.GWTYPE,GWCLUSTATUS.GWNO,GWCLUSTATUS.PRIGWNO,GWCLUSTATUS.RUNSTATUS,CN.RUNPRIGWNO,CN.APPLYGWNO,CN.APPLYSTATUS,
         GWCLUSTATUS.GWEIGHT,GWCLUSTATUS.RUNWEIGHT,GWCLUSTATUS.UPDTIME,1 AS UPDRESULT,NOW() AS DBTIME 
         FROM GW_CLUSTATUS GWCLUSTATUS,(SELECT RUNGWNO  AS RUNPRIGWNO ,APPLYGWNO ,APPLYSTATUS FROM GW_CLUDECISION 
         WHERE GWNO= (SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO))CN
         WHERE PRIGWNO=( SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO);
      END IF;              
     
   ELSEIF PI_UPDTYPE=5 THEN
      UPDATE GW_CLUDECISION SET RUNGWNO=0 , RUNUPDTIME=NOW() WHERE GWNO=PI_PRIGWNO AND GWTYPE=PI_GWTYPE ;
      SET PI_ROWCNT1 = ROW_COUNT();
      UPDATE GW_CLUSTATUS SET RUNSTATUS=0 , RUNWEIGHT=PI_RUNWEIGHT ,GWEIGHT=PI_GWEIGHT , 
      UPDTIME=NOW() WHERE GWNO=PI_GWNO AND GWTYPE=PI_GWTYPE ;
      SET PI_ROWCNT2 = ROW_COUNT();
  
      IF (PI_ROWCNT1<0) OR (PI_ROWCNT2)<0 THEN##更新失败
         SET PI_UPDRESULT = 0;
      ELSE##更新成功
         SET PI_UPDRESULT = 1;
      END IF;
      
      SELECT GWCLUSTATUS.GWTYPE,GWCLUSTATUS.GWNO,GWCLUSTATUS.PRIGWNO,GWCLUSTATUS.RUNSTATUS,CN.RUNPRIGWNO,CN.APPLYGWNO,CN.APPLYSTATUS,
      GWCLUSTATUS.GWEIGHT,GWCLUSTATUS.RUNWEIGHT,GWCLUSTATUS.UPDTIME,PI_UPDRESULT AS UPDRESULT,NOW() AS DBTIME 
      FROM GW_CLUSTATUS GWCLUSTATUS,(SELECT RUNGWNO  AS RUNPRIGWNO ,APPLYGWNO ,APPLYSTATUS FROM GW_CLUDECISION 
      WHERE GWNO= (SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO))CN
      WHERE PRIGWNO=( SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO);
   ELSEIF PI_UPDTYPE=6 THEN
      UPDATE GW_CLUSTATUS SET  RUNSTATUS=PI_RUNSTATUS , GWEIGHT=PI_GWEIGHT , 
	    RUNWEIGHT=PI_RUNWEIGHT , UPDTIME=NOW() WHERE GWNO=PI_GWNO AND GWTYPE=PI_GWTYPE ;
	    
	    IF ROW_COUNT()<0 THEN ##更新失败
         SET PI_UPDRESULT = 0;
      ELSE##更新成功
         SET PI_UPDRESULT = 1;
      END IF;
      
	    SELECT GWCLUSTATUS.GWTYPE,GWCLUSTATUS.GWNO,GWCLUSTATUS.PRIGWNO,GWCLUSTATUS.RUNSTATUS,CN.RUNPRIGWNO,CN.APPLYGWNO,CN.APPLYSTATUS,
      GWCLUSTATUS.GWEIGHT,GWCLUSTATUS.RUNWEIGHT,GWCLUSTATUS.UPDTIME,PI_UPDRESULT AS UPDRESULT,NOW() AS DBTIME 
      FROM GW_CLUSTATUS GWCLUSTATUS,(SELECT RUNGWNO  AS RUNPRIGWNO ,APPLYGWNO ,APPLYSTATUS FROM GW_CLUDECISION 
      WHERE GWNO= (SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO))CN
      WHERE PRIGWNO=( SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO);
   ELSE
      UPDATE GW_CLUSTATUS SET  RUNSTATUS=0,UPDTIME=NOW() WHERE GWNO=PI_GWNO AND GWTYPE=PI_GWTYPE ;
      IF ROW_COUNT()<0 THEN ##更新失败
         SET PI_UPDRESULT = 0;
      ELSE##更新成功
         SET PI_UPDRESULT = 1;
      END IF;
      SELECT GWCLUSTATUS.GWTYPE,GWCLUSTATUS.GWNO,GWCLUSTATUS.PRIGWNO,GWCLUSTATUS.RUNSTATUS,CN.RUNPRIGWNO,CN.APPLYGWNO,CN.APPLYSTATUS,
      GWCLUSTATUS.GWEIGHT,GWCLUSTATUS.RUNWEIGHT,GWCLUSTATUS.UPDTIME,PI_UPDRESULT AS UPDRESULT,NOW() AS DBTIME 
      FROM GW_CLUSTATUS GWCLUSTATUS,(SELECT RUNGWNO  AS RUNPRIGWNO ,APPLYGWNO ,APPLYSTATUS FROM GW_CLUDECISION 
      WHERE GWNO= (SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO))CN
      WHERE PRIGWNO=( SELECT PRIGWNO FROM GW_CLUSTATUS WHERE GWTYPE=PI_GWTYPE AND GWNO=PI_GWNO);
      
   END IF;  
END
;;
DELIMITER ;

DROP PROCEDURE IF EXISTS `GW_RD_BATREQV1`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_RD_BATREQV1`(
P_LOGINID VARCHAR(11),
P_DOWNLOADFLAG TINYINT(4),
P_CLUGWNO INT(11)
)
BEGIN
IF P_DOWNLOADFLAG=0 THEN
    SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,
	  TASKID,TITLE,MSG,MSGFMT,REMOTEURL,TRIM(LOCALPATH) AS LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SVRTYPE,
	  P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TOTALNUM,SENDNUM,TASKTYPE,BATCHID,CLUPATH,CLUGWNO FROM BATCH_MT_REQ
	  WHERE LOGINID=P_LOGINID AND SENDSTATUS=3 AND ERRORCODE='ACCEPTD' AND TRIM(LOCALPATH)='' ORDER BY SENDLEVEL LIMIT 0,1000;
ELSE
    IF P_CLUGWNO=99 THEN
    SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,
	  TASKID,TITLE,MSG,MSGFMT,REMOTEURL,TRIM(LOCALPATH) AS LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SVRTYPE,
	  P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TOTALNUM,SENDNUM,TASKTYPE,BATCHID,CLUPATH,CLUGWNO FROM BATCH_MT_REQ
	  WHERE LOGINID=P_LOGINID AND (SENDSTATUS=4  OR SENDSTATUS=5) AND ATTIMEFLAG=0 AND ERRORCODE='ACCEPTD' 
	  AND TRIM(LOCALPATH)<>'' ORDER BY SENDLEVEL LIMIT 0,1000; 
	  ELSE
	  SELECT MSGID,BMTMSGID,USERID,LOGINID,USERUID,SERVICETYPE,SA,SENDTYPE,
	  TASKID,TITLE,MSG,MSGFMT,REMOTEURL,TRIM(LOCALPATH) AS LOCALPATH,SENDLEVEL,ATTIME,VALIDTIME,SVRTYPE,
	  P1,P2,P3,P4,USERMSGID,MODULEID,RETFLAG,TOTALNUM,SENDNUM,TASKTYPE,BATCHID,CLUPATH,CLUGWNO FROM BATCH_MT_REQ
	  WHERE LOGINID=P_LOGINID AND (SENDSTATUS=4  OR SENDSTATUS=5) AND ATTIMEFLAG=0 AND ERRORCODE='ACCEPTD' 
	  AND TRIM(CLUPATH)<>'' AND TRIM(LOCALPATH)<>'' ORDER BY SENDLEVEL LIMIT 0,1000; 
	  END IF;
END IF;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS `GW_UPDBATREQV1`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_UPDBATREQV1`(
   PIUSERID       VARCHAR(11),
   PIUSERUID      INT,
   PILOGINID      VARCHAR(11),
   PISENDSTATUS   INT,
   PITASKID       INT,
   PIMSGID        BIGINT,
   PILOCALPATH    VARCHAR(256),
   PIERRORCODE    VARCHAR(7),
   PIBMTMSGID     BIGINT,
   PICLUPATH      VARCHAR(256),
   PICLUGWNO      INT,
   PITOTALNUM     INT,
   PISENDNUM      INT
 )
BEGIN
        DECLARE PIROWCOUNT    INT DEFAULT 0;
##异常代码
        DECLARE P_ERR  INT DEFAULT 0;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
 IF PISENDSTATUS=0 THEN
       UPDATE BATCH_MT_REQ SET SENDSTATUS=PISENDSTATUS,SENDNUM=PISENDNUM,ERRORCODE=PIERRORCODE,SENDTIME=NOW()
       WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ;
       SET PIROWCOUNT=ROW_COUNT();
       IF  P_ERR=1 THEN
       SELECT COUNT(1) INTO PIROWCOUNT FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID 
       AND SENDSTATUS=PISENDSTATUS AND SENDNUM=PISENDNUM AND ERRORCODE=PIERRORCODE; 
       END IF;
       START TRANSACTION;
       SAVEPOINT A;
       INSERT INTO BATCH_MT_REQ_HIS  SELECT * FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID  ;
       DELETE FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ;
       DELETE FROM ATTIME_TASK WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ;
       IF P_ERR=1 THEN
          ROLLBACK TO SAVEPOINT A;
       ELSE
          COMMIT;
       END IF;
  ELSEIF PISENDSTATUS=2  THEN 
       UPDATE BATCH_MT_REQ SET SENDSTATUS=PISENDSTATUS,ERRORCODE=PIERRORCODE,SENDTIME=NOW()
       WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ;
       SET PIROWCOUNT=ROW_COUNT();
       IF  P_ERR=1 THEN
       SELECT COUNT(1) INTO PIROWCOUNT FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID 
       AND SENDSTATUS=PISENDSTATUS AND ERRORCODE=PIERRORCODE; 
       END IF;
  ELSEIF PISENDSTATUS=3 THEN
       UPDATE BATCH_MT_REQ SET USERUID=PIUSERUID,SENDSTATUS=PISENDSTATUS,ERRORCODE=PIERRORCODE,MSGID=PIMSGID,SENDTIME=NOW()
       WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID  AND SENDSTATUS=1;
       SET PIROWCOUNT=ROW_COUNT();
       IF  P_ERR=1 THEN
       SELECT COUNT(1) INTO PIROWCOUNT FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID 
       AND USERUID=PIUSERUID AND SENDSTATUS=PISENDSTATUS AND ERRORCODE=PIERRORCODE AND MSGID=PIMSGID; 
       END IF;
  ELSEIF PISENDSTATUS=4 THEN
       UPDATE BATCH_MT_REQ SET SENDSTATUS=PISENDSTATUS,LOCALPATH=PILOCALPATH,SENDNUM=PISENDNUM,SENDTIME=NOW(),
       TOTALNUM=PITOTALNUM,CLUPATH=PICLUPATH,CLUGWNO=PICLUGWNO
       WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID  AND SENDSTATUS=3;
       SET PIROWCOUNT=ROW_COUNT();
       IF  P_ERR=1 THEN
       SELECT COUNT(1) INTO PIROWCOUNT FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID 
       AND SENDSTATUS=PISENDSTATUS AND LOCALPATH=PILOCALPATH AND SENDNUM=PISENDNUM AND TOTALNUM=PITOTALNUM AND CLUPATH=PICLUPATH AND CLUGWNO=PICLUGWNO; 
       END IF;
       IF PIROWCOUNT <> 1 THEN
       SET P_ERR=0;
       START TRANSACTION;
       SAVEPOINT A;
       UPDATE BATCH_MT_REQ SET SENDSTATUS=0,ERRORCODE='UPDFAIL',SENDTIME=NOW() WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ;
       INSERT INTO BATCH_MT_REQ_HIS  SELECT * FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID  ;
       DELETE FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ;
       DELETE FROM ATTIME_TASK WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ;
       IF P_ERR=1 THEN
          ROLLBACK TO SAVEPOINT A;
       ELSE
          COMMIT;
       END IF;
       END IF;
  ELSEIF PISENDSTATUS=5 THEN
       UPDATE BATCH_MT_REQ SET SENDSTATUS=PISENDSTATUS,SENDNUM=PISENDNUM,SENDTIME=NOW()
       WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ;
       SET PIROWCOUNT=ROW_COUNT();
       IF  P_ERR=1 THEN
       SELECT COUNT(1) INTO PIROWCOUNT FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID 
       AND SENDSTATUS=PISENDSTATUS AND SENDNUM=PISENDNUM; 
       END IF;
       
  ELSEIF PISENDSTATUS=6 THEN
       UPDATE BATCH_MT_REQ SET ERRORCODE=PIERRORCODE,SENDNUM=PISENDNUM,SENDTIME=NOW()
       WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID ; 
       SET PIROWCOUNT=ROW_COUNT();
       IF  P_ERR=1 THEN
       SELECT COUNT(1) INTO PIROWCOUNT FROM BATCH_MT_REQ WHERE BMTMSGID=PIBMTMSGID AND LOGINID=PILOGINID 
       AND ERRORCODE=PIERRORCODE AND SENDNUM=PISENDNUM; 
       END IF;
  ELSE
      SET PIROWCOUNT=0;
 END IF;
SELECT PIROWCOUNT AS UPDROWCOUNT;
END;;
DELIMITER ;



DROP PROCEDURE IF EXISTS `GW_WR_MTTASKBAK`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTTASKBAK`
 (
    PIUID         INT(11),
    PIPTMSGID     BIGINT(20),
    PIECID        INT(11),
    PISENDSTATUS  SMALLINT,
    PIRETFLAG     TINYINT UNSIGNED,
    PIPKNUMBER    TINYINT UNSIGNED,
    PIPKTOTAL     TINYINT UNSIGNED,
    PIFEEFLAG     TINYINT UNSIGNED,
    PISENDLEVEL   TINYINT UNSIGNED,
    PIRECVMTTIME  DATETIME,
    PIUSERID      VARCHAR(11),
    PISPGATE      VARCHAR(21),
    PICPNO        VARCHAR(21),
    PIPHONE       VARCHAR(21),
    PIMESSAGE     VARCHAR(3000),
    PITASKID      INT(11),
    PIERRORCODE   VARCHAR(7),
    PITPUDHI      TINYINT UNSIGNED,
    PILONGMSGSEQ  TINYINT UNSIGNED,
    PIMSGFMT      TINYINT UNSIGNED,
    PIUNICOM      TINYINT UNSIGNED,
    PIMOBILEAREA  INT(11),
    PISVRTYPE     VARCHAR(64),
    PIP1          VARCHAR(64),
    PIP2          VARCHAR(64),
    PIP3          VARCHAR(64),
    PIP4          VARCHAR(64),
    PIUSERMSGID   BIGINT(20),
    PIMODULEID    INT(11),
    PIATTIME      BIGINT(20),
    PIVALIDTIME   BIGINT(20),
    PISENDTYPE    TINYINT UNSIGNED,
    PIBATCHID     BIGINT(20),
    PIAREACODE    INT(11)
 )
BEGIN
    DECLARE PICNT INT(11);
    SELECT COUNT(ID) INTO PICNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID;
  IF PICNT=0 THEN
    INSERT INTO GW_MT_TASK_BAK(UID,PTMSGID,ECID,SENDSTATUS,RETFLAG,PKNUMBER,PKTOTAL,FEEFLAG,SENDLEVEL,
    RECVMTTIME,USERID,SPGATE,CPNO,PHONE,MESSAGE,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
    MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
    VALUES(PIUID,PIPTMSGID,PIECID,PISENDSTATUS,PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIFEEFLAG,PISENDLEVEL,PIRECVMTTIME,
    PIUSERID,PISPGATE,PICPNO,PIPHONE,PIMESSAGE,PITASKID,PIERRORCODE,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,PIUNICOM,
    PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE);
  END IF;
END;;
DELIMITER ;

DROP PROCEDURE IF EXISTS `GW_WR_MTTASKBAKV1`;
DELIMITER ;;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTTASKBAKV1`
 (
    PIUID         INT(11),
    PIPTMSGID     BIGINT(20),
    PIECID        INT(11),
    PISENDSTATUS  SMALLINT,
    PIRETFLAG     TINYINT UNSIGNED,
    PIPKNUMBER    TINYINT UNSIGNED,
    PIPKTOTAL     TINYINT UNSIGNED,
    PIFEEFLAG     TINYINT UNSIGNED,
    PISENDLEVEL   TINYINT UNSIGNED,
    PIRECVMTTIME  DATETIME,
    PIUSERID      VARCHAR(11),
    PISPGATE      VARCHAR(21),
    PICPNO        VARCHAR(21),
    PIPHONE       VARCHAR(21),
    PIMESSAGE     VARCHAR(3000),
    PITASKID      INT(11),
    PIERRORCODE   VARCHAR(7),
    PITPUDHI      TINYINT UNSIGNED,
    PILONGMSGSEQ  TINYINT UNSIGNED,
    PIMSGFMT      TINYINT UNSIGNED,
    PIUNICOM      TINYINT UNSIGNED,
    PIMOBILEAREA  INT(11),
    PISVRTYPE     VARCHAR(64),
    PIP1          VARCHAR(64),
    PIP2          VARCHAR(64),
    PIP3          VARCHAR(64),
    PIP4          VARCHAR(64),
    PIUSERMSGID   BIGINT(20),
    PIMODULEID    INT(11),
    PIATTIME      BIGINT(20),
    PIVALIDTIME   BIGINT(20),
    PISENDTYPE    TINYINT UNSIGNED,
    PIBATCHID     BIGINT(20),
    PIAREACODE    INT(11),
    P_CUSTID VARCHAR(64),
	  P_EXDATA VARCHAR(64)
 )
BEGIN
    DECLARE PICNT INT(11);
    SELECT COUNT(ID) INTO PICNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID;
  IF PICNT=0 THEN
    INSERT INTO GW_MT_TASK_BAK(UID,PTMSGID,ECID,SENDSTATUS,RETFLAG,PKNUMBER,PKTOTAL,FEEFLAG,SENDLEVEL,
    RECVMTTIME,USERID,SPGATE,CPNO,PHONE,MESSAGE,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
    MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
    VALUES(PIUID,PIPTMSGID,PIECID,PISENDSTATUS,PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIFEEFLAG,PISENDLEVEL,PIRECVMTTIME,
    PIUSERID,PISPGATE,PICPNO,PIPHONE,PIMESSAGE,PITASKID,PIERRORCODE,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,PIUNICOM,
    PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,P_CUSTID,P_EXDATA);
  END IF;
END;;
DELIMITER ;

DELIMITER ;;  
DROP PROCEDURE IF EXISTS `GW_MTTASKSUPPV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_MTTASKSUPPV2`(P_OLDMSGID BIGINT,
	P_NEWMSGID BIGINT,
	P_SRCUID INT,
	P_SRCUSRID VARCHAR(11),
	P_SRCSPGATE VARCHAR(21),
	P_SRCSPNUMBER VARCHAR(21),
	P_DESTUID INT,
	P_DESTUSRID VARCHAR(11),
	P_DESTSPGATE VARCHAR(21),
	P_DESTSPNUMBER VARCHAR(21),
	P_DESTFEEFLAG INT,
	P_SPLITLEN TINYINT UNSIGNED,
	P_MULTILEN1 TINYINT UNSIGNED,
	P_MULTILEN2 TINYINT UNSIGNED,
	P_NEWSIGNLEN TINYINT UNSIGNED,
	P_OLDSIGNLEN TINYINT UNSIGNED,
	P_SIGNATURE VARCHAR(20),
  P_NEWSIGNPOS INT,
	P_OLDSIGNPOS INT,
	P_ENSPLITLEN INT, ##英文短信单条长度，小于等于0标识不支持英文短信
  P_ENMULTILEN1 INT, ##英文长短信拆分长度
  P_ENMULTILEN2 INT, ##英文长短信最后一条长度
  P_NEWENSIGNLEN INT, ##补发英文签名长度
  P_OLDENSIGNLEN INT, ##原英文签名长度
  P_ENSIGNATURE VARCHAR(20)##英文签名
	)
BEGIN
	DECLARE P_SENDNUM INT;
	DECLARE P_PKTOTAL INT;
	DECLARE P_PKNUM	 INT;
	DECLARE P_INITMSGID BIGINT;
	DECLARE P_SINGLEMSG VARCHAR(720);
	DECLARE P_SINGLEMSG1 VARCHAR(720);
	DECLARE P_LONGMSG VARCHAR(3000);
	DECLARE P_TOTALCNT INT;
	DECLARE P_LONGMSGLEN INT;
	DECLARE P_ECID INT;
	DECLARE P_PHONE VARCHAR(21);
	DECLARE P_SENDLEVEL TINYINT UNSIGNED;
	DECLARE P_TASKID INT;
	DECLARE P_RECVMTTIME DATETIME;
	DECLARE P_SRCCPNO  VARCHAR(21);
	DECLARE P_DESTCPNO VARCHAR(21);
	DECLARE P_TPUDHI TINYINT UNSIGNED;
	DECLARE P_TPPID TINYINT UNSIGNED;
	DECLARE P_LONGMSGSEQ TINYINT UNSIGNED;
	DECLARE P_MSGFMT TINYINT UNSIGNED;
	DECLARE P_UNICOM TINYINT UNSIGNED;
	DECLARE P_MOBILEAREA INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_USERMSGID BIGINT;
	DECLARE P_SENDTYPE TINYINT UNSIGNED;
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_MODULEID INT;
	DECLARE P_ATTIME BIGINT;
	DECLARE P_VALIDTIME BIGINT;
	DECLARE P_BATCHID BIGINT;
  DECLARE P_AREACODE INT;
  
  DECLARE P_SPLITLEN_V INT;
  DECLARE P_MULTILEN1_V INT;
  DECLARE P_MULTILEN2_V INT;
  DECLARE P_NEWSIGNLEN_V INT;
  DECLARE P_OLDSIGNLEN_V INT;
  DECLARE P_SIGNATURE_V  VARCHAR(22);
  
   DECLARE P_RCOUNT1 INT;
        DECLARE P_RCOUNT2 INT;

	SET P_LONGMSG='';
	SET P_RECVMTTIME = NOW();
	SET P_SRCCPNO  = SUBSTRING(P_SRCSPNUMBER,CHAR_LENGTH(P_SRCSPGATE)+1,CHAR_LENGTH(P_SRCSPNUMBER)-CHAR_LENGTH(P_SRCSPGATE));
	SET P_DESTCPNO = SUBSTRING(P_DESTSPNUMBER,CHAR_LENGTH(P_DESTSPGATE)+1,CHAR_LENGTH(P_DESTSPNUMBER)-CHAR_LENGTH(P_DESTSPGATE));
	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTSUPPV1(UID INT,PTMSGID BIGINT,ECID INT,TASKID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),PHONE VARCHAR(21),
	SPMSGID BIGINT,RETFLAG TINYINT UNSIGNED,FEEFLAG TINYINT UNSIGNED,PKNUMBER TINYINT UNSIGNED,PKTOTAL TINYINT UNSIGNED,SENDSTATUS TINYINT UNSIGNED,SENDFLAG TINYINT UNSIGNED,RECVFLAG TINYINT UNSIGNED,PASSTHROUGH TINYINT UNSIGNED,
	DONEDATE CHAR(10),ERRORCODE CHAR(7),SENDLEVEL TINYINT UNSIGNED,SENDTYPE TINYINT UNSIGNED,UNICOM TINYINT UNSIGNED,RESENDCNT TINYINT UNSIGNED,RECVMTTIME DATETIME,RECVTIME DATETIME,USERMSGID BIGINT,
	MESSAGE VARCHAR(3000),TPUDHI TINYINT UNSIGNED,LONGMSGSEQ TINYINT UNSIGNED,MSGFMT TINYINT UNSIGNED,MOBILEAREA INT,SVRTYPE VARCHAR(64),TPPID TINYINT UNSIGNED,P1 VARCHAR(64),
	P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,BATCHID BIGINT,AREACODE INT);
  TRUNCATE P_TMP_MTSUPPV1;

	##取补发帐号的费用
	SELECT SENDNUM INTO P_SENDNUM FROM USERFEE WHERE USERID=P_DESTUSRID;
	##该模式可以把原始MSGID返给用户##用旧的MSGID复制一份记录插入临时表
	INSERT INTO P_TMP_MTSUPPV1(UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
	SELECT UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
	##只对0,8,15编码和人工实时、批量实时短信进行补发,其他不补发
	FROM  GW_MT_TASK_BAK WHERE PTMSGID=P_OLDMSGID AND USERID=P_SRCUSRID  AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND LOCATE(P_SRCSPNUMBER,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)),1)=1 ;
  SET   P_RCOUNT1=ROW_COUNT();
  
  IF IFNULL(P_RCOUNT1,0)<=0 THEN
  ##该模式可以把原始MSGID返给用户##用旧的MSGID复制一份记录插入临时表
	INSERT INTO P_TMP_MTSUPPV1(UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
	SELECT UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
	##只对0,8,15编码和人工实时、批量实时短信进行补发,其他不补发
	FROM  MT_TASK WHERE PTMSGID=P_OLDMSGID AND USERID=P_SRCUSRID  AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND LOCATE(P_SRCSPNUMBER,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)),1)=1 ;
        SET   P_RCOUNT1=ROW_COUNT();
  END IF;
        
        DELETE FROM P_TMP_MTSUPPV1  WHERE  UNICOM=5 AND MSGFMT=0;
        SET   P_RCOUNT2=ROW_COUNT();
	IF  P_RCOUNT1-P_RCOUNT2>0 THEN

		SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
                          MOBILEAREA,SVRTYPE,TPPID,USERMSGID,SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
                   INTO P_PKTOTAL,P_PKNUM,P_ECID,P_PHONE,P_SENDLEVEL,P_TASKID,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,
                          P_MOBILEAREA,P_SVRTYPE,P_TPPID,P_USERMSGID,P_SENDTYPE,P_P1,P_P2,P_P3,P_P4,P_MODULEID,P_ATTIME,P_VALIDTIME,P_BATCHID,P_AREACODE
		  FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
     
     ##如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
       SET P_OLDSIGNLEN_V=P_OLDENSIGNLEN;
     ELSE
       SET P_OLDSIGNLEN_V=P_OLDSIGNLEN;
     END IF; ##IF (0 == P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
     ##如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = P_MSGFMT AND 0 < P_ENSPLITLEN) THEN
       SET P_SPLITLEN_V  =P_ENSPLITLEN;
       SET P_MULTILEN1_V =P_ENMULTILEN1;
       SET P_MULTILEN2_V =P_ENMULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWENSIGNLEN;
       SET P_SIGNATURE_V =P_ENSIGNATURE;
     ELSE
       SET P_SPLITLEN_V  =P_SPLITLEN;
       SET P_MULTILEN1_V =P_MULTILEN1;
       SET P_MULTILEN2_V =P_MULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWSIGNLEN;
       SET P_SIGNATURE_V =P_SIGNATURE;
     END IF;
     
		 IF (P_PKTOTAL <= 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)) THEN ##对于非长短信补发的处理
				SET P_LONGMSG='';
				##取短信内容
				SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
				##更新替换MSGID
				UPDATE  GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
				UPDATE  MT_TASK SET RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF; ##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(TRIM(P_LONGMSG),P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,TRIM(P_LONGMSG));
          END IF;

					##调用插入存储过程
					CALL S_WR_MTTASK(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
				ELSE
					SET P_LONGMSG='';
				END IF;##END OF IF P_LONGMSGLEN > 0
				SET P_PKNUM=1;
			#END IF;##END OF P_PKTOTAL = 1
 /*
		ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2) AND P_TPUDHI=1) THEN ##对标准协议长短信的补发
			SET P_LONGMSG='';
			##取短信内容
			SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
			##更新替换MSGID
			UPDATE  GW_MT_TASK_BAK SET PTMSGID=P_NEWMSGID,RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
			IF (P_PKTOTAL=P_PKNUM) THEN ##如果是最后一条，去掉旧签名，加上新签名
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN; ##减去签名的净长度
				SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
				SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE)	;
			END IF;##END OF IF P_PKTOTAL=P_PKNUM
			SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
			IF P_LONGMSGLEN > 0 THEN
				##调用插入存储过程
				CALL S_WR_MTTASKSR(P_DESTUID,P_OLDMSGID,2,1,P_PKTOTAL,1,P_ECID,
								P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
								P_PHONE,P_DESTFEEFLAG,P_PKNUM,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
								P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,
								P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
			ELSE
				SET P_LONGMSG='';
		  END IF; ##END OF IF P_LONGMSGLEN > 0
		#END IF;## END OF IF P_PKTOTAL > 1
*/
        	ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)  AND P_TPUDHI=0) THEN ##对非标准长短信协议的处理
			SET P_LONGMSG='';
			##没有补发过且通道号跟源通道号相等
			IF EXISTS(SELECT * FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID) THEN
				##循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
				##计算起始MSGID
				SET P_INITMSGID = P_OLDMSGID-(P_PKNUM-1)*17179869184;
				SET P_PKNUM = 1;
				WHILE P_PKNUM <= P_PKTOTAL DO
				WHILELABLE:BEGIN
					##取短信内容 ##若长短信中间的某条缺失，则不补发(暂不考虑)
					SELECT MESSAGE INTO P_SINGLEMSG FROM  GW_MT_TASK_BAK WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					IF IFNULL(P_SINGLEMSG,'') =''  THEN
					  SELECT MESSAGE INTO P_SINGLEMSG1 FROM MT_TASK WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					  IF IFNULL(P_SINGLEMSG1,'') =''  THEN
						SET P_LONGMSG='';
						LEAVE WHILELABLE;
						ELSE
						UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
            SET P_LONGMSG = CONCAT(IFNULL(P_LONGMSG,''),IFNULL(P_SINGLEMSG1,''));
						END IF; ##IF P_SINGLEMSG1 ='' THEN
					ELSE
					##更新替换MSGID
					UPDATE  GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
          SET P_LONGMSG = CONCAT(IFNULL(P_LONGMSG,''),IFNULL(P_SINGLEMSG,''));
          ##拼接短信内容
					END IF; ##IF P_SINGLEMSG = '' THEN
					SET P_PKNUM = P_PKNUM+1;
				END WHILELABLE;
				END WHILE;##END OF WHILE P_PKNUM <= P_PKTOTAL
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF;##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(TRIM(P_LONGMSG),P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,TRIM(P_LONGMSG));
          END IF;

					##调用插入存储过程
					CALL S_WR_MTTASK(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);

	                   ELSE
		              SET P_LONGMSG='';
		           END IF;##END OF IF P_LONGMSGLEN > 0
		              SET P_PKNUM=1 ;
			END IF; ##END OF IF EXISTS(SELECT COUNT(*) FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID AND RESENDCNT<1 AND (CONCAT(RTRIM(SPGATE),RTRIM(CPNO)))=P_SRCSPNUMBER)
		END	IF;##END OF IF P_PKTOTAL > 1
	END IF; ##END OF IF ROWCOUNT()<>0

	SELECT P_DESTUID AS UID,P_NEWMSGID AS PTMSGID,ECID,TASKID,P_DESTUSRID AS USERID,P_DESTSPGATE AS SPGATE,
	P_DESTCPNO AS CPNO,P_PHONE AS PHONE,RETFLAG,P_DESTFEEFLAG AS FEEFLAG,P_PKNUM AS PKNUMBER,P_PKTOTAL AS PKTOTAL,
	SENDSTATUS,1 AS SENDLEVEL,P_RECVMTTIME AS RECVMTTIME,P_LONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
	MOBILEAREA,SVRTYPE,TPPID,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE FROM P_TMP_MTSUPPV1 WHERE P_LONGMSG<>'' ;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS GW_DELWAIT; 
CREATE DEFINER=`root`@`%` PROCEDURE `GW_DELWAIT`()
BEGIN
  ##批量转移临时变量
  DECLARE PI_CURINDEX           BIGINT;
  DECLARE PI_MAXINDEX           BIGINT;
  DECLARE PI_MININDEX           BIGINT;
  DECLARE EACHMAX               INT; ##每次处理最大数
  
   ##异常代码
  DECLARE P_ERR  INT DEFAULT 0;
  DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
  
  SET EACHMAX = 500000;
  
  SELECT MIN(ID),MAX(ID) INTO PI_MININDEX,PI_MAXINDEX FROM BATCH_MT_REQ_HIS WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 60 DAY);
  SET PI_CURINDEX=PI_MININDEX;
  WHILE PI_CURINDEX<PI_MAXINDEX DO
  IF PI_MAXINDEX-PI_CURINDEX>=EACHMAX THEN
     SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
  ELSE        
     SET PI_CURINDEX=PI_MAXINDEX;
  END IF;
  SET P_ERR=0;
  DELETE FROM BATCH_MT_REQ_HIS WHERE ID <= PI_CURINDEX;
  IF P_ERR = 1 THEN 
     INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除BATCH_MT_REQ_HIS表记录','删除数据出现异常');
  END IF;
  END WHILE;
  
  
  IF DAYOFMONTH(NOW())=1 THEN

  SELECT MIN(ID),MAX(ID) INTO PI_MININDEX,PI_MAXINDEX FROM MO_WAIT_A WHERE DELIVERTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
  SET PI_CURINDEX=PI_MININDEX;
  WHILE PI_CURINDEX<PI_MAXINDEX DO
  IF PI_MAXINDEX-PI_CURINDEX>=EACHMAX THEN
     SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
  ELSE        
     SET PI_CURINDEX=PI_MAXINDEX;
  END IF;
  SET P_ERR=0;
  DELETE FROM MO_WAIT_A WHERE ID <= PI_CURINDEX;
  IF P_ERR = 1 THEN 
     INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除MO_WAIT_A表记录','删除数据出现异常');
  END IF;
  END WHILE;

  SELECT MIN(ID),MAX(ID) INTO PI_MININDEX,PI_MAXINDEX FROM RPT_WAIT_A WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
  SET PI_CURINDEX=PI_MININDEX;
  WHILE PI_CURINDEX<PI_MAXINDEX DO
  IF PI_MAXINDEX-PI_CURINDEX>=EACHMAX THEN
     SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
  ELSE        
     SET PI_CURINDEX=PI_MAXINDEX;
  END IF;
  SET P_ERR=0;
  DELETE FROM RPT_WAIT_A WHERE ID <= PI_CURINDEX;
  IF P_ERR = 1 THEN 
     INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除RPT_WAIT_A表记录','删除数据出现异常');
  END IF;
  END WHILE;

  SELECT MIN(ID),MAX(ID) INTO PI_MININDEX,PI_MAXINDEX FROM RPT_WAIT_B WHERE RECVTIME<DATE_SUB(CURDATE(),INTERVAL 1 MONTH);
  SET PI_CURINDEX=PI_MININDEX;
  WHILE PI_CURINDEX<PI_MAXINDEX DO
  IF PI_MAXINDEX-PI_CURINDEX>=EACHMAX THEN
     SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
  ELSE        
     SET PI_CURINDEX=PI_MAXINDEX;
  END IF;
  SET P_ERR=0;
  DELETE FROM RPT_WAIT_B WHERE ID <= PI_CURINDEX;
  IF P_ERR = 1 THEN 
     INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除RPT_WAIT_B表记录','删除数据出现异常');
  END IF;
  END WHILE;

  END IF;
  
  INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS, RUNFLAG) VALUES('SMS','GW_H_DATATRANV2','短信汇总调度存储过程执行结束',1);
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_H_DATATRANV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_DATATRANV2`(ISP1 INT,ISP2 INT,ISP3 INT,ISP4 INT)
TOP:
BEGIN
	DECLARE  P_COUNTINFO INT;
	DECLARE  P_PROCESSINGSTATUSCOUNT  INT; #PROCESSINGSTATUS表记录数(根据USEID设置值判断,为1正常)
	DECLARE  P_USEID                 INT; #使用哪一个USEID作为当前状态处理
	DECLARE  P_CURRINDEX             BIGINT; #当前处理位置
	DECLARE  P_MAXINDEX              BIGINT; #此次执行的最大位置
	DECLARE  P_COUNTSTATUS           INT; #统计状态0:正常,1:错误
	DECLARE  P_DISTRACTSTATUS        INT; #数据转移状态0:正常,1:错误
	DECLARE  P_DELETESTATUS          INT; #删除状态0:正常,1:错误
	DECLARE  P_PROCESSFLAG           INT; #转移方式0:处理今天（含今天)以前的，1为前一天以前的 ,2为前二天以前的...以此类推,

        DECLARE   MINYM INT;                  
        DECLARE   MAXYM INT;                  
        DECLARE   CURYM INT;                  
        DECLARE   TABLENAME       VARCHAR(20);
        DECLARE   STR       VARCHAR(4000) ;  
        DECLARE   P_ISEXIST  INT;

	#异常退出
	DECLARE  P_COUNTEXCEPTION        INT;#允许统计异常最大值
	DECLARE  P_DISTRACTEXCEPTION     INT; #允许数据转移异常最大值
	DECLARE  P_DELETEEXCEPTION       INT; #允许删除数据异常最大值
	DECLARE  P_ALLEXCEPTION          INT; #允许所有异常最大值

       ##批量转移临时变量
       DECLARE PI_CURINDEX           BIGINT;
       DECLARE PI_MAXINDEX           BIGINT;
       DECLARE PI_MININDEX           BIGINT;
       DECLARE EACHMAX               INT; ##每次处理最大数
  DECLARE MAXIYMD INT;
  DECLARE DIFFDATE INT;
DECLARE P_PROCESSFLAGHZ INT;
       ##异常代码
        DECLARE P_ERR  INT DEFAULT 0;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
	#初始化
	SET P_PROCESSINGSTATUSCOUNT = 0;
	SET P_USEID                 = 1;
	SET P_CURRINDEX             = 0;
	SET P_MAXINDEX              = 0;
	SET P_COUNTSTATUS           = 1;
	SET P_DISTRACTSTATUS        = 1;
	SET P_DELETESTATUS          = 1;
	SET P_PROCESSFLAG           = 3;
	SET EACHMAX               = 500000;
	SET P_COUNTEXCEPTION        = 5;
	SET P_DISTRACTEXCEPTION     = 5;
	SET P_DELETEEXCEPTION       = 5;
	SET P_ALLEXCEPTION          = 10;

        INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','GW_H_DATATRANV2','短信汇总调度存储过程执行开始');
	#1.先汇总
          SET P_PROCESSFLAGHZ=P_PROCESSFLAG;
          SELECT IFNULL(MAX(IYMD),20000101) INTO MAXIYMD  FROM MT_DATAREPORT;
  SET   DIFFDATE=TO_DAYS(DATE_SUB(CURDATE(),INTERVAL 2 DAY)) -TO_DAYS(DATE_FORMAT(MAXIYMD, '%Y-%m-%d')) ; 
 IF DIFFDATE>0 THEN
  SET   P_PROCESSFLAGHZ=P_PROCESSFLAG+DIFFDATE;
END IF;
	SELECT COUNT(ID) INTO P_COUNTINFO FROM GW_MT_TASK_BAK  WHERE  SENDTIME  >= (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAGHZ DAY)) AND SENDTIME <CURDATE() ;

	IF P_COUNTINFO>0 THEN
                SET P_ERR=0; 
		CALL GW_H_STATISTIV2(P_PROCESSFLAGHZ,ISP1,ISP2,ISP3,ISP4);
                IF P_ERR=1 THEN 
                   INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行汇总GW_H_STATISTIV2','汇总出现异常');
                END IF;
	END IF;
	#2.再转移
	#先根据指定USEID判断是否有值
	SELECT COUNT(USEID) INTO P_PROCESSINGSTATUSCOUNT FROM PROCESSINGSTATUS WHERE USEID = P_USEID;
	#如果没有先初始化PROCESSINGSTATUS,否则取当表中值
	IF P_PROCESSINGSTATUSCOUNT = 0 THEN
         BEGIN
		CALL H_PROCESSSTATUS(P_USEID,0,0,0,0,0)	;
               SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END;
	ELSE
		SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END IF;
      

	SELECT MIN(ID) INTO P_MAXINDEX FROM GW_MT_TASK_BAK  WHERE   SENDTIME >= (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
  	IF P_MAXINDEX >0 THEN
		SET P_MAXINDEX =P_MAXINDEX -1;
	END IF;
             ##判断是否存在未转移的数据
        IF P_CURRINDEX<P_MAXINDEX THEN
             ##创建不存在的历史表
             SELECT CAST(DATE_FORMAT(MIN(SENDTIME),'%Y%m') AS SIGNED), CAST(DATE_FORMAT(MAX(SENDTIME),'%Y%m') AS SIGNED)  INTO MINYM, MAXYM  FROM GW_MT_TASK_BAK  WHERE  ID<=P_MAXINDEX;
             SET CURYM = MINYM;
             WHILE CURYM<=MAXYM DO
                  SET TABLENAME =CONCAT( 'MTTASK',CURYM)	;
                  SELECT COUNT(1)  INTO P_ISEXIST FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA`=DATABASE() AND `TABLE_NAME`=TABLENAME ;
                  IF P_ISEXIST=0 THEN
                       SET P_ERR=0;
                      CALL CREATETABLE(1,CURYM);
                      IF P_ERR=1 THEN 
                         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行历史表创建：CREATETABLE','创建历史表出现异常');
                      END IF;
                  END IF;

                  IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                      SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
                  ELSE
                      SET CURYM = CURYM+1  ;
                  END IF;
            END WHILE;
             ##转移数据
             SET P_ERR=0;
	   IF (P_MAXINDEX-P_CURRINDEX>=EACHMAX) THEN
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=PI_MININDEX+EACHMAX;
           ELSE
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=P_MAXINDEX;
           END IF;
          WHILE (PI_MININDEX <P_MAXINDEX) DO
               START TRANSACTION;
                SAVEPOINT A;
                CALL GW_H_TRANSFERV1(PI_MININDEX,PI_CURINDEX,0,0);              
                CALL GW_H_DELTASKV1(PI_MININDEX,PI_CURINDEX,0,0);
                CALL H_PROCESSSTATUS(P_USEID,PI_CURINDEX,PI_CURINDEX,0,0,0);
		IF P_ERR = 1 THEN
                BEGIN
                    ROLLBACK TO  SAVEPOINT A;
                    INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行数据转移','下行数据转移出现异常');
                    SET P_DISTRACTEXCEPTION = P_DISTRACTEXCEPTION - 1;
                    SET P_ALLEXCEPTION      = P_ALLEXCEPTION - 1;                                      
                    IF P_DISTRACTEXCEPTION <= 0 OR P_ALLEXCEPTION <= 0 THEN
                       LEAVE TOP;
                   END IF;
               END;
               ELSE
                 IF (P_MAXINDEX-PI_CURINDEX>=EACHMAX) THEN
                    SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 ELSE
                    SET PI_CURINDEX=P_MAXINDEX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 END IF;
                 COMMIT;
              END IF;
        END WHILE;
        END IF;

        #5.执行上行统计
CALL  H_TRANSFERMO();
##删除RPT_WAIT_A,RPT_WAIT_B,MO_WAIT_A,BATCH_MT_REQ_HIS
CALL GW_DELWAIT();
END TOP;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_H_DATATRANV3`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_H_DATATRANV3`(ISP1 INT,ISP2 INT,ISP3 INT,ISP4 INT)
TOP:
BEGIN
	DECLARE  P_COUNTINFO INT;
	DECLARE  P_PROCESSINGSTATUSCOUNT  INT; #PROCESSINGSTATUS表记录数(根据USEID设置值判断,为1正常)
	DECLARE  P_USEID                 INT; #使用哪一个USEID作为当前状态处理
	DECLARE  P_CURRINDEX             BIGINT; #当前处理位置
	DECLARE  P_MAXINDEX              BIGINT; #此次执行的最大位置
	DECLARE  P_COUNTSTATUS           INT; #统计状态0:正常,1:错误
	DECLARE  P_DISTRACTSTATUS        INT; #数据转移状态0:正常,1:错误
	DECLARE  P_DELETESTATUS          INT; #删除状态0:正常,1:错误
	DECLARE  P_PROCESSFLAG           INT; #转移方式0:处理今天（含今天)以前的，1为前一天以前的 ,2为前二天以前的...以此类推,

        DECLARE   MINYM INT;                  
        DECLARE   MAXYM INT;                  
        DECLARE   CURYM INT;                  
        DECLARE   TABLENAME       VARCHAR(20);
        DECLARE   STR       VARCHAR(4000) ;  
        DECLARE   P_ISEXIST  INT;

	#异常退出
	DECLARE  P_COUNTEXCEPTION        INT;#允许统计异常最大值
	DECLARE  P_DISTRACTEXCEPTION     INT; #允许数据转移异常最大值
	DECLARE  P_DELETEEXCEPTION       INT; #允许删除数据异常最大值
	DECLARE  P_ALLEXCEPTION          INT; #允许所有异常最大值

       ##批量转移临时变量
       DECLARE PI_CURINDEX           BIGINT;
       DECLARE PI_MAXINDEX           BIGINT;
       DECLARE PI_MININDEX           BIGINT;
       DECLARE EACHMAX               INT; ##每次处理最大数
  DECLARE MAXIYMD INT;
  DECLARE DIFFDATE INT;
DECLARE P_PROCESSFLAGHZ INT;
       ##异常代码
        DECLARE P_ERR  INT DEFAULT 0;
        DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION,NOT FOUND SET P_ERR=1;
	#初始化
	SET P_PROCESSINGSTATUSCOUNT = 0;
	SET P_USEID                 = 1;
	SET P_CURRINDEX             = 0;
	SET P_MAXINDEX              = 0;
	SET P_COUNTSTATUS           = 1;
	SET P_DISTRACTSTATUS        = 1;
	SET P_DELETESTATUS          = 1;
	SET P_PROCESSFLAG           = 3;
	SET EACHMAX               = 500000;
	SET P_COUNTEXCEPTION        = 5;
	SET P_DISTRACTEXCEPTION     = 5;
	SET P_DELETEEXCEPTION       = 5;
	SET P_ALLEXCEPTION          = 10;

        INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','GW_H_DATATRANV3','短信汇总调度存储过程执行开始');
	#1.先汇总

	SELECT COUNT(ID) INTO P_COUNTINFO FROM GW_MT_TASK_BAK  WHERE  SENDTIME <CURDATE() ;

	IF P_COUNTINFO>0 THEN
                SET P_ERR=0; 
		CALL GW_H_STATISTIV3(ISP1,ISP2,ISP3,ISP4);
                IF P_ERR=1 THEN 
                   INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行汇总GW_H_STATISTIV3','汇总出现异常');
                END IF;
	END IF;
	#2.再转移
	#先根据指定USEID判断是否有值
	SELECT COUNT(USEID) INTO P_PROCESSINGSTATUSCOUNT FROM PROCESSINGSTATUS WHERE USEID = P_USEID;
	#如果没有先初始化PROCESSINGSTATUS,否则取当表中值
	IF P_PROCESSINGSTATUSCOUNT = 0 THEN
         BEGIN
		CALL H_PROCESSSTATUS(P_USEID,0,0,0,0,0)	;
               SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END;
	ELSE
		SELECT CURRINDEX,MAXINDEX,COUNTSTATUS,DISTRACTSTATUS,DELETESTATUS INTO P_CURRINDEX, P_MAXINDEX,P_COUNTSTATUS,P_DISTRACTSTATUS,P_DELETESTATUS FROM  PROCESSINGSTATUS WHERE USEID =P_USEID ;
        END IF;
      

	SELECT MAX(ID) INTO P_MAXINDEX FROM GW_MT_TASK_BAK  WHERE   SENDTIME < (DATE_SUB(CURDATE(),INTERVAL P_PROCESSFLAG DAY));
             ##判断是否存在未转移的数据
        IF P_CURRINDEX<P_MAXINDEX THEN
             ##创建不存在的历史表
             SELECT CAST(DATE_FORMAT(MIN(SENDTIME),'%Y%m') AS SIGNED), CAST(DATE_FORMAT(MAX(SENDTIME),'%Y%m') AS SIGNED)  INTO MINYM, MAXYM  FROM GW_MT_TASK_BAK  WHERE  ID<=P_MAXINDEX;
             SET CURYM = MINYM;
             WHILE CURYM<=MAXYM DO
                  SET TABLENAME =CONCAT( 'MTTASK',CURYM)	;
                  SELECT COUNT(1)  INTO P_ISEXIST FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA`=DATABASE() AND `TABLE_NAME`=TABLENAME ;
                  IF P_ISEXIST=0 THEN
                       SET P_ERR=0;
                      CALL CREATETABLE(1,CURYM);
                      IF P_ERR=1 THEN 
                         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行历史表创建：CREATETABLE','创建历史表出现异常');
                      END IF;
                  END IF;

                  IF CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),5,2) AS SIGNED)=12 THEN
                      SET CURYM = CAST(CONCAT(CAST(CAST(SUBSTRING(CAST(CURYM AS CHAR(6)),1,4)AS SIGNED)+1 AS CHAR(4)),'01' )AS SIGNED);
                  ELSE
                      SET CURYM = CURYM+1  ;
                  END IF;
            END WHILE;
             ##转移数据
             SET P_ERR=0;
	   IF (P_MAXINDEX-P_CURRINDEX>=EACHMAX) THEN
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=PI_MININDEX+EACHMAX;
           ELSE
              SET PI_MININDEX=P_CURRINDEX;
              SET PI_CURINDEX=P_MAXINDEX;
           END IF;
          WHILE (PI_MININDEX <P_MAXINDEX) DO
               START TRANSACTION;
                SAVEPOINT A;
                CALL GW_H_TRANSFERV1(PI_MININDEX,PI_CURINDEX,0,0);              
                CALL GW_H_DELTASKV1(PI_MININDEX,PI_CURINDEX,0,0);
                CALL H_PROCESSSTATUS(P_USEID,PI_CURINDEX,PI_CURINDEX,0,0,0);
		IF P_ERR = 1 THEN
                BEGIN
                    ROLLBACK TO  SAVEPOINT A;
                    INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信下行数据转移','下行数据转移出现异常');
                    SET P_DISTRACTEXCEPTION = P_DISTRACTEXCEPTION - 1;
                    SET P_ALLEXCEPTION      = P_ALLEXCEPTION - 1;                                      
                    IF P_DISTRACTEXCEPTION <= 0 OR P_ALLEXCEPTION <= 0 THEN
                       LEAVE TOP;
                   END IF;
               END;
               ELSE
                 IF (P_MAXINDEX-PI_CURINDEX>=EACHMAX) THEN
                    SET PI_CURINDEX=PI_CURINDEX+EACHMAX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 ELSE
                    SET PI_CURINDEX=P_MAXINDEX;
                    SET PI_MININDEX=PI_MININDEX+EACHMAX;
                 END IF;
                 COMMIT;
              END IF;
        END WHILE;
        END IF;

        #5.执行上行统计
CALL  H_TRANSFERMO();
##删除RPT_WAIT_A,RPT_WAIT_B,MO_WAIT_A,BATCH_MT_REQ_HIS
CALL GW_DELWAIT();
END TOP;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_LOADDATAV1`;
CREATE  DEFINER=`root`@`%`  PROCEDURE `GW_LOADDATAV1`(FLAG INT, INCRES   BIGINT,PRETIME INT)
TOP:
BEGIN
DECLARE  STR  NVARCHAR(5120) DEFAULT '';
DECLARE  STR1  NVARCHAR(5120) DEFAULT '';
DECLARE  STR2  NVARCHAR(5120) DEFAULT '';
DECLARE  STR3  NVARCHAR(5120) DEFAULT '';
DECLARE P_STR NVARCHAR(4000) DEFAULT '';
DECLARE TBNAME  VARCHAR(30) ;
DECLARE TBNAMEBAK VARCHAR(30);
DECLARE STARTID  BIGINT DEFAULT 0;
DECLARE MINID  BIGINT DEFAULT 0;
DECLARE ENDID  BIGINT DEFAULT 0;
DECLARE CURMINID  BIGINT DEFAULT 0;
DECLARE CURENDID BIGINT DEFAULT 0;
DECLARE COUNTID  BIGINT DEFAULT 0;
DECLARE NUM  BIGINT DEFAULT 0;
DECLARE TNUM  BIGINT DEFAULT 0;
DECLARE REMAINDER  BIGINT DEFAULT 0;
DECLARE ISSUCCES  BIGINT DEFAULT 1;
DECLARE TRANLOGID  BIGINT DEFAULT 0;
DECLARE TBNAMEERR VARCHAR(30);
DECLARE CURMINID1  BIGINT DEFAULT 0;

DECLARE I  BIGINT DEFAULT 0;
DECLARE J  BIGINT DEFAULT 0;

DECLARE C_ID INT;
DECLARE C_STARTID INT;
DECLARE C_ENDID INT;
DECLARE DONE INT DEFAULT 0;
      ##异常代码
 DECLARE PICODE  INT DEFAULT 0;
 DECLARE PICODE1  INT DEFAULT 0;
 DECLARE CUR1 CURSOR FOR SELECT  ID,STARTID,ENDID FROM GW_TRAN_DEL_LOG WHERE OPRTYPE=FLAG+4 AND ISSUCCES = 0;

 DECLARE CONTINUE  HANDLER FOR SQLEXCEPTION SET PICODE=1;
 DECLARE CONTINUE HANDLER  FOR SQLSTATE '23000'  SET PICODE=2  ;
 DECLARE CONTINUE HANDLER  FOR NOT FOUND SET DONE = 1;
 ##DECLARE CUR1 CURSOR FOR SELECT  ID,STARTID,ENDID FROM GW_TRAN_DEL_LOG WHERE OPRTYPE=FLAG+4 AND ISSUCCES = 0;

SELECT  IFNULL(MAX(ENDID),0)  INTO STARTID  FROM GW_TRAN_DEL_LOG WHERE OPRTYPE=FLAG AND ISSUCCES = 1;  ##根据 上次成功转移的记录查找本次转移的开始id


 IF FLAG =1 THEN
 SELECT IFNULL(MIN(ID),0),IFNULL(MAX(ID),0),IFNULL(COUNT(ID),0) INTO  MINID,ENDID,COUNTID  FROM  MT_TASK  WHERE SENDTIME<=DATE_SUB(NOW(),INTERVAL PRETIME MINUTE);   ##转移十分钟前的数据 
 INSERT INTO MT_TASK(PTMSGID)  VALUES( CAST(DATE_FORMAT(NOW(),'%Y%m%d%H%i%s') AS SIGNED));
 SET  TBNAME ='MT_TASK';
 SET TBNAMEBAK ='GW_MT_TASK_BAK';
 SET    STR1='( PTMSGID , UID , ECID , USERID , SPID , SPGATE , CPNO , PHONE , SPMSGID , RETFLAG , FEEFLAG , PKNUMBER , PKTOTAL , SENDSTATUS ,SENDFLAG , RECVFLAG , DONEDATE , ERRORCODE ,  SENDLEVEL , SENDTYPE , UNICOM , MOBILEAREA , SENDTIME , RECVTIME , MESSAGE ,  RESENDCNT , TASKID , MSGFMT , LONGMSGSEQ , TPUDHI ,  TPPID , USERMSGID ,  MODULEID ,  SVRTYPE  , P1  ,  P2 ,  P3 ,  P4 ,  RECVMTTIME ,  TRANSMTTIME , TRANSRPTTIME , SENDRPTTIME , ATTIME , VALIDTIME , BATCHID , AREACODE ,FLAGMTSDOK,FLAGRPTRVOK,FLAGRPTSDOK,MTSUBMITTIME,ERRRESENDCNT,NETERRCNT,SENDRESULT,SPGATESEND,SPNUMBER,SENDERRCODE,SUBMITDATE )';
 SET    STR2 = ' `PTMSGID`,`UID`,`ECID`,`USERID`,`SPID`,`SPGATE`,`CPNO`,`PHONE`,`SPMSGID`,`RETFLAG`,`FEEFLAG`,`PKNUMBER`,`PKTOTAL`,`SENDSTATUS`,`SENDFLAG`,`RECVFLAG`,`DONEDATE`,`ERRORCODE`, `SENDLEVEL`,`SENDTYPE`,`UNICOM`,`MOBILEAREA`,`SENDTIME`,`RECVTIME`,`MESSAGE`, `RESENDCNT`,`TASKID`,`MSGFMT`,`LONGMSGSEQ`,`TPUDHI`, `TPPID`,`USERMSGID`, `MODULEID`, `SVRTYPE` ,`P1` , `P2`, `P3`, `P4`, `RECVMTTIME`, `TRANSMTTIME`,`TRANSRPTTIME`,`SENDRPTTIME`,`ATTIME`,`VALIDTIME`,`BATCHID`,`AREACODE`,0 AS FLAGMTSDOK,0 AS FLAGRPTRVOK, 0 AS FLAGRPTSDOK,NOW() AS  MTSUBMITTIME,0 AS ERRRESENDCNT,0 AS NETERRCNT,1 AS SENDRESULT,'''' AS SPGATESEND,'''' AS SPNUMBER,'''' AS SENDERRCODE,'''' AS  SUBMITDATE ';
ELSE
  LEAVE TOP;
END IF;

IF ( ENDID=0 ) THEN
##IF ( ENDID=0 and MINID=0 ) THEN
  LEAVE TOP;
END IF;

##针对 前几次 删除 不成功处理   循环读出 然后删除  更新控制表
IF MINID  < STARTID+1  THEN
 OPEN CUR1;
       FETCH CUR1 INTO C_ID, C_STARTID,C_ENDID;
      WHILE DONE<1 DO 
        SET P_STR= CONCAT('DELETE FROM ',TBNAME,' WHERE ID BETWEEN ',C_STARTID,' and ',C_ENDID);
       SET @SQL = P_STR;
        PREPARE stmt FROM @SQL;
         EXECUTE stmt;
          DEALLOCATE PREPARE stmt; 
       IF PICODE =0  THEN
       UPDATE GW_TRAN_DEL_LOG SET END_TIME=NOW() ,ISSUCCES=1 WHERE ID=C_ID;   
       END IF;
          FETCH cur1 INTO C_ID, C_STARTID,C_ENDID;
      END WHILE;
CLOSE CUR1;
##把此次转移的起始id重置 根据控制表上次转移成功id 重置  把上次成功转移的最大id 复制给此次转移的最小id
 SET MINID = STARTID+1;
END IF;

##若此次转移的最大id 等于上次成功转移的最大id 则退出
IF  ENDID=MINID-1 THEN
  LEAVE TOP;
END IF;

SET TNUM=CEIL((ENDID-MINID+1)/INCRES);

WHILE (NUM<TNUM) DO

SET CURMINID=MINID+NUM*INCRES;
SET CURENDID=MINID+(NUM+1)*INCRES-1;
IF NUM=TNUM-1 THEN
SET CURENDID=ENDID;
END IF;

INSERT INTO GW_TRAN_DEL_LOG(OPRTYPE,STARTID,ENDID,ISSUCCES,IN_TIME, END_TIME) values(FLAG,CURMINID,CURENDID,0,NOW(),NOW()); ##   mttask  2... 3..  4...
SELECT MAX(ID) INTO TRANLOGID FROM GW_TRAN_DEL_LOG;
##转移数据 循环执行3次
SET I=0;
WHILE (I<3) DO
       SET PICODE=0;
       SET   P_STR=CONCAT('INSERT  INTO ',TBNAMEBAK,STR1,'  SELECT ',STR2,' FROM ',TBNAME,' WHERE ID BETWEEN ',CURMINID,' AND ',CURENDID);
        SET @SQL = P_STR;
         PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt; 
    SET PICODE1=PICODE;
   ## select PICODE ,'PICODE',i,CURMINID,CURENDID;
     IF PICODE1=0 THEN    ##插入数据正常
        UPDATE GW_TRAN_DEL_LOG SET END_TIME= NOW(),ISSUCCES=1 WHERE ID=TRANLOGID;
        INSERT INTO GW_TRAN_DEL_LOG(OPRTYPE,STARTID,ENDID,ISSUCCES,IN_TIME, END_TIME) values(FLAG+4,CURMINID,CURENDID,0,NOW(),NOW());  ##1   mttask  2... 3..  4...
        SELECT MAX(ID) INTO TRANLOGID FROM GW_TRAN_DEL_LOG;
         SET J=0;  
         WHILE J<3 DO
            SET PICODE=0;
            SET P_STR= CONCAT('DELETE FROM ',TBNAME,' WHERE ID BETWEEN ',CURMINID,' AND ',CURENDID);
             SET @SQL = P_STR;
            PREPARE stmt FROM @SQL;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt; 
           IF PICODE =0  THEN  ##删除数据正常
                UPDATE GW_TRAN_DEL_LOG SET END_TIME=NOW() ,ISSUCCES=1 WHERE ID=TRANLOGID;
                SET  J=3;
              ELSE
                SET J=J+1;
              END IF;
          END WHILE;   ##END WHILE J<3 DO
      SET   I=3;
      END IF;

      IF PICODE1=2 THEN  ##插入数据遇到主键错误
         ##先把重合的id转移到err表  
       SET CURMINID1=CURMINID; 
       WHILE  CURMINID1<=CURENDID DO 
         SET PICODE=0;
  
         SET P_STR =CONCAT('INSERT  INTO GW_MT_TASK_BAK',STR1,'  SELECT ',STR2,' FROM ',TBNAME,'  WHERE ID= ',CURMINID1);
         SET @SQL = P_STR;
         PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt; 
        IF PICODE>0 THEN
            SET P_STR =CONCAT('INSERT  INTO GW_MT_TASK_ERR',STR1,'  SELECT ',STR2,' FROM ',TBNAME,'  WHERE ID= ',CURMINID1);
           SET @SQL = P_STR;
            PREPARE stmt FROM @SQL;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt; 
        END IF;
         SET P_STR =CONCAT( 'DELETE FROM ',TBNAME,' WHERE ID= ',CURMINID1);
         SET @SQL = P_STR;
         PREPARE stmt FROM @SQL;
         EXECUTE stmt;
         DEALLOCATE PREPARE stmt; 
     
        SET CURMINID1=CURMINID1+1;
        END WHILE;
       SET I=I+1;
     END IF;
 
      IF PICODE1=1 THEN 
        INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('LOADDATA',CONCAT(TBNAME,'...TO...',TBNAMEBAK),'转移数据错误');
        SET I=I+1; 
     END IF;

END WHILE; 
SET NUM=NUM+1;
END WHILE;  
 DELETE FROM GW_MT_TASK_BAK WHERE PTMSGID BETWEEN 0 AND 30000000000000;
END;;
DELIMITER ;




DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_MTTASKV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTTASKV1`(P_UID INT,	P_PTMSGID BIGINT,
	P_SENDSTATUS TINYINT UNSIGNED,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_SPLITLEN TINYINT UNSIGNED,
	P_MULTILEN1 TINYINT UNSIGNED,
	P_MULTILEN2 TINYINT UNSIGNED,
	P_SIGNLEN TINYINT UNSIGNED,
	P_ECID INT,
	P_USERID VARCHAR(11), P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVMTTIME DATETIME,
	P_MESSAGE VARCHAR(3000)  CHARSET 'GBK',
	P_SHOUJI VARCHAR(3500),
	P_FEEFLAG TINYINT UNSIGNED,
	P_SENDLEVEL TINYINT UNSIGNED,
	P_TASKID INT,
	P_ERRORCODE CHAR(7),
	P_TPUDHI TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT UNSIGNED,
	P_MSGFMT TINYINT UNSIGNED,
	P_UNICOM TINYINT UNSIGNED,
  P_MOBILEAREA INT UNSIGNED, 
  P_PKNUMBER TINYINT UNSIGNED,
  P_SVRTYPE VARCHAR(64),
  P_P1 VARCHAR(64),
  P_P2 VARCHAR(64),
  P_P3 VARCHAR(64),
  P_P4 VARCHAR(64),
  P_USERMSGID BIGINT,
  P_MODULEID INT,
  P_ATTIME BIGINT,
  P_VALIDTIME BIGINT,
  P_SENDTYPE TINYINT UNSIGNED,
  P_BATCHID BIGINT,
  P_AREACODE INT)
  TOP:BEGIN
    DECLARE P_TMPMSGID BIGINT;
	DECLARE P_LOCATION INT;
	DECLARE P_START INT;
	DECLARE P_RESULTPHONE VARCHAR(21); #存储拆分后的字符
	DECLARE P_STRSPLIT VARCHAR(2);
	DECLARE P_LEN INT;
	DECLARE P_RESULTMSG VARCHAR(3000); #存储拆分后的字符
	DECLARE P_PKNUM INT;
	DECLARE P_TMPNUM INT;

    CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_WRMTTASK(UID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),
						PHONE VARCHAR(21),PTMSGID BIGINT,MESSAGE VARCHAR(3000),
						SENDSTATUS TINYINT,RETFLAG TINYINT,PKNUMBER TINYINT,
						PKTOTAL TINYINT,RECVMTTIME DATETIME,ECID INT,FEEFLAG TINYINT,
						SENDLEVEL TINYINT,TASKID INT,ERRORCODE CHAR(7),TPUDHI TINYINT,
						LONGMSGSEQ TINYINT,MSGFMT TINYINT,UNICOM TINYINT,MOBILEAREA INT,
						SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),
						P4 VARCHAR(64),USERMSGID BIGINT,MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,SENDTYPE INT,AREACODE INT);

	TRUNCATE TABLE P_TMP_WRMTTASK;

    SET P_LEN = CHAR_LENGTH(P_MESSAGE)-P_SIGNLEN;
	SET P_TMPNUM = 0;
	SET P_PKNUM = 1;
	SET P_STRSPLIT = ',';

    IF P_PHONECOUNT < 1 THEN #手机个数为0
		LEAVE TOP;
    END IF;

	IF P_MSGFMT=4 OR P_MSGFMT=248 OR P_MSGFMT=246 THEN
		SET P_SPLITLEN=140;
		SET P_MULTILEN1=134;
		SET P_MULTILEN2=134;
		SET P_SIGNLEN=0;
	END IF;

	IF P_MSGFMT=25 THEN
		IF NOT EXISTS (SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID=P_PTMSGID) THEN
		   INSERT INTO GW_MT_TASK_BAK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
		   RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
		   VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_PTMSGID,P_MESSAGE,P_SENDSTATUS,P_RETFLAG, P_PKNUMBER,P_PKTOTAL,
		   P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM, P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
        END IF;
	END IF;

	IF P_PHONECOUNT = 1 THEN #单发
        IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
            IF P_PKTOTAL = 1 THEN
        		INSERT GW_MT_TASK_BAK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
        		RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
        		P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
        		VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_PTMSGID,P_MESSAGE,P_SENDSTATUS,
        		P_RETFLAG,P_PKTOTAL,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,
        		P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
            ELSE
        		SET P_PKNUM = 1;
        		SET P_TMPMSGID = P_PTMSGID;
                IF P_PKTOTAL = 2 AND P_LEN <= P_MULTILEN1 THEN
    				SET P_RESULTMSG = SUBSTRING(P_MESSAGE,1,P_SPLITLEN);#拆分后的字符
    				SET P_TMPMSGID = P_TMPMSGID;
    				IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
        				INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
        				RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
        				VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,
        				P_RETFLAG,P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
    				END IF;

    				SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_SPLITLEN+1,P_LEN-P_SPLITLEN+P_SIGNLEN);#拆分后的字符
    				SET P_TMPMSGID = P_TMPMSGID+17179869184;
    				SET P_PKNUM = P_PKNUM+1;
    				IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
        				INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
        				PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
        				VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
        				P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
                    END IF;
                ELSE
                    WHILE P_PKNUM <= P_PKTOTAL DO
						IF P_PKNUM = P_PKTOTAL THEN
							SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_TMPNUM+1,P_MULTILEN2+P_SIGNLEN);#拆分后的字符
							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
							#PRINT P_RESULTMSG
						ELSEIF P_PKNUM = P_PKTOTAL-1 THEN
							IF P_LEN-(P_PKNUM-1)*P_MULTILEN1 > P_MULTILEN2 AND P_LEN-(P_PKNUM-1)*P_MULTILEN1 <= P_MULTILEN1 THEN
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_LEN-(P_PKNUM-1)*P_MULTILEN1-1);
								SET P_TMPNUM = P_LEN-1;
							ELSE
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);
								SET P_TMPNUM = (P_PKNUM-1)*P_MULTILEN1+P_MULTILEN1;
						    END IF;

							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
						ELSE
							SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);#拆分后的字符
							#PRINT P_RESULTMSG
							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
						END IF;

						IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
    						INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    						PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
    						VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    						P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
                        END IF;

						SET P_PKNUM = P_PKNUM+1;

                    END WHILE;
                END IF;
            		INSERT INTO GW_MT_TASK_BAK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
            		PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
            		SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
            		A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,P_BATCHID,P_AREACODE FROM P_TMP_WRMTTASK A;
                END IF;
            
		END IF;
	ELSE #群发
		SET P_SHOUJI = CONCAT(P_STRSPLIT , P_SHOUJI , P_STRSPLIT);
		SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI);

		IF P_PKTOTAL < 1 THEN #没有短信内容
			LEAVE TOP;
        END IF;

		IF P_PKTOTAL >= 1 THEN #需要拆分长短信
			WHILE P_LOCATION <> 0 DO #拆分手机号码
				SET P_START = P_LOCATION;
				SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI,P_START+1);
				IF P_LOCATION > 0 THEN
					SET P_RESULTPHONE = SUBSTRING(P_SHOUJI,P_START+1,P_LOCATION-P_START-1);#拆分后的字符
					#PRINT P_RESULTPHONE
					#IF P_RESULTPHONE <> ''
					SET P_TMPMSGID = P_PTMSGID;
					IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
						IF P_PKTOTAL = 1 THEN
							INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
							PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
							VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_MESSAGE,P_SENDSTATUS,P_RETFLAG,
							P_PKTOTAL,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
						ELSE
							SET P_PKNUM = 1;
							#SET P_TOTALSPLITNUM = P_PKTOTAL-1
							IF P_PKTOTAL = 2 AND P_LEN <= P_MULTILEN1 THEN
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,1,P_SPLITLEN);#拆分后的字符
								SET P_TMPMSGID = P_TMPMSGID;
								IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
    								INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    								PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
    								VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    								P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
                                END IF;

								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_SPLITLEN+1,P_LEN-P_SPLITLEN+P_SIGNLEN);#拆分后的字符
								SET P_TMPMSGID = P_TMPMSGID+17179869184;
								SET P_PKNUM = P_PKNUM+1;
								IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
    								INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    								PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
    								VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    								P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
								END IF;
                             ELSE
								WHILE P_PKNUM <= P_PKTOTAL DO
									IF P_PKNUM = P_PKTOTAL THEN
										SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_TMPNUM+1,P_MULTILEN2+P_SIGNLEN);#拆分后的字符
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									ELSEIF P_PKNUM = P_PKTOTAL-1 THEN
										IF P_LEN-(P_PKNUM-1)*P_MULTILEN1 > P_MULTILEN2 AND P_LEN-(P_PKNUM-1)*P_MULTILEN1 <= P_MULTILEN1 THEN
											SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_LEN-(P_PKNUM-1)*P_MULTILEN1-1);
											SET P_TMPNUM = P_LEN-1;
										ELSE
											SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);
											SET P_TMPNUM = (P_PKNUM-1)*P_MULTILEN1+P_MULTILEN1;
										END IF;
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									ELSE
										SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);#拆分后的字符
										#PRINT P_RESULTMSG
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									END IF;
									IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
    									INSERT P_TMP_WRMTTASK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    									PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
    									VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    									P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
									END IF;
                                    SET P_PKNUM = P_PKNUM+1;
								END WHILE;
                             END IF; #END OF P_PKTOTAL = 2
						  END IF; # END OF P_PKTOTAL = 1
					   END	IF;	#NOT EXISTS(SELECT
					   SET P_PTMSGID = P_PTMSGID+1;
                   END IF;
				END WHILE;
			END IF;

			INSERT INTO GW_MT_TASK_BAK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
			PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
			SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
			A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,P_BATCHID,P_AREACODE FROM P_TMP_WRMTTASK A;
	  END IF;
END;;
DELIMITER ;



DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_MTTASKV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTTASKV2`(
P_UID INT,	
P_PTMSGID BIGINT,
	P_SENDSTATUS TINYINT UNSIGNED,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_SPLITLEN TINYINT UNSIGNED,
	P_MULTILEN1 TINYINT UNSIGNED,
	P_MULTILEN2 TINYINT UNSIGNED,
	P_SIGNLEN TINYINT UNSIGNED,
	P_ECID INT,
	P_USERID VARCHAR(11), 
P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVMTTIME DATETIME,
	P_MESSAGE VARCHAR(3000)  CHARSET 'GBK',
	P_SHOUJI VARCHAR(3500),
	P_FEEFLAG TINYINT UNSIGNED,
	P_SENDLEVEL TINYINT UNSIGNED,
	P_TASKID INT,
	P_ERRORCODE CHAR(7),
	P_TPUDHI TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT UNSIGNED,
	P_MSGFMT TINYINT UNSIGNED,
	P_UNICOM TINYINT UNSIGNED,
  P_MOBILEAREA INT UNSIGNED, 
  P_PKNUMBER TINYINT UNSIGNED,
  P_SVRTYPE VARCHAR(64),
  P_P1 VARCHAR(64),
  P_P2 VARCHAR(64),
  P_P3 VARCHAR(64),
  P_P4 VARCHAR(64),
  P_USERMSGID BIGINT,
  P_MODULEID INT,
  P_ATTIME BIGINT,
  P_VALIDTIME BIGINT,
  P_SENDTYPE TINYINT UNSIGNED,
  P_BATCHID BIGINT,
  P_AREACODE INT,
  P_CUSTID VARCHAR(64),
	P_EXDATA VARCHAR(64))
  TOP:BEGIN
    DECLARE P_TMPMSGID BIGINT;
	DECLARE P_LOCATION INT;
	DECLARE P_START INT;
	DECLARE P_RESULTPHONE VARCHAR(21); #存储拆分后的字符
	DECLARE P_STRSPLIT VARCHAR(2);
	DECLARE P_LEN INT;
	DECLARE P_RESULTMSG VARCHAR(3000); #存储拆分后的字符
	DECLARE P_PKNUM INT;
	DECLARE P_TMPNUM INT;

    CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_WRMTTASKV2(UID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),
						PHONE VARCHAR(21),PTMSGID BIGINT,MESSAGE VARCHAR(3000),
						SENDSTATUS TINYINT,RETFLAG TINYINT,PKNUMBER TINYINT,
						PKTOTAL TINYINT,RECVMTTIME DATETIME,ECID INT,FEEFLAG TINYINT,
						SENDLEVEL TINYINT,TASKID INT,ERRORCODE CHAR(7),TPUDHI TINYINT,
						LONGMSGSEQ TINYINT,MSGFMT TINYINT,UNICOM TINYINT,MOBILEAREA INT,
						SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),
						P4 VARCHAR(64),USERMSGID BIGINT,MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,SENDTYPE INT,AREACODE INT,CUSTID VARCHAR(64),EXDATA VARCHAR(64));

	TRUNCATE TABLE P_TMP_WRMTTASKV2;

    SET P_LEN = CHAR_LENGTH(P_MESSAGE)-P_SIGNLEN;
	SET P_TMPNUM = 0;
	SET P_PKNUM = 1;
	SET P_STRSPLIT = ',';

    IF P_PHONECOUNT < 1 THEN #手机个数为0
		LEAVE TOP;
    END IF;

	IF P_MSGFMT=4 OR P_MSGFMT=248 OR P_MSGFMT=246 THEN
		SET P_SPLITLEN=140;
		SET P_MULTILEN1=134;
		SET P_MULTILEN2=134;
		SET P_SIGNLEN=0;
	END IF;

	IF P_MSGFMT=25 THEN
		IF NOT EXISTS (SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID=P_PTMSGID) THEN
		   INSERT INTO GW_MT_TASK_BAK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
		   RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
		   VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_PTMSGID,P_MESSAGE,P_SENDSTATUS,P_RETFLAG, P_PKNUMBER,P_PKTOTAL,
		   P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM, P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
        END IF;
	END IF;

	IF P_PHONECOUNT = 1 THEN #单发
        IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
            IF P_PKTOTAL = 1 THEN
        		INSERT GW_MT_TASK_BAK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
        		RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
        		P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
        		VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_PTMSGID,P_MESSAGE,P_SENDSTATUS,
        		P_RETFLAG,P_PKTOTAL,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,
        		P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
            ELSE
        		SET P_PKNUM = 1;
        		SET P_TMPMSGID = P_PTMSGID;
                IF P_PKTOTAL = 2 AND P_LEN <= P_MULTILEN1 THEN
    				SET P_RESULTMSG = SUBSTRING(P_MESSAGE,1,P_SPLITLEN);#拆分后的字符
    				SET P_TMPMSGID = P_TMPMSGID;
    				IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
        				INSERT P_TMP_WRMTTASKV2(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
        				RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE,CUSTID,EXDATA)
        				VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,
        				P_RETFLAG,P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE,P_CUSTID,P_EXDATA);
    				END IF;

    				SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_SPLITLEN+1,P_LEN-P_SPLITLEN+P_SIGNLEN);#拆分后的字符
    				SET P_TMPMSGID = P_TMPMSGID+17179869184;
    				SET P_PKNUM = P_PKNUM+1;
    				IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
        				INSERT P_TMP_WRMTTASKV2(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
        				PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE,CUSTID,EXDATA)
        				VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
        				P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE,P_CUSTID,P_EXDATA);
                    END IF;
                ELSE
                    WHILE P_PKNUM <= P_PKTOTAL DO
						IF P_PKNUM = P_PKTOTAL THEN
							SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_TMPNUM+1,P_MULTILEN2+P_SIGNLEN);#拆分后的字符
							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
							#PRINT P_RESULTMSG
						ELSEIF P_PKNUM = P_PKTOTAL-1 THEN
							IF P_LEN-(P_PKNUM-1)*P_MULTILEN1 > P_MULTILEN2 AND P_LEN-(P_PKNUM-1)*P_MULTILEN1 <= P_MULTILEN1 THEN
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_LEN-(P_PKNUM-1)*P_MULTILEN1-1);
								SET P_TMPNUM = P_LEN-1;
							ELSE
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);
								SET P_TMPNUM = (P_PKNUM-1)*P_MULTILEN1+P_MULTILEN1;
						    END IF;

							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
						ELSE
							SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);#拆分后的字符
							#PRINT P_RESULTMSG
							SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
						END IF;

						IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
    						INSERT P_TMP_WRMTTASKV2(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    						PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE,CUSTID,EXDATA)
    						VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_SHOUJI,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    						P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE,P_CUSTID,P_EXDATA);
                        END IF;

						SET P_PKNUM = P_PKNUM+1;

                    END WHILE;
                END IF;
            		INSERT INTO GW_MT_TASK_BAK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
            		PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
            		SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
            		A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA FROM P_TMP_WRMTTASKV2 A;
                END IF;
            
		END IF;
	ELSE #群发
		SET P_SHOUJI = CONCAT(P_STRSPLIT , P_SHOUJI , P_STRSPLIT);
		SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI);

		IF P_PKTOTAL < 1 THEN #没有短信内容
			LEAVE TOP;
        END IF;

		IF P_PKTOTAL >= 1 THEN #需要拆分长短信
			WHILE P_LOCATION <> 0 DO #拆分手机号码
				SET P_START = P_LOCATION;
				SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI,P_START+1);
				IF P_LOCATION > 0 THEN
					SET P_RESULTPHONE = SUBSTRING(P_SHOUJI,P_START+1,P_LOCATION-P_START-1);#拆分后的字符
					#PRINT P_RESULTPHONE
					#IF P_RESULTPHONE <> ''
					SET P_TMPMSGID = P_PTMSGID;
					IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
						IF P_PKTOTAL = 1 THEN
							INSERT P_TMP_WRMTTASKV2(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
							PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE,CUSTID,EXDATA)
							VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_MESSAGE,P_SENDSTATUS,P_RETFLAG,
							P_PKTOTAL,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE,P_CUSTID,P_EXDATA);
						ELSE
							SET P_PKNUM = 1;
							#SET P_TOTALSPLITNUM = P_PKTOTAL-1
							IF P_PKTOTAL = 2 AND P_LEN <= P_MULTILEN1 THEN
								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,1,P_SPLITLEN);#拆分后的字符
								SET P_TMPMSGID = P_TMPMSGID;
								IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
    								INSERT P_TMP_WRMTTASKV2(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    								PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE,CUSTID,EXDATA)
    								VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    								P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE,P_CUSTID,P_EXDATA);
                                END IF;

								SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_SPLITLEN+1,P_LEN-P_SPLITLEN+P_SIGNLEN);#拆分后的字符
								SET P_TMPMSGID = P_TMPMSGID+17179869184;
								SET P_PKNUM = P_PKNUM+1;
								IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
    								INSERT P_TMP_WRMTTASKV2(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    								PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE,CUSTID,EXDATA)
    								VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    								P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE,P_CUSTID,P_EXDATA);
								END IF;
                             ELSE
								WHILE P_PKNUM <= P_PKTOTAL DO
									IF P_PKNUM = P_PKTOTAL THEN
										SET P_RESULTMSG = SUBSTRING(P_MESSAGE,P_TMPNUM+1,P_MULTILEN2+P_SIGNLEN);#拆分后的字符
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									ELSEIF P_PKNUM = P_PKTOTAL-1 THEN
										IF P_LEN-(P_PKNUM-1)*P_MULTILEN1 > P_MULTILEN2 AND P_LEN-(P_PKNUM-1)*P_MULTILEN1 <= P_MULTILEN1 THEN
											SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_LEN-(P_PKNUM-1)*P_MULTILEN1-1);
											SET P_TMPNUM = P_LEN-1;
										ELSE
											SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);
											SET P_TMPNUM = (P_PKNUM-1)*P_MULTILEN1+P_MULTILEN1;
										END IF;
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									ELSE
										SET P_RESULTMSG = SUBSTRING(P_MESSAGE,(P_PKNUM-1)*P_MULTILEN1+1,P_MULTILEN1);#拆分后的字符
										#PRINT P_RESULTMSG
										SET P_TMPMSGID = P_PTMSGID+(P_PKNUM-1)*17179869184;
									END IF;
									IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_TMPMSGID) THEN
    									INSERT P_TMP_WRMTTASKV2(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
    									PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE,CUSTID,EXDATA)
    									VALUES(P_UID,P_USERID,P_SPGATE,P_CPNO,P_RESULTPHONE,P_TMPMSGID,P_RESULTMSG,P_SENDSTATUS,P_RETFLAG,
    									P_PKNUM,P_PKTOTAL,P_RECVMTTIME,P_ECID,P_FEEFLAG,P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE,P_CUSTID,P_EXDATA);
									END IF;
                                    SET P_PKNUM = P_PKNUM+1;
								END WHILE;
                             END IF; #END OF P_PKTOTAL = 2
						  END IF; # END OF P_PKTOTAL = 1
					   END	IF;	#NOT EXISTS(SELECT
					   SET P_PTMSGID = P_PTMSGID+1;
                   END IF;
				END WHILE;
			END IF;

			INSERT INTO GW_MT_TASK_BAK(UID,USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,RETFLAG,
			PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
			SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
			A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,P_BATCHID,A.AREACODE,A.CUSTID,A.EXDATA FROM P_TMP_WRMTTASKV2 A;
	  END IF;
END;;
DELIMITER ;


-- ----------------------------
-- PROCEDURE STRUCTURE FOR S_WR_MTTASKSR
-- ----------------------------
DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_MTTASKSRV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTTASKSRV1`(P_UID INT,P_PTMSGID BIGINT,
	P_SENDSTATUS TINYINT UNSIGNED,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_ECID INT,
	P_USERID VARCHAR(11),
	P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVMTTIME DATETIME,
	P_MESSAGE VARCHAR(3000)  CHARSET 'GBK',
	P_SHOUJI VARCHAR(3500),
	P_FEEFLAG TINYINT UNSIGNED,
	P_PKNUMBER TINYINT UNSIGNED,
	P_SENDLEVEL TINYINT UNSIGNED,
	P_TASKID INT,
	P_ERRORCODE CHAR(7),
	P_TPUDHI TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT UNSIGNED,
	P_MSGFMT TINYINT UNSIGNED,
	P_UNICOM TINYINT UNSIGNED,
	P_MOBILEAREA INT,
	P_SVRTYPE VARCHAR(64),
	P_P1 VARCHAR(64),
	P_P2 VARCHAR(64),
	P_P3 VARCHAR(64),
	P_P4 VARCHAR(64),
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_ATTIME BIGINT,
	P_VALIDTIME BIGINT,
	P_SENDTYPE INT,
	P_BATCHID BIGINT,
	P_AREACODE INT)
TOP:BEGIN
    DECLARE P_LOCATION INT;
	DECLARE P_START INT;
	DECLARE P_RESULTPHONE VARCHAR(21); #存储拆分后的字符
	DECLARE P_STRSPLIT VARCHAR(2);

    CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTSR(UID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),
						PHONE VARCHAR(21),PTMSGID BIGINT ,MESSAGE VARCHAR(3000),
						SENDSTATUS TINYINT UNSIGNED,RETFLAG TINYINT UNSIGNED,PKNUMBER TINYINT UNSIGNED,
						PKTOTAL TINYINT UNSIGNED,RECVMTTIME DATETIME,ECID INT,FEEFLAG TINYINT UNSIGNED,
						SENDLEVEL TINYINT UNSIGNED,TASKID INT,ERRORCODE CHAR(7),TPUDHI TINYINT UNSIGNED,
						LONGMSGSEQ TINYINT UNSIGNED,MSGFMT TINYINT UNSIGNED,UNICOM TINYINT UNSIGNED,MOBILEAREA INT,
						SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),
						P4 VARCHAR(64),USERMSGID BIGINT,MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,SENDTYPE INT,AREACODE INT);
    TRUNCATE TABLE P_TMP_MTSR;

    SET P_STRSPLIT = ',';

    IF P_PHONECOUNT < 1 THEN #手机个数为0
		LEAVE TOP;
    END IF;

	IF P_PHONECOUNT = 1 THEN #单发
		IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
		   INSERT GW_MT_TASK_BAK(UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
		   PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
		   P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
		   VALUES(P_UID,P_USERID, P_SPGATE, P_CPNO, P_SHOUJI, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG,
		   P_PKNUMBER, P_PKTOTAL, P_RECVMTTIME, P_ECID, P_FEEFLAG, P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,
		   P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
		END IF;
	ELSE #群发
		SET P_SHOUJI = CONCAT(P_STRSPLIT , P_SHOUJI , P_STRSPLIT);
		SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI);
		WHILE P_LOCATION <> 0 DO #拆分手机号码
			SET P_START = P_LOCATION;
			SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI,P_START+1);
			IF P_LOCATION > 0 THEN
				SET P_RESULTPHONE = SUBSTRING(P_SHOUJI,P_START+1,P_LOCATION-P_START-1);#拆分后的字符
				#PRINT P_RESULTPHONE
				IF P_RESULTPHONE <> '' THEN
					IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
					   INSERT P_TMP_MTSR(UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
					   PKNUMBER, PKTOTAL, RECVMTTIME,ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE)
					   VALUES(P_UID,P_USERID, P_SPGATE, P_CPNO, P_RESULTPHONE, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG,
					   P_PKNUMBER, P_PKTOTAL, P_RECVMTTIME, P_ECID, P_FEEFLAG, P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE);
                    END IF;
					SET P_PTMSGID = P_PTMSGID+1;
				END IF;
			END IF;
		END	WHILE;

		INSERT INTO GW_MT_TASK_BAK(UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
		PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
		P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE)
		SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
		A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,
		A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME ,A.SENDTYPE,P_BATCHID,P_AREACODE FROM P_TMP_MTSR A;
	END IF;
/*
,P_SVRTYPE VARCHAR(64),P_P1 VARCHAR(64),P_P2 VARCHAR(64),P_P3 VARCHAR(64),P_P4 VARCHAR(64),P_USERMSGID BIGINT,P_MODULEID INT,P_ATTIME BIGINT,P_VALIDTIME BIGINT
,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME
,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME
*/
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_MTTASKSRV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTTASKSRV2`(P_UID INT,P_PTMSGID BIGINT,
	P_SENDSTATUS TINYINT UNSIGNED,
	P_RETFLAG TINYINT UNSIGNED,
	P_PKTOTAL TINYINT UNSIGNED,
	P_PHONECOUNT INT,
	P_ECID INT,
	P_USERID VARCHAR(11),
	P_SPGATE VARCHAR(21),
	P_CPNO VARCHAR(21),
	P_RECVMTTIME DATETIME,
	P_MESSAGE VARCHAR(3000)  CHARSET 'GBK',
	P_SHOUJI VARCHAR(3500),
	P_FEEFLAG TINYINT UNSIGNED,
	P_PKNUMBER TINYINT UNSIGNED,
	P_SENDLEVEL TINYINT UNSIGNED,
	P_TASKID INT,
	P_ERRORCODE CHAR(7),
	P_TPUDHI TINYINT UNSIGNED,
	P_LONGMSGSEQ TINYINT UNSIGNED,
	P_MSGFMT TINYINT UNSIGNED,
	P_UNICOM TINYINT UNSIGNED,
	P_MOBILEAREA INT,
	P_SVRTYPE VARCHAR(64),
	P_P1 VARCHAR(64),
	P_P2 VARCHAR(64),
	P_P3 VARCHAR(64),
	P_P4 VARCHAR(64),
	P_USERMSGID BIGINT,
	P_MODULEID INT,
	P_ATTIME BIGINT,
	P_VALIDTIME BIGINT,
	P_SENDTYPE INT,
	P_BATCHID BIGINT,
	P_AREACODE INT,
	P_CUSTID VARCHAR(64),
	P_EXDATA VARCHAR(64))
TOP:BEGIN
    DECLARE P_LOCATION INT;
	DECLARE P_START INT;
	DECLARE P_RESULTPHONE VARCHAR(21); #存储拆分后的字符
	DECLARE P_STRSPLIT VARCHAR(2);

    CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTSR(UID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),
						PHONE VARCHAR(21),PTMSGID BIGINT ,MESSAGE VARCHAR(3000),
						SENDSTATUS TINYINT UNSIGNED,RETFLAG TINYINT UNSIGNED,PKNUMBER TINYINT UNSIGNED,
						PKTOTAL TINYINT UNSIGNED,RECVMTTIME DATETIME,ECID INT,FEEFLAG TINYINT UNSIGNED,
						SENDLEVEL TINYINT UNSIGNED,TASKID INT,ERRORCODE CHAR(7),TPUDHI TINYINT UNSIGNED,
						LONGMSGSEQ TINYINT UNSIGNED,MSGFMT TINYINT UNSIGNED,UNICOM TINYINT UNSIGNED,MOBILEAREA INT,
						SVRTYPE VARCHAR(64),P1 VARCHAR(64),P2 VARCHAR(64),P3 VARCHAR(64),
						P4 VARCHAR(64),USERMSGID BIGINT,MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,SENDTYPE INT,AREACODE INT,CUSTID VARCHAR(64),EXDATA VARCHAR(64));
    TRUNCATE TABLE P_TMP_MTSR;

    SET P_STRSPLIT = ',';

    IF P_PHONECOUNT < 1 THEN #手机个数为0
		LEAVE TOP;
    END IF;

	IF P_PHONECOUNT = 1 THEN #单发
		IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
		   INSERT GW_MT_TASK_BAK(UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
		   PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
		   P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
		   VALUES(P_UID,P_USERID, P_SPGATE, P_CPNO, P_SHOUJI, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG,
		   P_PKNUMBER, P_PKTOTAL, P_RECVMTTIME, P_ECID, P_FEEFLAG, P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,
		   P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
		END IF;
	ELSE #群发
		SET P_SHOUJI = CONCAT(P_STRSPLIT , P_SHOUJI , P_STRSPLIT);
		SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI);
		WHILE P_LOCATION <> 0 DO #拆分手机号码
			SET P_START = P_LOCATION;
			SET P_LOCATION = LOCATE(P_STRSPLIT,P_SHOUJI,P_START+1);
			IF P_LOCATION > 0 THEN
				SET P_RESULTPHONE = SUBSTRING(P_SHOUJI,P_START+1,P_LOCATION-P_START-1);#拆分后的字符
				#PRINT P_RESULTPHONE
				IF P_RESULTPHONE <> '' THEN
					IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = P_PTMSGID) THEN
					   INSERT P_TMP_MTSR(UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
					   PKNUMBER, PKTOTAL, RECVMTTIME,ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,AREACODE,CUSTID,EXDATA)
					   VALUES(P_UID,P_USERID, P_SPGATE, P_CPNO, P_RESULTPHONE, P_PTMSGID, P_MESSAGE, P_SENDSTATUS, P_RETFLAG,
					   P_PKNUMBER, P_PKTOTAL, P_RECVMTTIME, P_ECID, P_FEEFLAG, P_SENDLEVEL,P_TASKID,P_ERRORCODE,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_AREACODE,P_CUSTID,P_EXDATA);
                    END IF;
					SET P_PTMSGID = P_PTMSGID+1;
				END IF;
			END IF;
		END	WHILE;

		INSERT INTO GW_MT_TASK_BAK(UID,USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, SENDSTATUS, RETFLAG,
		PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,
		P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
		SELECT A.UID,A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
		A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,
		A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME ,A.SENDTYPE,P_BATCHID,P_AREACODE,A.CUSTID,A.EXDATA FROM P_TMP_MTSR A;
	END IF;
/*
,P_SVRTYPE VARCHAR(64),P_P1 VARCHAR(64),P_P2 VARCHAR(64),P_P3 VARCHAR(64),P_P4 VARCHAR(64),P_USERMSGID BIGINT,P_MODULEID INT,P_ATTIME BIGINT,P_VALIDTIME BIGINT
,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME
,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME
*/
END;;
DELIMITER ;


DELIMITER ;;  
DROP PROCEDURE IF EXISTS `GW_MTTASKSUPPV3`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_MTTASKSUPPV3`(P_OLDMSGID BIGINT,
	P_NEWMSGID BIGINT,
	P_SRCUID INT,
	P_SRCUSRID VARCHAR(11),
	P_SRCSPGATE VARCHAR(21),
	P_SRCSPNUMBER VARCHAR(21),
	P_DESTUID INT,
	P_DESTUSRID VARCHAR(11),
	P_DESTSPGATE VARCHAR(21),
	P_DESTSPNUMBER VARCHAR(21),
	P_DESTFEEFLAG INT,
	P_SPLITLEN TINYINT UNSIGNED,
	P_MULTILEN1 TINYINT UNSIGNED,
	P_MULTILEN2 TINYINT UNSIGNED,
	P_NEWSIGNLEN TINYINT UNSIGNED,
	P_OLDSIGNLEN TINYINT UNSIGNED,
	P_SIGNATURE VARCHAR(20),
  P_NEWSIGNPOS INT,
	P_OLDSIGNPOS INT,
	P_ENSPLITLEN INT, ##英文短信单条长度，小于等于0标识不支持英文短信
  P_ENMULTILEN1 INT, ##英文长短信拆分长度
  P_ENMULTILEN2 INT, ##英文长短信最后一条长度
  P_NEWENSIGNLEN INT, ##补发英文签名长度
  P_OLDENSIGNLEN INT, ##原英文签名长度
  P_ENSIGNATURE VARCHAR(20)##英文签名
	)
BEGIN
	DECLARE P_SENDNUM INT;
	DECLARE P_PKTOTAL INT;
	DECLARE P_PKNUM	 INT;
	DECLARE P_INITMSGID BIGINT;
	DECLARE P_SINGLEMSG VARCHAR(720);
	DECLARE P_SINGLEMSG1 VARCHAR(720);
	DECLARE P_LONGMSG VARCHAR(3000);
	DECLARE P_TOTALCNT INT;
	DECLARE P_LONGMSGLEN INT;
	DECLARE P_ECID INT;
	DECLARE P_PHONE VARCHAR(21);
	DECLARE P_SENDLEVEL TINYINT UNSIGNED;
	DECLARE P_TASKID INT;
	DECLARE P_RECVMTTIME DATETIME;
	DECLARE P_SRCCPNO  VARCHAR(21);
	DECLARE P_DESTCPNO VARCHAR(21);
	DECLARE P_TPUDHI TINYINT UNSIGNED;
	DECLARE P_TPPID TINYINT UNSIGNED;
	DECLARE P_LONGMSGSEQ TINYINT UNSIGNED;
	DECLARE P_MSGFMT TINYINT UNSIGNED;
	DECLARE P_UNICOM TINYINT UNSIGNED;
	DECLARE P_MOBILEAREA INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_USERMSGID BIGINT;
	DECLARE P_SENDTYPE TINYINT UNSIGNED;
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_MODULEID INT;
	DECLARE P_ATTIME BIGINT;
	DECLARE P_VALIDTIME BIGINT;
	DECLARE P_BATCHID BIGINT;
  DECLARE P_AREACODE INT;
  
  DECLARE P_SPLITLEN_V INT;
  DECLARE P_MULTILEN1_V INT;
  DECLARE P_MULTILEN2_V INT;
  DECLARE P_NEWSIGNLEN_V INT;
  DECLARE P_OLDSIGNLEN_V INT;
  DECLARE P_SIGNATURE_V  VARCHAR(22);
  
   DECLARE P_RCOUNT1 INT;
        DECLARE P_RCOUNT2 INT;

	SET P_LONGMSG='';
	SET P_RECVMTTIME = NOW();
	SET P_SRCCPNO  = SUBSTRING(P_SRCSPNUMBER,CHAR_LENGTH(P_SRCSPGATE)+1,CHAR_LENGTH(P_SRCSPNUMBER)-CHAR_LENGTH(P_SRCSPGATE));
	SET P_DESTCPNO = SUBSTRING(P_DESTSPNUMBER,CHAR_LENGTH(P_DESTSPGATE)+1,CHAR_LENGTH(P_DESTSPNUMBER)-CHAR_LENGTH(P_DESTSPGATE));
	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTSUPPV1(UID INT,PTMSGID BIGINT,ECID INT,TASKID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),PHONE VARCHAR(21),
	SPMSGID BIGINT,RETFLAG TINYINT UNSIGNED,FEEFLAG TINYINT UNSIGNED,PKNUMBER TINYINT UNSIGNED,PKTOTAL TINYINT UNSIGNED,SENDSTATUS TINYINT UNSIGNED,SENDFLAG TINYINT UNSIGNED,RECVFLAG TINYINT UNSIGNED,PASSTHROUGH TINYINT UNSIGNED,
	DONEDATE CHAR(10),ERRORCODE CHAR(7),SENDLEVEL TINYINT UNSIGNED,SENDTYPE TINYINT UNSIGNED,UNICOM TINYINT UNSIGNED,RESENDCNT TINYINT UNSIGNED,RECVMTTIME DATETIME,RECVTIME DATETIME,USERMSGID BIGINT,
	MESSAGE VARCHAR(3000),TPUDHI TINYINT UNSIGNED,LONGMSGSEQ TINYINT UNSIGNED,MSGFMT TINYINT UNSIGNED,MOBILEAREA INT,SVRTYPE VARCHAR(64),TPPID TINYINT UNSIGNED,P1 VARCHAR(64),
	P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,BATCHID BIGINT,AREACODE INT);
  TRUNCATE P_TMP_MTSUPPV1;

	##取补发帐号的费用
	SELECT SENDNUM INTO P_SENDNUM FROM USERFEE WHERE USERID=P_DESTUSRID;
	##该模式可以把原始MSGID返给用户##用旧的MSGID复制一份记录插入临时表
	INSERT INTO P_TMP_MTSUPPV1(UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
	SELECT UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
	##只对0,8,15编码和人工实时、批量实时短信进行补发,其他不补发
	FROM  GW_MT_TASK_BAK WHERE PTMSGID=P_OLDMSGID AND USERID=P_SRCUSRID  AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND LOCATE(P_SRCSPNUMBER,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)),1)=1 ;
  SET   P_RCOUNT1=ROW_COUNT();
  
  IF IFNULL(P_RCOUNT1,0)<=0 THEN
  ##该模式可以把原始MSGID返给用户##用旧的MSGID复制一份记录插入临时表
	INSERT INTO P_TMP_MTSUPPV1(UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE)
	SELECT UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
	##只对0,8,15编码和人工实时、批量实时短信进行补发,其他不补发
	FROM  MT_TASK WHERE PTMSGID=P_OLDMSGID AND USERID=P_SRCUSRID  AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND LOCATE(P_SRCSPNUMBER,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)),1)=1 ;
        SET   P_RCOUNT1=ROW_COUNT();
  END IF;
        
        DELETE FROM P_TMP_MTSUPPV1  WHERE  UNICOM=5 AND MSGFMT=0;
        SET   P_RCOUNT2=ROW_COUNT();
	IF  P_RCOUNT1-P_RCOUNT2>0 THEN

		SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
                          MOBILEAREA,SVRTYPE,TPPID,USERMSGID,SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE
                   INTO P_PKTOTAL,P_PKNUM,P_ECID,P_PHONE,P_SENDLEVEL,P_TASKID,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,
                          P_MOBILEAREA,P_SVRTYPE,P_TPPID,P_USERMSGID,P_SENDTYPE,P_P1,P_P2,P_P3,P_P4,P_MODULEID,P_ATTIME,P_VALIDTIME,P_BATCHID,P_AREACODE
		  FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
     
     ##如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
       SET P_OLDSIGNLEN_V=P_OLDENSIGNLEN;
     ELSE
       SET P_OLDSIGNLEN_V=P_OLDSIGNLEN;
     END IF; ##IF (0 == P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
     ##如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = P_MSGFMT AND 0 < P_ENSPLITLEN) THEN
       SET P_SPLITLEN_V  =P_ENSPLITLEN;
       SET P_MULTILEN1_V =P_ENMULTILEN1;
       SET P_MULTILEN2_V =P_ENMULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWENSIGNLEN;
       SET P_SIGNATURE_V =P_ENSIGNATURE;
     ELSE
       SET P_SPLITLEN_V  =P_SPLITLEN;
       SET P_MULTILEN1_V =P_MULTILEN1;
       SET P_MULTILEN2_V =P_MULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWSIGNLEN;
       SET P_SIGNATURE_V =P_SIGNATURE;
     END IF;
     
		 IF (P_PKTOTAL <= 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)) THEN ##对于非长短信补发的处理
				SET P_LONGMSG='';
				##取短信内容
				SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
				##更新替换MSGID
				UPDATE  GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
				UPDATE  MT_TASK SET RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF; ##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(TRIM(P_LONGMSG),P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,TRIM(P_LONGMSG));
          END IF;

					##调用插入存储过程
					CALL GW_WR_MTTASKV1(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
				ELSE
					SET P_LONGMSG='';
				END IF;##END OF IF P_LONGMSGLEN > 0
				SET P_PKNUM=1;
			#END IF;##END OF P_PKTOTAL = 1
 /*
		ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2) AND P_TPUDHI=1) THEN ##对标准协议长短信的补发
			SET P_LONGMSG='';
			##取短信内容
			SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
			##更新替换MSGID
			UPDATE  GW_MT_TASK_BAK SET PTMSGID=P_NEWMSGID,RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
			IF (P_PKTOTAL=P_PKNUM) THEN ##如果是最后一条，去掉旧签名，加上新签名
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN; ##减去签名的净长度
				SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
				SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE)	;
			END IF;##END OF IF P_PKTOTAL=P_PKNUM
			SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
			IF P_LONGMSGLEN > 0 THEN
				##调用插入存储过程
				CALL GW_WR_MTTASKSRV1(P_DESTUID,P_OLDMSGID,2,1,P_PKTOTAL,1,P_ECID,
								P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
								P_PHONE,P_DESTFEEFLAG,P_PKNUM,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
								P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,
								P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);
			ELSE
				SET P_LONGMSG='';
		  END IF; ##END OF IF P_LONGMSGLEN > 0
		#END IF;## END OF IF P_PKTOTAL > 1
*/
        	ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)  AND P_TPUDHI=0) THEN ##对非标准长短信协议的处理
			SET P_LONGMSG='';
			##没有补发过且通道号跟源通道号相等
			IF EXISTS(SELECT * FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID) THEN
				##循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
				##计算起始MSGID
				SET P_INITMSGID = P_OLDMSGID-(P_PKNUM-1)*17179869184;
				SET P_PKNUM = 1;
				WHILE P_PKNUM <= P_PKTOTAL DO
				WHILELABLE:BEGIN
					##取短信内容 ##若长短信中间的某条缺失，则不补发(暂不考虑)
					SELECT MESSAGE INTO P_SINGLEMSG FROM  GW_MT_TASK_BAK WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					IF IFNULL(P_SINGLEMSG,'') =''  THEN
					  SELECT MESSAGE INTO P_SINGLEMSG1 FROM MT_TASK WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					  IF IFNULL(P_SINGLEMSG1,'') =''  THEN
						SET P_LONGMSG='';
						LEAVE WHILELABLE;
						ELSE
						UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
            SET P_LONGMSG = CONCAT(IFNULL(P_LONGMSG,''),IFNULL(P_SINGLEMSG1,''));
						END IF; ##IF P_SINGLEMSG1 ='' THEN
					ELSE
					##更新替换MSGID
					UPDATE  GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
          SET P_LONGMSG = CONCAT(IFNULL(P_LONGMSG,''),IFNULL(P_SINGLEMSG,''));
          ##拼接短信内容
					END IF; ##IF P_SINGLEMSG = '' THEN
					SET P_PKNUM = P_PKNUM+1;
				END WHILELABLE;
				END WHILE;##END OF WHILE P_PKNUM <= P_PKTOTAL
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF;##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(TRIM(P_LONGMSG),P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,TRIM(P_LONGMSG));
          END IF;

					##调用插入存储过程
					CALL GW_WR_MTTASKV1(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE);

	                   ELSE
		              SET P_LONGMSG='';
		           END IF;##END OF IF P_LONGMSGLEN > 0
		              SET P_PKNUM=1 ;
			END IF; ##END OF IF EXISTS(SELECT COUNT(*) FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID AND RESENDCNT<1 AND (CONCAT(RTRIM(SPGATE),RTRIM(CPNO)))=P_SRCSPNUMBER)
		END	IF;##END OF IF P_PKTOTAL > 1
	END IF; ##END OF IF ROWCOUNT()<>0

	SELECT P_DESTUID AS UID,P_NEWMSGID AS PTMSGID,ECID,TASKID,P_DESTUSRID AS USERID,P_DESTSPGATE AS SPGATE,
	P_DESTCPNO AS CPNO,P_PHONE AS PHONE,RETFLAG,P_DESTFEEFLAG AS FEEFLAG,P_PKNUM AS PKNUMBER,P_PKTOTAL AS PKTOTAL,
	SENDSTATUS,1 AS SENDLEVEL,P_RECVMTTIME AS RECVMTTIME,P_LONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
	MOBILEAREA,SVRTYPE,TPPID,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE FROM P_TMP_MTSUPPV1 WHERE P_LONGMSG<>'' ;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_MTTASKSUPPV4`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_MTTASKSUPPV4`(P_OLDMSGID BIGINT,
	P_NEWMSGID BIGINT,
	P_SRCUID INT,
	P_SRCUSRID VARCHAR(11),
	P_SRCSPGATE VARCHAR(21),
	P_SRCSPNUMBER VARCHAR(21),
	P_DESTUID INT,
	P_DESTUSRID VARCHAR(11),
	P_DESTSPGATE VARCHAR(21),
	P_DESTSPNUMBER VARCHAR(21),
	P_DESTFEEFLAG INT,
	P_SPLITLEN TINYINT UNSIGNED,
	P_MULTILEN1 TINYINT UNSIGNED,
	P_MULTILEN2 TINYINT UNSIGNED,
	P_NEWSIGNLEN TINYINT UNSIGNED,
	P_OLDSIGNLEN TINYINT UNSIGNED,
	P_SIGNATURE VARCHAR(20),
  P_NEWSIGNPOS INT,
	P_OLDSIGNPOS INT,
	P_ENSPLITLEN INT, ##英文短信单条长度，小于等于0标识不支持英文短信
  P_ENMULTILEN1 INT, ##英文长短信拆分长度
  P_ENMULTILEN2 INT, ##英文长短信最后一条长度
  P_NEWENSIGNLEN INT, ##补发英文签名长度
  P_OLDENSIGNLEN INT, ##原英文签名长度
  P_ENSIGNATURE VARCHAR(20)##英文签名
	)
BEGIN
	DECLARE P_SENDNUM INT;
	DECLARE P_PKTOTAL INT;
	DECLARE P_PKNUM	 INT;
	DECLARE P_INITMSGID BIGINT;
	DECLARE P_SINGLEMSG VARCHAR(720);
	DECLARE P_SINGLEMSG1 VARCHAR(720);
	DECLARE P_LONGMSG VARCHAR(3000);
	DECLARE P_TOTALCNT INT;
	DECLARE P_LONGMSGLEN INT;
	DECLARE P_ECID INT;
	DECLARE P_PHONE VARCHAR(21);
	DECLARE P_SENDLEVEL TINYINT UNSIGNED;
	DECLARE P_TASKID INT;
	DECLARE P_RECVMTTIME DATETIME;
	DECLARE P_SRCCPNO  VARCHAR(21);
	DECLARE P_DESTCPNO VARCHAR(21);
	DECLARE P_TPUDHI TINYINT UNSIGNED;
	DECLARE P_TPPID TINYINT UNSIGNED;
	DECLARE P_LONGMSGSEQ TINYINT UNSIGNED;
	DECLARE P_MSGFMT TINYINT UNSIGNED;
	DECLARE P_UNICOM TINYINT UNSIGNED;
	DECLARE P_MOBILEAREA INT;
	DECLARE P_SVRTYPE VARCHAR(64);
	DECLARE P_USERMSGID BIGINT;
	DECLARE P_SENDTYPE TINYINT UNSIGNED;
	DECLARE P_P1 VARCHAR(64);
	DECLARE P_P2 VARCHAR(64);
	DECLARE P_P3 VARCHAR(64);
	DECLARE P_P4 VARCHAR(64);
	DECLARE P_MODULEID INT;
	DECLARE P_ATTIME BIGINT;
	DECLARE P_VALIDTIME BIGINT;
	DECLARE P_BATCHID BIGINT;
  DECLARE P_AREACODE INT;
  DECLARE P_CUSTID VARCHAR(64);
	DECLARE P_EXDATA VARCHAR(64);
  
  DECLARE P_SPLITLEN_V INT;
  DECLARE P_MULTILEN1_V INT;
  DECLARE P_MULTILEN2_V INT;
  DECLARE P_NEWSIGNLEN_V INT;
  DECLARE P_OLDSIGNLEN_V INT;
  DECLARE P_SIGNATURE_V  VARCHAR(22);
  
   DECLARE P_RCOUNT1 INT;
        DECLARE P_RCOUNT2 INT;

	SET P_LONGMSG='';
	SET P_RECVMTTIME = NOW();
	SET P_SRCCPNO  = SUBSTRING(P_SRCSPNUMBER,CHAR_LENGTH(P_SRCSPGATE)+1,CHAR_LENGTH(P_SRCSPNUMBER)-CHAR_LENGTH(P_SRCSPGATE));
	SET P_DESTCPNO = SUBSTRING(P_DESTSPNUMBER,CHAR_LENGTH(P_DESTSPGATE)+1,CHAR_LENGTH(P_DESTSPNUMBER)-CHAR_LENGTH(P_DESTSPGATE));
	CREATE TEMPORARY TABLE IF NOT EXISTS P_TMP_MTSUPPV1(UID INT,PTMSGID BIGINT,ECID INT,TASKID INT,USERID VARCHAR(11),SPGATE VARCHAR(21),CPNO VARCHAR(21),PHONE VARCHAR(21),
	SPMSGID BIGINT,RETFLAG TINYINT UNSIGNED,FEEFLAG TINYINT UNSIGNED,PKNUMBER TINYINT UNSIGNED,PKTOTAL TINYINT UNSIGNED,SENDSTATUS TINYINT UNSIGNED,SENDFLAG TINYINT UNSIGNED,RECVFLAG TINYINT UNSIGNED,PASSTHROUGH TINYINT UNSIGNED,
	DONEDATE CHAR(10),ERRORCODE CHAR(7),SENDLEVEL TINYINT UNSIGNED,SENDTYPE TINYINT UNSIGNED,UNICOM TINYINT UNSIGNED,RESENDCNT TINYINT UNSIGNED,RECVMTTIME DATETIME,RECVTIME DATETIME,USERMSGID BIGINT,
	MESSAGE VARCHAR(3000),TPUDHI TINYINT UNSIGNED,LONGMSGSEQ TINYINT UNSIGNED,MSGFMT TINYINT UNSIGNED,MOBILEAREA INT,SVRTYPE VARCHAR(64),TPPID TINYINT UNSIGNED,P1 VARCHAR(64),
	P2 VARCHAR(64),P3 VARCHAR(64),P4 VARCHAR(64),MODULEID INT,ATTIME BIGINT,VALIDTIME BIGINT,BATCHID BIGINT,AREACODE INT,CUSTID VARCHAR(64),EXDATA VARCHAR(64));
  TRUNCATE P_TMP_MTSUPPV1;

	##取补发帐号的费用
	SELECT SENDNUM INTO P_SENDNUM FROM USERFEE WHERE USERID=P_DESTUSRID;
	##该模式可以把原始MSGID返给用户##用旧的MSGID复制一份记录插入临时表
	INSERT INTO P_TMP_MTSUPPV1(UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,CUSTID,EXDATA)
	SELECT UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,CUSTID,EXDATA
	##只对0,8,15编码和人工实时、批量实时短信进行补发,其他不补发
	FROM  GW_MT_TASK_BAK WHERE PTMSGID=P_OLDMSGID AND USERID=P_SRCUSRID  AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND LOCATE(P_SRCSPNUMBER,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)),1)=1 ;
  SET   P_RCOUNT1=ROW_COUNT();
  
  IF IFNULL(P_RCOUNT1,0)<=0 THEN
  ##该模式可以把原始MSGID返给用户##用旧的MSGID复制一份记录插入临时表
	INSERT INTO P_TMP_MTSUPPV1(UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,CUSTID,EXDATA)
	SELECT UID,PTMSGID,ECID,TASKID,USERID,SPGATE,CPNO,PHONE,
	SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,2,SENDFLAG,RECVFLAG,
	DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,RESENDCNT,RECVMTTIME,RECVTIME,
	MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,MOBILEAREA,SVRTYPE,TPPID,USERMSGID,
	P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,'',''
	##只对0,8,15编码和人工实时、批量实时短信进行补发,其他不补发
	FROM  MT_TASK WHERE PTMSGID=P_OLDMSGID AND USERID=P_SRCUSRID  AND MSGFMT IN (0,8,15) AND RESENDCNT<1 AND LOCATE(P_SRCSPNUMBER,CONCAT(RTRIM(SPGATE),RTRIM(CPNO)),1)=1 ;
        SET   P_RCOUNT1=ROW_COUNT();
  END IF;
        
        DELETE FROM P_TMP_MTSUPPV1  WHERE  UNICOM=5 AND MSGFMT=0;
        SET   P_RCOUNT2=ROW_COUNT();
	IF  P_RCOUNT1-P_RCOUNT2>0 THEN

		SELECT PKTOTAL,PKNUMBER,ECID,PHONE,SENDLEVEL,TASKID,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
                          MOBILEAREA,SVRTYPE,TPPID,USERMSGID,SENDTYPE,P1,P2,P3,P4,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,CUSTID,EXDATA
                   INTO P_PKTOTAL,P_PKNUM,P_ECID,P_PHONE,P_SENDLEVEL,P_TASKID,P_TPUDHI,P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,
                          P_MOBILEAREA,P_SVRTYPE,P_TPPID,P_USERMSGID,P_SENDTYPE,P_P1,P_P2,P_P3,P_P4,P_MODULEID,P_ATTIME,P_VALIDTIME,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA
		  FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
     
     ##如果原信息内容编码为0且英文签名长度大于等于0 按英文短信处理
     IF (0 = P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
       SET P_OLDSIGNLEN_V=P_OLDENSIGNLEN;
     ELSE
       SET P_OLDSIGNLEN_V=P_OLDSIGNLEN;
     END IF; ##IF (0 == P_MSGFMT AND 0 <= P_OLDENSIGNLEN) THEN 
     ##如果原信息内容编码为0且补发路由单条长度大于0表示支持英文短信
     IF (0 = P_MSGFMT AND 0 < P_ENSPLITLEN) THEN
       SET P_SPLITLEN_V  =P_ENSPLITLEN;
       SET P_MULTILEN1_V =P_ENMULTILEN1;
       SET P_MULTILEN2_V =P_ENMULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWENSIGNLEN;
       SET P_SIGNATURE_V =P_ENSIGNATURE;
     ELSE
       SET P_SPLITLEN_V  =P_SPLITLEN;
       SET P_MULTILEN1_V =P_MULTILEN1;
       SET P_MULTILEN2_V =P_MULTILEN2;
       SET P_NEWSIGNLEN_V=P_NEWSIGNLEN;
       SET P_SIGNATURE_V =P_SIGNATURE;
     END IF;
     
		 IF (P_PKTOTAL <= 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)) THEN ##对于非长短信补发的处理
				SET P_LONGMSG='';
				##取短信内容
				SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
				##更新替换MSGID
				UPDATE  GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
				UPDATE  MT_TASK SET RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF; ##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(TRIM(P_LONGMSG),P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,TRIM(P_LONGMSG));
          END IF;

					##调用插入存储过程
					CALL GW_WR_MTTASKV2(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
				ELSE
					SET P_LONGMSG='';
				END IF;##END OF IF P_LONGMSGLEN > 0
				SET P_PKNUM=1;
			#END IF;##END OF P_PKTOTAL = 1
 /*
		ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2) AND P_TPUDHI=1) THEN ##对标准协议长短信的补发
			SET P_LONGMSG='';
			##取短信内容
			SELECT MESSAGE INTO P_LONGMSG FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID;
			##更新替换MSGID
			UPDATE  GW_MT_TASK_BAK SET PTMSGID=P_NEWMSGID,RESENDCNT=1 WHERE PTMSGID=P_OLDMSGID;
			IF (P_PKTOTAL=P_PKNUM) THEN ##如果是最后一条，去掉旧签名，加上新签名
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN; ##减去签名的净长度
				SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
				SET P_LONGMSG = CONCAT(P_LONGMSG,P_SIGNATURE)	;
			END IF;##END OF IF P_PKTOTAL=P_PKNUM
			SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
			IF P_LONGMSGLEN > 0 THEN
				##调用插入存储过程
				CALL GW_WR_MTTASKSRV2(P_DESTUID,P_OLDMSGID,2,1,P_PKTOTAL,1,P_ECID,
								P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
								P_PHONE,P_DESTFEEFLAG,P_PKNUM,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
								P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_SVRTYPE,
								P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
			ELSE
				SET P_LONGMSG='';
		  END IF; ##END OF IF P_LONGMSGLEN > 0
		#END IF;## END OF IF P_PKTOTAL > 1
*/
        	ELSEIF (P_PKTOTAL > 1 AND ((P_PKTOTAL <= P_SENDNUM AND P_DESTFEEFLAG=1) OR P_DESTFEEFLAG=2)  AND P_TPUDHI=0) THEN ##对非标准长短信协议的处理
			SET P_LONGMSG='';
			##没有补发过且通道号跟源通道号相等
			IF EXISTS(SELECT * FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID) THEN
				##循环处理旧的几条短信，并且用新的MSGID更新旧的MSGID,然后调用存储过程用旧的MSGID生成新的几条短信，并返回旧的MSGID
				##计算起始MSGID
				SET P_INITMSGID = P_OLDMSGID-(P_PKNUM-1)*17179869184;
				SET P_PKNUM = 1;
				WHILE P_PKNUM <= P_PKTOTAL DO
				WHILELABLE:BEGIN
					##取短信内容 ##若长短信中间的某条缺失，则不补发(暂不考虑)
					SELECT MESSAGE INTO P_SINGLEMSG FROM  GW_MT_TASK_BAK WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					IF IFNULL(P_SINGLEMSG,'') =''  THEN
					  SELECT MESSAGE INTO P_SINGLEMSG1 FROM MT_TASK WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
					  IF IFNULL(P_SINGLEMSG1,'') =''  THEN
						SET P_LONGMSG='';
						LEAVE WHILELABLE;
						ELSE
						UPDATE MT_TASK SET RESENDCNT=1 WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
            SET P_LONGMSG = CONCAT(IFNULL(P_LONGMSG,''),IFNULL(P_SINGLEMSG1,''));
						END IF; ##IF P_SINGLEMSG1 ='' THEN
					ELSE
					##更新替换MSGID
					UPDATE  GW_MT_TASK_BAK SET RESENDCNT=1 WHERE PTMSGID=P_INITMSGID+(P_PKNUM-1)*17179869184;
          SET P_LONGMSG = CONCAT(IFNULL(P_LONGMSG,''),IFNULL(P_SINGLEMSG,''));
          ##拼接短信内容
					END IF; ##IF P_SINGLEMSG = '' THEN
					SET P_PKNUM = P_PKNUM+1;
				END WHILELABLE;
				END WHILE;##END OF WHILE P_PKNUM <= P_PKTOTAL
				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG)-P_OLDSIGNLEN_V; ##减去签名的净长度

                                IF P_OLDSIGNPOS=0 THEN##去掉原短信的签名
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1,P_LONGMSGLEN);
                                ELSE
                                   SET P_LONGMSG=SUBSTRING(P_LONGMSG,1+P_OLDSIGNLEN_V,P_LONGMSGLEN);
                                END IF;

				SET P_LONGMSGLEN = CHAR_LENGTH(P_LONGMSG);
				IF P_LONGMSGLEN > 0 THEN
					##计算拆分条数
					IF P_LONGMSGLEN<=P_SPLITLEN_V THEN
					SET P_PKTOTAL=1;
					ELSE
					SET P_PKTOTAL=FLOOR(1+(P_LONGMSGLEN-P_MULTILEN2_V+P_MULTILEN1_V-1)/(P_MULTILEN1_V));
					END IF;##END OF IF P_LONGMSGLEN<=P_SPLITLEN

          IF P_NEWSIGNPOS=0 THEN##增加新短信的签名
					SET P_LONGMSG = CONCAT(TRIM(P_LONGMSG),P_SIGNATURE_V);
          ELSE
          SET P_LONGMSG = CONCAT(P_SIGNATURE_V,TRIM(P_LONGMSG));
          END IF;

					##调用插入存储过程
					CALL GW_WR_MTTASKV2(P_DESTUID,P_NEWMSGID,2,1,P_PKTOTAL,1,
									P_SPLITLEN_V,P_MULTILEN1_V,P_MULTILEN2_V,P_NEWSIGNLEN_V,P_ECID,
									P_DESTUSRID,P_DESTSPGATE,P_DESTCPNO,P_RECVMTTIME,P_LONGMSG,
									P_PHONE,P_DESTFEEFLAG,P_SENDLEVEL,P_TASKID,'',P_TPUDHI,
									P_LONGMSGSEQ,P_MSGFMT,P_UNICOM,P_MOBILEAREA,P_PKNUM,P_SVRTYPE,
									P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);

	                   ELSE
		              SET P_LONGMSG='';
		           END IF;##END OF IF P_LONGMSGLEN > 0
		              SET P_PKNUM=1 ;
			END IF; ##END OF IF EXISTS(SELECT COUNT(*) FROM P_TMP_MTSUPPV1 WHERE PTMSGID=P_OLDMSGID AND RESENDCNT<1 AND (CONCAT(RTRIM(SPGATE),RTRIM(CPNO)))=P_SRCSPNUMBER)
		END	IF;##END OF IF P_PKTOTAL > 1
	END IF; ##END OF IF ROWCOUNT()<>0

	SELECT P_DESTUID AS UID,P_NEWMSGID AS PTMSGID,ECID,TASKID,P_DESTUSRID AS USERID,P_DESTSPGATE AS SPGATE,
	P_DESTCPNO AS CPNO,P_PHONE AS PHONE,RETFLAG,P_DESTFEEFLAG AS FEEFLAG,P_PKNUM AS PKNUMBER,P_PKTOTAL AS PKTOTAL,
	SENDSTATUS,1 AS SENDLEVEL,P_RECVMTTIME AS RECVMTTIME,P_LONGMSG AS MESSAGE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
	MOBILEAREA,SVRTYPE,TPPID,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA FROM P_TMP_MTSUPPV1 WHERE P_LONGMSG<>'' ;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_LOADBASEPARA;
CREATE DEFINER=`root`@`%` PROCEDURE GW_LOADBASEPARA()
BEGIN
    SELECT ID,FUNNAME,CMDTYPE,ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE,CREATETIME,MODIFTIME,RESERVE  FROM GW_BASEPARA;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_LOADPROTOMTCH;
CREATE DEFINER=`root`@`%` PROCEDURE GW_LOADPROTOMTCH()
BEGIN
     ##WS_BASEPROTOCOL
    SELECT GP.ID,GP.ECID,GP.FUNTYPE,GP.FUNNAME,GP.CMDTYPE,GP.CARGNAME,GP.MARGNAME,GP.CARGTYPE,GP.CARGVALUE,GP.BELONGTYPE,GP.BELONG,GP.CREATETIME,GP.MODIFTIME,GP.RESERVE,GB.RETTYPE,GB.STATUS,GB.CFUNNAME
    FROM GW_PROTOMTCH GP, GW_BASEPROTOCOL GB 
    WHERE GP.FUNTYPE=GB.FUNTYPE AND GP.FUNNAME=GB.FUNNAME AND GP.CMDTYPE=GB.CMDTYPE AND GP.ECID=GB.ECID AND GB.STATUS=1;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_GETALLUSRINFOV1;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_GETALLUSRINFOV1`(
   PISPTYPE INT ##=1
)
BEGIN
	SELECT CASE WHEN IFNULL(B.UID,'')='' THEN A.UID ELSE B.UID END AS SVRID,A.UID,A.USERID,A.USERTYPE,A.USERPRIVILEGE,A.STATUS,A.USERPASSWORD,A.LOGINIP,
	A.STAFFNAME AS CORPNAME,A.SENDTYPE AS FAILURERATE,A.SENDTMSPAN,A.FORBIDTMSPAN,
	A.SPEEDLIMIT,A.MAXDAYNUM,A.SUBMITCNT,A.ACCOUNTTYPE,A.FEEFLAG,A.RISELEVEL,A.TRANSMOTYPE,A.TRANSRPTYPE,
	GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,GU.
    PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT
	FROM USERDATA A LEFT JOIN (SELECT UID,USERID FROM USERDATA WHERE USERPRIVILEGE & 2 = 2 AND ACCOUNTTYPE=PISPTYPE) B
	ON (A.LOGINID = B.USERID) OR B.USERID IS NULL 
	INNER JOIN 	GW_USERPROPERTY GU ON GU.USERID=A.USERID
	WHERE A.STATUS=0 AND A.USERTYPE=0 AND A.ACCOUNTTYPE=PISPTYPE ; 
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_GETURLBINDV1;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_GETURLBINDV1`(
   PIUID INT, 
    PISPTYPE INT 
    )
BEGIN
	IF PIUID=0 THEN ##加载所有绑定了URL的帐号
		SELECT UD.UID,UD.USERID,UD.USERPASSWORD AS PWD,UD.MTURL,
		CASE WHEN (IFNULL(UD.MOURL,'')<>'' AND UD.TRANSMOTYPE=2) THEN UD.MOURL ELSE '' END AS MOURL,
		CASE WHEN (IFNULL(UD.RPTURL,'')<>'' AND UD.TRANSRPTYPE=2) THEN UD.RPTURL ELSE '' END AS RPTURL,
		GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,
		GU.PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT,UD.PUSHVERSION,GU.CACERTNAME,GU.VERIFYPEER,GU.VERIFYHOST 
		FROM USERDATA UD INNER JOIN 	GW_USERPROPERTY GU ON GU.USERID=UD.USERID WHERE UD.USERTYPE=0 AND UD.STATUS=0 
		AND ((IFNULL(UD.MOURL,'')<>'' AND UD.TRANSMOTYPE=2) OR (IFNULL(UD.RPTURL,'')<>'' AND UD.TRANSRPTYPE=2)) 
		AND UD.ACCOUNTTYPE=PISPTYPE ORDER BY UD.UID;
	ELSE ##加载指定UID的URL绑定情况
		SELECT UD.UID,UD.USERID,UD.USERPASSWORD AS PWD,UD.MTURL,
		CASE WHEN (IFNULL(UD.MOURL,'')<>'' AND UD.TRANSMOTYPE=2) THEN UD.MOURL ELSE '' END AS MOURL,
		CASE WHEN (IFNULL(UD.RPTURL,'')<>'' AND UD.TRANSRPTYPE=2) THEN UD.RPTURL ELSE '' END AS RPTURL,
		GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,
		GU.PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT,UD.PUSHVERSION,GU.CACERTNAME,GU.VERIFYPEER,GU.VERIFYHOST 
		FROM USERDATA UD INNER JOIN 	GW_USERPROPERTY GU ON GU.USERID=UD.USERID WHERE UD.UID=PIUID AND UD.USERTYPE=0 AND UD.STATUS=0 
		AND ((IFNULL(UD.MOURL,'')<>'' AND UD.TRANSMOTYPE=2) OR (IFNULL(UD.RPTURL,'')<>'' AND UD.TRANSRPTYPE=2))
		AND UD.ACCOUNTTYPE=PISPTYPE ORDER BY UD.UID;
		END IF;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_LOADPUSHPROMH;
CREATE DEFINER=`root`@`%` PROCEDURE GW_LOADPUSHPROMH()
BEGIN
    SELECT GP.ID,GP.ECID,GP.USERID,GP.PUSHFLAG,GP.CMDTYPE,GP.CARGNAME,GP.CARGTYPE,GP.MARGNAME,GP.CARGVALUE,GP.BELONGTYPE,GP.BELONG,GP.RESERVE,GB.RETTYPE,GB.STATUS
    FROM GW_PUSHPROTOMTCH GP,(SELECT ECID,CMDTYPE,STATUS,CASE WHEN FUNNAME='MO' THEN 1 WHEN FUNNAME='RPT' THEN 2 ELSE 0 END AS  PUSHFLAG,RETTYPE FROM GW_BASEPROTOCOL) GB
   WHERE  GP.CMDTYPE=GB.CMDTYPE AND GP.ECID=GB.ECID AND GP.PUSHFLAG=GB.PUSHFLAG AND GB.STATUS=1; 
     
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_LOADPUSHPROCOL;
CREATE DEFINER=`root`@`%` PROCEDURE  GW_LOADPUSHPROCOL()
BEGIN
    SELECT ID,ECID,USERID,RSPCMD,CARGNAME,RSPSTATUS,CRSPFMT,CARGVALUE  FROM GW_PUSHRSPROTOCOL;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_LOADLFTEMPLATE;
CREATE DEFINER=`root`@`%` PROCEDURE GW_LOADLFTEMPLATE()
BEGIN
    SELECT TM_ID,USER_ID,TM_NAME,TM_MSG,DSFLAG,TM_STATE,ADDTIME,ISPASS,TMP_TYPE,BIZ_CODE,CORP_CODE,PARAMCNT,TM_CODE  FROM LF_TEMPLATE;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_LOADGTCONNINFO;
CREATE DEFINER=`root`@`%` PROCEDURE GW_LOADGTCONNINFO(P_PIPTACCID        VARCHAR(11))
BEGIN
    SELECT  ID,PTID,GATEID,CONNTYPE,PTACCID,IP,PORT,LINKCNT,SPEEDLIMIT,LINKLEVEL,LINKSTATUS,PING,MINLINKS,KEEPCONN,RECONNCNT,RELOGINCNT,SWITCHMAINIP,TESTMETHOD,TESTTIMES,ABNORMALONG,ABNORMALTMS
    FROM GW_GATECONNINFO WHERE PTACCID=P_PIPTACCID;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_LOADUSRFEE;
CREATE DEFINER=`root`@`%` PROCEDURE GW_LOADUSRFEE(PISPTYPE       INT)
BEGIN
  SELECT F.UID,F.SENDNUM,F.USERID FROM USERFEE F
  INNER JOIN USERDATA U ON F.USERID=U.USERID
  WHERE U.USERTYPE=0 AND U.STATUS=0 AND U.ACCOUNTTYPE=PISPTYPE;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_UPD_MOTASKV1`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_UPD_MOTASKV1`(P_PTMSGID BIGINT,
	P_SENDSTATUS INT,
	P_UID INT,
	P_ECID INT,
	P_USERID VARCHAR(11),
	P_RESENDCNT INT)
BEGIN
   
    IF P_UID=0 AND P_ECID=0 AND P_USERID='' THEN
		UPDATE MO_TASK SET SENDSTATUS=P_SENDSTATUS,RESENDCNT=P_RESENDCNT WHERE PTMSGID=P_PTMSGID;
	ELSE
		UPDATE MO_TASK SET SENDSTATUS=P_SENDSTATUS,UID=P_UID,ECID=P_ECID,USERID=P_USERID,RESENDCNT=P_RESENDCNT WHERE PTMSGID=P_PTMSGID;
    END IF;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WRRPTWAITBV4`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WRRPTWAITBV4`(P_UID INT,
	P_PTMSGID BIGINT,
	P_ECID INT,
	P_SPNUMBER VARCHAR(21),
	P_PHONE VARCHAR(21),
	P_SUBMITTIME CHAR(10),
	P_DONETIME CHAR(10),
	P_ERRORCODE CHAR(7),
	P_USERID VARCHAR(11),
	P_ORGUID INT,
  P_USERMSGID BIGINT,
  P_MODULEID INT,
  P_RECVTIME DATETIME,
  P_SPMSGID BIGINT,
  P_PKTOTAL BIGINT,
  P_CUSTID VARCHAR(64),
	P_EXDATA VARCHAR(64),
P_RESENDCNT INT)
BEGIN
    IF NOT EXISTS(SELECT PTMSGID FROM RPT_WAIT_B WHERE PTMSGID = P_PTMSGID) THEN
	   INSERT RPT_WAIT_B(UID, PTMSGID, SPNUMBER, PHONE, SUBMITTIME, DONETIME, ERRORCODE, USERID, 
	   ECID, ORGUID,USERMSGID,MODULEID,RECVTIME,SPMSGID,PKTOTAL,CUSTID,EXDATA,RESENDCNT)
	   VALUES(P_UID, P_PTMSGID, P_SPNUMBER, P_PHONE, P_SUBMITTIME, P_DONETIME, P_ERRORCODE, P_USERID, 
	   P_ECID, P_ORGUID,P_USERMSGID,P_MODULEID,P_RECVTIME,P_SPMSGID,P_PKTOTAL,P_CUSTID,P_EXDATA,P_RESENDCNT);
    END IF;
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_LOADTDCMD;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_LOADTDCMD`()
BEGIN
        DECLARE PI_SQLSTR VARCHAR(2000);
	SET PI_SQLSTR = 'SELECT TD_CMD,MATCHTYPE FROM GW_TDCMD';
	 SET @SQL = PI_SQLSTR;
         PREPARE SL FROM @SQL;
         EXECUTE SL;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_ADDPBLISTBLACK;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_ADDPBLISTBLACK`(
PIPHONE BIGINT,
PITDCMD VARCHAR(64),
PIUSERID VARCHAR(11),
PISPNUMBER VARCHAR(21),
PISVRTYPE VARCHAR(64),
PIECID INT,
PIMOMSGID BIGINT)

BEGIN

DECLARE PIOPTYPE TINYINT;      
DECLARE PIPBUSERID VARCHAR(11);
DECLARE PIPBSPNUMBER VARCHAR(21);
DECLARE PIPBSVRTYPE VARCHAR(64);
DECLARE PIPBCROPCODE VARCHAR(64);

	
	##表的策略信息决定是否需要添加黑名单
        IF EXISTS(SELECT * FROM GW_TDCMD WHERE UPPER(TD_CMD)=UPPER(PITDCMD) AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE CONCAT(TD_SPNUMBER,'%'))) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0) THEN
             SELECT OPTYPE,PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE  INTO PIOPTYPE,PIPBUSERID,PIPBSPNUMBER,PIPBSVRTYPE,PIPBCROPCODE  FROM GW_TDCMD WHERE UPPER(TD_CMD)=UPPER(PITDCMD) AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE CONCAT(TD_SPNUMBER,'%'))) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0 LIMIT 0,1;     

	
		 ##PB_LIST_BLACK表中是否已经存在对应的黑名单数据
		IF NOT EXISTS(SELECT * FROM PB_LIST_BLACK WHERE USERID=PIPBUSERID AND SPGATE='' AND SPNUMBER=PIPBSPNUMBER AND PHONE=PIPHONE AND SVRTYPE=PIPBSVRTYPE AND CORPCODE=PIPBCROPCODE AND OPTYPE=1) THEN
		   INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
		          VALUES(PIPBUSERID,'',PIPBSPNUMBER,PIPHONE,PIOPTYPE,NOW(),'',PIPBSVRTYPE,0,PIPBCROPCODE,1);
		   INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
		          VALUES(PIPHONE,PITDCMD,PIUSERID,PISPNUMBER,PIECID,PIOPTYPE,PIMOMSGID,NOW());
                END IF;	
        END IF;	
END;;
DELIMITER ;

DELIMITER ;;
DROP PROCEDURE  IF EXISTS GW_RD_MTLVLQUEV1;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_RD_MTLVLQUEV1`(P_DESTUID INT,
	P_SENDLEVEL INT,
	P_MAXREADCNT INT,
	P_STRUID VARCHAR(4000),P_CURTIME BIGINT,P_TABLENO INT)
BEGIN
    DECLARE P_SQLSTR VARCHAR(4000);
    DECLARE P_TABNAME VARCHAR(20);
    SET P_CURTIME = IFNULL(P_CURTIME, 0);
    IF  P_TABLENO>=0  AND   P_TABLENO<=9 THEN 
       SET P_TABNAME=CONCAT('MT_LEVEL',  CONVERT(P_TABLENO,CHAR(1)),'_QUEUE');
    ELSE
       SET P_TABNAME='MT_LEVEL0_QUEUE';
    END IF;
    SET P_SQLSTR = 'SELECT ID,UID,DESTUID,LOGINUID,ECID,TASKID,FEEFLAG,USERID,SPGATE,CPNO,PHONE,PTMSGID,RETFLAG,TPUDHI,PKNUMBER,PKTOTAL,SENDSTATUS,';
    SET P_SQLSTR = CONCAT(P_SQLSTR,'PHONECOUNT,SPLITFLAG,SENDLEVEL,LONGMSGSEQ,MSGFMT,MESSAGE,SENDTIME AS RECVMTTIME,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA  FROM ',P_TABNAME);
    SET P_SQLSTR = CONCAT(P_SQLSTR,' WHERE DESTUID=', P_DESTUID,' AND UID NOT IN (',P_STRUID,') AND (ATTIME<=',P_CURTIME,' OR ATTIME<0) ');
    SET P_SQLSTR = CONCAT(P_SQLSTR,' AND SENDLEVEL=',P_SENDLEVEL,' LIMIT ',P_MAXREADCNT);

    SET @SQL = P_SQLSTR;
   PREPARE SL FROM @SQL;
    
  EXECUTE SL;

    DEALLOCATE PREPARE SL;
END;;
DELIMITER ;


DELIMITER ;;
DROP PROCEDURE IF EXISTS `GW_WR_MTLVLQUEV2`;
CREATE DEFINER=`root`@`%` PROCEDURE `GW_WR_MTLVLQUEV2`(P_PIUID        INT,
   P_PIPTMSGID    BIGINT,
   P_PIRETFLAG    TINYINT UNSIGNED,
   P_PIPKTOTAL    TINYINT UNSIGNED,
   P_PIPHONECOUNT INT,
   P_PISENDSTATUS TINYINT UNSIGNED,
   P_PISPLITFLAG  TINYINT UNSIGNED,
   P_PIECID       INT,
   P_PIUSERID     VARCHAR(11),
   P_PISPGATE     VARCHAR(21),
   P_PICPNO       VARCHAR(21),
   P_PIRECVMTTIME DATETIME,
   P_PIPHONE      VARCHAR(3500),
   P_PIMESSAGE    VARCHAR(3000) CHARSET 'GBK',
   P_PIFEEFLAG    TINYINT UNSIGNED,
   P_PIDESTUID    INT,
   P_PILOGINUID   INT,
   P_PIPKNUMBER   TINYINT UNSIGNED,
   P_PISENDLEVEL  TINYINT UNSIGNED,
   P_PITPUDHI     TINYINT UNSIGNED,
   P_PITASKID     INT,
   P_PILONGMSGSEQ TINYINT UNSIGNED,
   P_PIMSGFMT     TINYINT UNSIGNED,
   P_PITOTALCOUNT INT,
   P_SVRTYPE VARCHAR(64),
   P_P1 VARCHAR(64),
   P_P2 VARCHAR(64),
   P_P3 VARCHAR(64),
   P_P4 VARCHAR(64),
   P_USERMSGID BIGINT,
   P_MODULEID INT,
   P_ATTIME BIGINT,
   P_VALIDTIME BIGINT,
   P_SENDTYPE INT,
   P_BATCHID BIGINT,
   P_AREACODE INT,
   P_CUSTID VARCHAR(64),
	 P_EXDATA VARCHAR(64),
	 P_TABLENO INT)
BEGIN
    CASE P_TABLENO
WHEN 0 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL0_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL0_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 1 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL1_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL1_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 2 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL2_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL2_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 3 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL3_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL3_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 4 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL4_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL4_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 5 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL5_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL5_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 6 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL6_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL6_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 7 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL7_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL7_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 8 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL8_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL8_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
WHEN 9 THEN
  IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL9_QUEUE WHERE PTMSGID=P_PIPTMSGID) THEN
	   INSERT INTO MT_LEVEL9_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
	   PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	   VALUES(P_PIUID, P_PIUSERID, P_PISPGATE, P_PICPNO, P_PIPHONE, P_PIPTMSGID, P_PIMESSAGE, P_PIRETFLAG, P_PIPKTOTAL, P_PITOTALCOUNT,
	   P_PIPHONECOUNT,P_PIRECVMTTIME, P_PISENDSTATUS, P_PISPLITFLAG, P_PIECID, P_PIFEEFLAG, P_PIDESTUID,P_PILOGINUID,P_PIPKNUMBER,
	   P_PITPUDHI,P_PISENDLEVEL,P_PITASKID,P_PILONGMSGSEQ,P_PIMSGFMT,P_SVRTYPE,P_P1,P_P2,P_P3,P_P4,P_USERMSGID,P_MODULEID,P_ATTIME,P_VALIDTIME,P_SENDTYPE,P_BATCHID,P_AREACODE,P_CUSTID,P_EXDATA);
  END IF;
END CASE;

END;;
DELIMITER ;

CALL S_WR_VERINFO('4.06.01');

DROP PROCEDURE IF EXISTS `LF_PVERV0`;
CREATE PROCEDURE `LF_PVERV0`(
    DBVERSIONSTR VARCHAR(32),
    NUM INT,
    TOTALSTR INT
)
BEGIN
	IF NOT EXISTS(SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR AND CURRENT_NO=NUM AND TOTAL=TOTALSTR) THEN
	/*EMP产品数据库版本信息表*/
		INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
			VALUES(DBVERSIONSTR ,NOW(),NOW(),NUM,TOTALSTR,2,'1号脚本');
	ELSE
		UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=NOW() WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUM AND TOTAL=TOTALSTR;
	END IF;
END;
CALL LF_PVERV0('6.36',1,3);
DROP PROCEDURE IF EXISTS `LF_PVERV0`;