--------------------V73.07-V73.08 START------------------
BEGIN ATOMIC
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '73.09';
SET NUMSTR=1;
SET TOTALSTR=1;
IF EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
DELETE FROM LF_DB_SCRIPT WHERE VERSION = DBVERSIONSTR;
END IF;
END &&


/*WEB升级脚本 START*/
/*WEB升级脚本 END*/


/*网关升级脚本 START*/
/*网关升级脚本   END*/


CREATE OR REPLACE PROCEDURE "ADDVERSIONEXISTS"
  BEGIN ATOMIC
    DECLARE VERSIONSTR VARCHAR(32);
    DECLARE DBVERSION VARCHAR(32);
    DECLARE WBSVERSION VARCHAR(32);
    DECLARE SPGATEVERSION VARCHAR(32);
    DECLARE VERSIONSTR_OLD VARCHAR(32);
	DECLARE WBSVERSION_OLD VARCHAR(32);
	DECLARE SPGATEVERSION_OLD VARCHAR(32);
    DECLARE NUM INT;
    DECLARE TOTAL INT;
    SET VERSIONSTR = '7.3.8.612.SP8';
    SET DBVERSION = '73.08';
    SET WBSVERSION = '8.6.4.219';
    SET SPGATEVERSION = '6.1.52.344';
    SET VERSIONSTR_OLD = '7.3.9.645.SP9';
	SET WBSVERSION_OLD = '8.6.5.220';
	SET SPGATEVERSION_OLD = '6.1.53.345';
    SET NUM =1;
    SET TOTAL=1;
    --EMP产品版本记录
    --EMP-WEB
    IF NOT EXISTS(SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000)
    THEN
      INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
      VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
    ELSE
      UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
    END IF;
    --EMP_GATEWAY
    IF NOT EXISTS(SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000)
    THEN
      INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
      VALUES(1000,2000,WBSVERSION,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
    ELSE
      UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
    END IF;
    --SMT_SPGATE
    IF NOT EXISTS(SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000)
    THEN
      INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
      VALUES(1000,3000,SPGATEVERSION,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
    ELSE
      UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
    END IF;
    --EMP产品版本历史记录
    --EMP-WEB
    IF NOT EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000)
    THEN
      INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
      VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1.修复群发任务查看修改定时任务时，提示发送内容不能为空，导致不能修改定时任务的问题<br/>2.修复状态码导入模板时出错的时候，会闪现多个dialog框的问题<br/>3.查询统计-数据查询-自定参数统计报表，选择时间区间为同一天时间查询，无法查询出数据，实际当天有数据<br/>4.查询统计-统计报表，运营商/SP账号/机构/操作员/业务类型/区域报表，查询统计-数据分析，总体发送趋势，短信类型应为信息类型<br/>5.解决插入操作日志表超时的问题<br/>6.解决V73.00 Oracle全新脚本mt_datareport表缺少recfail字段<br/>7.解决查询统计-统计报表-区域统计报表模块，oracle/db2环境查询报错');
    ELSE
      UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1.修复群发任务查看修改定时任务时，提示发送内容不能为空，导致不能修改定时任务的问题<br/>2.修复状态码导入模板时出错的时候，会闪现多个dialog框的问题<br/>3.查询统计-数据查询-自定参数统计报表，选择时间区间为同一天时间查询，无法查询出数据，实际当天有数据<br/>4.查询统计-统计报表，运营商/SP账号/机构/操作员/业务类型/区域报表，查询统计-数据分析，总体发送趋势，短信类型应为信息类型<br/>5.解决插入操作日志表超时的问题<br/>6.解决V73.00 Oracle全新脚本mt_datareport表缺少recfail字段<br/>7.解决查询统计-统计报表-区域统计报表模块，oracle/db2环境查询报错' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
    END IF;
    -- 删除旧版本web历史记录
    IF EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=1000)
    THEN
      DELETE FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
    END IF;
	IF EXISTS(SELECT * FROM LF_VERSION WHERE VERSION=VERSIONSTR_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=1000)
    THEN
      DELETE FROM LF_VERSION WHERE VERSION=VERSIONSTR_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
    END IF;
	
	
	-- 删除旧版本EMP_GATEWAY历史记录
    IF EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSION_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=2000)
    THEN
      DELETE FROM LF_VERSION_HIS WHERE VERSION=WBSVERSION_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
    END IF;
	IF EXISTS(SELECT * FROM LF_VERSION WHERE VERSION=WBSVERSION_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=2000)
    THEN
      DELETE FROM LF_VERSION WHERE VERSION=WBSVERSION_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
    END IF;
	
	
	-- 删除旧版本SMT_SPGATE历史记录
    IF EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSION_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=3000)
    THEN
      DELETE FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSION_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
    END IF;
	IF EXISTS(SELECT * FROM LF_VERSION WHERE VERSION=SPGATEVERSION_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=3000)
    THEN
      DELETE FROM LF_VERSION WHERE VERSION=SPGATEVERSION_OLD AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
    END IF;
	
	
    --EMP_GATEWAY
    IF NOT EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSION AND PRODUCT_ID=1000 AND PROCESS_ID=2000)
    THEN
      INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
      VALUES(1000,2000,WBSVERSION,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
    ELSE
      UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSION AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
    END IF;
    --SMT_SPGATE
    IF NOT EXISTS(SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSION AND PRODUCT_ID=1000 AND PROCESS_ID=3000)
    THEN
      INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
      VALUES(1000,3000,SPGATEVERSION,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
    ELSE
      UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSION AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
    END IF;
    IF NOT EXISTS(SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSION AND CURRENT_NO=NUM AND TOTAL=TOTAL)
    THEN
      --EMP产品数据库版本信息表
      INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
      VALUES(DBVERSION,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUM,TOTAL,2,'版本号更改');
    ELSE
      UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP,MEMO='版本号更改' WHERE  VERSION=DBVERSION AND CURRENT_NO=NUM AND TOTAL=TOTAL;
    END IF;
  END  &&

CALL ADDVERSIONEXISTS  &&
DROP PROCEDURE ADDVERSIONEXISTS &&
