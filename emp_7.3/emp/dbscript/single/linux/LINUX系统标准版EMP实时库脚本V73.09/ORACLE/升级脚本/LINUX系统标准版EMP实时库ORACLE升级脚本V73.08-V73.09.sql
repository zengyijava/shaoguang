-----------V73.07-V73.08 START ------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='73.09';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'WEB包更改');
    COMMIT;
  END IF;
END;
/

/*WEB升级脚本 START*/
/*WEB升级脚本 END*/

/*网关升级脚本 V4.06.06-V4.06.07 START*/
DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='GW_MT_TASK_BAK' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE GW_MT_TASK_BAK ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='GW_MT_TASK_BAK' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE GW_MT_TASK_BAK ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL0_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL0_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL0_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL0_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL1_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL1_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL1_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL1_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL2_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL2_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL2_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL2_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL3_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL3_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL3_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL3_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/  

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL4_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL4_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL4_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL4_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/  

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL5_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL5_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL5_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL5_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/  

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL6_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL6_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL6_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL6_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/  

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL7_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL7_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL7_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL7_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/  

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL8_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL8_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL8_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL8_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/  

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL9_QUEUE' AND COLUMN_NAME='SUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL9_QUEUE ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/   

DECLARE I INT;
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL9_QUEUE' AND COLUMN_NAME='LUID1';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL9_QUEUE ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';
END IF;
END;
/  

--（1）当月历史表添加字段不加默认值
DECLARE 
PITABLENAME VARCHAR2(20);
PITABLE VARCHAR2(20);
PISTR VARCHAR2(256);
PICNT NUMBER(11);
V_SQL VARCHAR2(256);
CUR_TABLE SYS_REFCURSOR;
BEGIN
PITABLENAME :='MTTASK'|| TO_CHAR(add_months(sysdate,-0),'YYYYMM');
V_SQL:='SELECT TABLE_NAME FROM USER_TABLES T WHERE T.TABLE_NAME LIKE ''MTTASK%'' AND T.TABLE_NAME ='''||PITABLENAME||'''';
  OPEN CUR_TABLE FOR V_SQL ;  
  LOOP  
      FETCH CUR_TABLE INTO PITABLE;   
      EXIT WHEN CUR_TABLE%NOTFOUND; 
      
      SELECT COUNT (*) INTO PICNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = PITABLE AND COLUMN_NAME = 'SUID1';
      IF PICNT=0 THEN
      PISTR:='ALTER TABLE '||PITABLE||' ADD SUID1 VARCHAR2(64) ';  
      EXECUTE IMMEDIATE PISTR;
      END IF;
	  
	  SELECT COUNT (*) INTO PICNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = PITABLE AND COLUMN_NAME = 'LUID1';
      IF PICNT=0 THEN
      PISTR:='ALTER TABLE '||PITABLE||' ADD LUID1 VARCHAR2(64) ';  
      EXECUTE IMMEDIATE PISTR;
      END IF;
      
  END LOOP;  
  CLOSE CUR_TABLE;  
END; 
/

--（2）当月以后的历史表添加字段，字段有默认值
DECLARE 
PITABLENAME VARCHAR2(20);
PITABLE VARCHAR2(20);
PISTR VARCHAR2(256);
PICNT NUMBER(11);
V_SQL VARCHAR2(256);
CUR_TABLE SYS_REFCURSOR;
BEGIN
PITABLENAME :='MTTASK'|| TO_CHAR(add_months(sysdate,-1),'YYYYMM');
V_SQL:='SELECT TABLE_NAME FROM USER_TABLES T WHERE T.TABLE_NAME LIKE ''MTTASK%'' AND T.TABLE_NAME >'''||PITABLENAME||'''';
  OPEN CUR_TABLE FOR V_SQL ;  
  LOOP  
      FETCH CUR_TABLE INTO PITABLE;   
      EXIT WHEN CUR_TABLE%NOTFOUND; 
      
      SELECT COUNT (*) INTO PICNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = PITABLE AND COLUMN_NAME = 'SUID1';
      IF PICNT=0 THEN
      PISTR:='ALTER TABLE '||PITABLE||' ADD SUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';  
      EXECUTE IMMEDIATE PISTR;
      END IF;
      
	  SELECT COUNT (*) INTO PICNT FROM USER_TAB_COLUMNS WHERE TABLE_NAME = PITABLE AND COLUMN_NAME = 'LUID1';
      IF PICNT=0 THEN
      PISTR:='ALTER TABLE '||PITABLE||' ADD LUID1 VARCHAR2(64) DEFAULT ('' '') NOT NULL';  
      EXECUTE IMMEDIATE PISTR;
      END IF;
      
  END LOOP;  
  CLOSE CUR_TABLE;  
END; 
/


CREATE OR REPLACE PROCEDURE GW_RD_MTLVLQUEV1
(
  PIDESTUID      IN NUMBER,
  PISENDLEVEL    IN NUMBER,
  PIMAXREADCNT   IN NUMBER,
  PISTRUID       IN VARCHAR2,
  SPCURTIME      IN NUMBER DEFAULT 0,
  PITABLENO      IN NUMBER,
  OUT_CURSOR     OUT SYS_REFCURSOR
  )
AS
  PISQLSTR VARCHAR2(4000);
BEGIN
  PISQLSTR :=
  'SELECT /*+RULE*/ ID,"UID",DESTUID,LOGINUID,ECID,TASKID,FEEFLAG,USERID,SPGATE,CPNO,PHONE,PTMSGID,'
  ||'RETFLAG,TPUDHI,PKNUMBER,PKTOTAL,SENDSTATUS,PHONECOUNT,SPLITFLAG,SENDLEVEL,LONGMSGSEQ,MSGFMT,MESSAGE,'
  ||'TO_DATE(TO_CHAR(SENDTIME, ''YYYY-MM-DD HH24:MI:SS''),''YYYY-MM-DD HH24:MI:SS'') AS RECVMTTIME, '
  ||'SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1 '
  ||'FROM MT_LEVEL'||PITABLENO||'_QUEUE WHERE DESTUID='||PIDESTUID||' AND "UID" NOT IN('||PISTRUID||') 
  AND SENDLEVEL='||PISENDLEVEL ||'AND (ATTIME<='||SPCURTIME||'OR ATTIME<0) AND ROWNUM<='||PIMAXREADCNT||'';
  --DBMS_OUTPUT.PUT_LINE(PISQLSTR);
  --EXECUTE IMMEDIATE PISQLSTR;
  --返回给上层数据
  OPEN OUT_CURSOR FOR PISQLSTR;
END;
/


CREATE OR REPLACE PROCEDURE GW_WR_MTLVLQUEV4
 (
   PIUID        IN NUMBER,
   PIPTMSGID    IN NUMBER,
   PIRETFLAG    IN NUMBER,
   PIPKTOTAL    IN NUMBER,
   PIPHONECOUNT IN NUMBER,
   PISENDSTATUS IN NUMBER,
   PISPLITFLAG  IN NUMBER,
   PIECID       IN NUMBER,
   PIUSERID     IN VARCHAR2,
   PISPGATE     IN VARCHAR2,
   PICPNO       IN VARCHAR2,
   PIRECVMTTIME IN VARCHAR2,
   PIPHONE      IN VARCHAR2,
   PIMESSAGE    IN VARCHAR2,
   PIFEEFLAG    IN NUMBER,
   PIDESTUID    IN NUMBER,
   PILOGINUID   IN NUMBER,
   PIPKNUMBER   IN NUMBER,
   PISENDLEVEL  IN NUMBER,
   PITPUDHI     IN NUMBER,
   PITASKID     IN NUMBER,
   PILONGMSGSEQ IN NUMBER,
   PIMSGFMT     IN NUMBER,
   PITOTALCOUNT IN NUMBER,
   PISVRTYPE      IN VARCHAR2,
   PIP1           IN VARCHAR2,
   PIP2           IN VARCHAR2,
   PIP3           IN VARCHAR2,
   PIP4           IN VARCHAR2,
   PIUSERMSGID    IN NUMBER DEFAULT 0,
   PIMODULEID     IN NUMBER DEFAULT 0,
   PIATTIME       IN NUMBER DEFAULT 0,
   PIVALIDTIME    IN NUMBER DEFAULT 0,
   PISENDTYPE     IN NUMBER DEFAULT 1,
   PIBATCHID      IN NUMBER DEFAULT 0,
   PIAREACODE     IN NUMBER DEFAULT 0,
   PICUSTID       IN MT_LEVEL0_QUEUE.CUSTID%TYPE,
   PIEXDATA       IN MT_LEVEL0_QUEUE.EXDATA%TYPE,
   PILONGMSG 	  IN VARCHAR2,
   PITMPLID	   	  IN NUMBER,
   PICHGRADE	  IN NUMBER,
   PIMSGTYPE	  IN NUMBER,
   PIRMSVALIDTM   IN NUMBER,
   PIPROTOCOLVER  IN NUMBER,
   PITMPLTYPE	  IN NUMBER,
   PITITLE        IN VARCHAR2,
   PISHOWAY       IN VARCHAR2,
   PIDLDWAY       IN NUMBER,
   PIDLDNEY       IN NUMBER,
   PIISFREE       IN NUMBER,
   PISHOWTIME     IN NUMBER,
   PISUID1		  IN VARCHAR2,
   PILUID1		  IN VARCHAR2,
   PITABLENO   	  IN NUMBER
 )
AS
PIRECVMTTIME_P TIMESTAMP(6);
ICOUNT PLS_INTEGER;
BEGIN
  IF PITABLENO = 0 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL0_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL0_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 1 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL1_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL1_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 2 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL2_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL2_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 3 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL3_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL3_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 4 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL4_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL4_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 5 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL5_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL5_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 6 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL6_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL6_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 7 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL7_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL7_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 8 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL8_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL8_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  ELSIF PITABLENO = 9 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL9_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL9_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
END IF;
END;
/

CREATE OR REPLACE PROCEDURE GW_WR_MTTASKV4
 (
    PIUID          IN NUMBER,
    PIPTMSGID      IN NUMBER,
    PISENDSTATUS   IN NUMBER,
    PIRETFLAG      IN NUMBER,
    PIPKTOTAL      IN NUMBER,
    PIPHONECOUNT   IN NUMBER,
    PISPLITLEN_P   IN NUMBER,
    PIMULTILEN1_P  IN NUMBER,
    PIMULTILEN2_P  IN NUMBER,
    PISIGNLEN_P    IN NUMBER,
    PIECID         IN NUMBER,
    PIUSERID       IN VARCHAR2,
    PISPGATE       IN VARCHAR2,
    PICPNO         IN VARCHAR2,
    PIRECVMTTIME   IN VARCHAR2,
    PIMESSAGE      IN VARCHAR2,
    PISHOUJI       IN VARCHAR2,
    PIFEEFLAG      IN NUMBER,
    PISENDLEVEL    IN NUMBER,
    PITASKID       IN NUMBER,
    PIERCODE       IN VARCHAR2,
    PITPUDHI       IN NUMBER,
    PILONGMSGSEQ   IN NUMBER,
    PIMSGFMT       IN NUMBER,
    PIUNICOM       IN NUMBER,
    PIMOBILEAREA   IN NUMBER,
    PIPKNUMBER     IN NUMBER,
    PISVRTYPE      IN VARCHAR2,
    PIP1      IN VARCHAR2,
    PIP2      IN VARCHAR2,
    PIP3      IN VARCHAR2,
    PIP4      IN VARCHAR2,
    PIUSERMSGID    IN NUMBER DEFAULT 0,
    PIMODULEID     IN NUMBER DEFAULT 0,
    PIATTIME       IN NUMBER DEFAULT 0,
    PIVALIDTIME    IN NUMBER DEFAULT 0,
    PISENDTYPE     IN NUMBER DEFAULT 1,
    PIBATCHID      IN NUMBER DEFAULT 0,
    PIAREACODE     IN NUMBER DEFAULT 0,
    PICUSTID       IN VARCHAR2,
    PIEXDATA       IN VARCHAR2,
	PILONGMSG 	   IN VARCHAR2,
	PITMPLID	   IN NUMBER,
	PICHGRADE	   IN NUMBER,
	PIMSGTYPE	   IN NUMBER,
	PIRMSVALIDTM   IN NUMBER,
	PIRMSRPTFLAG   IN NUMBER,
	PIPROTOCOLVER  IN NUMBER,
    PITMPLTYPE	  IN NUMBER,
    PITITLE        IN VARCHAR2,
    PISHOWAY       IN VARCHAR2,
    PIDLDWAY       IN NUMBER,
    PIDLDNEY       IN NUMBER,
    PIISFREE       IN NUMBER,
    PISHOWTIME     IN NUMBER,
	PISUID1		   IN VARCHAR2,
	PILUID1		   IN VARCHAR2
 )
AS
--临时变量
PITMPMSGID NUMBER(22,0);
PILOCATION PLS_INTEGER;
PISTART PLS_INTEGER;
PIRESULTPHONE VARCHAR(21);
PISTRSPLIT VARCHAR(2);
PILEN PLS_INTEGER;
PIRESULTMSG VARCHAR(720);
PIPKNUM PLS_INTEGER;
PITMPNUM PLS_INTEGER;
ICOUNT PLS_INTEGER;
PISHOUJI_P VARCHAR2(3500);
PIRECVMTTIME_P TIMESTAMP(6);
PIPTMSGID_P NUMBER(22,0);

PISPLITLEN PLS_INTEGER;
PIMULTILEN1 PLS_INTEGER;
PIMULTILEN2 PLS_INTEGER;
PISIGNLEN PLS_INTEGER;

BEGIN
--变量赋值
PILEN := LENGTH(PILONGMSG)-PISIGNLEN_P;
PITMPNUM := 0;
PIPKNUM := 1;
PISTRSPLIT := ',';
PISHOUJI_P :=PISHOUJI;
PIPTMSGID_P:=PIPTMSGID;


IF PIRECVMTTIME IS NULL THEN
   PIRECVMTTIME_P:=SYSTIMESTAMP;
ELSE
   PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
END IF;
--清空临时表,如果临时表不存在直接返回不处理
/*SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_MTTASK');
IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASK';
ELSE
  RETURN;
END IF;
*/
--验证手机号合法性
IF (PISHOUJI_P IS NULL) THEN
  PISHOUJI_P := ' ';
END IF;
IF /*(PISHOUJI_P IS NULL) OR */(PIPHONECOUNT < 1) THEN
   RETURN;
END IF;

--变量赋值
IF PIMSGFMT=4 OR PIMSGFMT=248 OR PIMSGFMT=246 THEN
  PISPLITLEN:=140;
  PIMULTILEN1:=134;
  PIMULTILEN2:=134;
  PISIGNLEN:=0;
ELSE
  PISPLITLEN  :=PISPLITLEN_P;
  PIMULTILEN1 :=PIMULTILEN1_P;
  PIMULTILEN2 :=PIMULTILEN2_P;
  PISIGNLEN   :=PISIGNLEN_P;
END IF;
IF PIMSGFMT=25 THEN
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  IF ICOUNT<1 THEN
    INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
    RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
    UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
    VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
    PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
    PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIRMSRPTFLAG,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
  RETURN;
END IF;
IF PIPHONECOUNT = 1 --单发
THEN
 SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  --IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PIPTMSGID_P)
  IF ICOUNT<1 THEN
    IF PIPKTOTAL = 1 THEN
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
      VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
      PIRETFLAG,PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
      PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIRMSRPTFLAG,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
    ELSE
      PIPKNUM := 1;
      PITMPMSGID := PIPTMSGID_P;
      IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
        PIRESULTMSG := SUBSTR(PIMESSAGE,1,PISPLITLEN);
        PITMPMSGID := PITMPMSGID;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID, PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
        PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
        PITMPMSGID := PITMPMSGID+17179869184;
        PIPKNUM := PIPKNUM+1;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
      ELSE
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          IF PIPKNUM = PIPKTOTAL THEN
             PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
             PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSIF PIPKNUM = PIPKTOTAL-1 THEN
            IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
               PITMPNUM := PILEN-1;
               --DBMS_OUTPUT.PUT_LINE('123');
            ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
               PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
               --DBMS_OUTPUT.PUT_LINE('456');
            END IF;
            PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
               --DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
          END IF;
          ICOUNT:=0;
          SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
          IF ICOUNT<1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
            PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
          --EXECUTE IMMEDIATE STR;
          PIPKNUM := PIPKNUM+1;
        END LOOP;--END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
      END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1;
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,
      A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIRMSRPTFLAG,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1 FROM TMP_MTTASK A;
      COMMIT;
    END IF;--END IF OF IF PIPKTOTAL = 1
  --ELSE  --MSGID存在是写入MSGIDTEST表
  --  INSERT INTO MSGIDTEST(MSGID) VALUES(PIPTMSGID);
  END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PIPTMSGID_P)
ELSE --群发
    PISHOUJI_P := PISTRSPLIT||PISHOUJI_P||PISTRSPLIT;
    PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT);
  IF PIPKTOTAL < 1 THEN--没有短信内容
    RETURN;
  END IF;

  IF PIPKTOTAL >= 1 --需要拆分长短信
  THEN
    WHILE PILOCATION <> 0 LOOP--拆分手机号码
        PISTART := PILOCATION;
        PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT,PISTART+1);
      IF PILOCATION > 0 THEN
        PIRESULTPHONE := SUBSTR(PISHOUJI_P,PISTART+1,PILOCATION-PISTART-1);--拆分后的字符
        IF (PIRESULTPHONE IS NULL) THEN
          PIRESULTPHONE := ' ';
        END IF;
        PITMPMSGID := PIPTMSGID_P;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          IF PIPKTOTAL = 1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIMESSAGE,PISENDSTATUS,
            PIRETFLAG, PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          ELSE
            PIPKNUM := 1;
            IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
              PIRESULTMSG := SUBSTR(PIMESSAGE,1, PISPLITLEN);--拆分后的字符
              PITMPMSGID := PITMPMSGID;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID, PISPGATE,PICPNO,PIRESULTPHONE, PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG, PIPKNUM, PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF;
              PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
              PITMPMSGID := PITMPMSGID+17179869184;
              PIPKNUM := PIPKNUM+1;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
            ELSE
              WHILE PIPKNUM <= PIPKTOTAL LOOP--PIPKNUM:1    PIPKTOTAL 2
                IF PIPKNUM = PIPKTOTAL THEN
                  PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSIF PIPKNUM = PIPKTOTAL-1 THEN
                  IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
                    PITMPNUM := PILEN-1;
                  ELSE
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                    PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
                     ----第一条
                  END IF; --END IF OF PILEN-(PIPKNUM-1)*PIMULTILEN1 > PIMULTILEN2 AND PILEN-(PIPKNUM-1)*PIMULTILEN1 <= PIMULTILEN1
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSE
                  PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                END IF; --END IF OF IF PIPKNUM = PIPKTOTAL
                ICOUNT:=0;
                SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
                IF ICOUNT<1 THEN
                  INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                  RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                  UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                  VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                  PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                  PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
                END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
                PIPKNUM := PIPKNUM+1;
              END LOOP;-- END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
            END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1
          END  IF;--END IF OF IF PIPKTOTAL = 1
        END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID)
        PIPTMSGID_P := PIPTMSGID_P+1;
      END  IF; --END IF OF IF PILOCATION > 0
    END LOOP; --END WHILE OF WHILE PILOCATION <> 0
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,
      A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIRMSRPTFLAG,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1 FROM TMP_MTTASK A;
      COMMIT;
   END IF; --END IF OF IF PIPKTOTAL >= 1
END IF; --END IF OF IF PIPHONECOUNT = 1 --单发
END;

/

CREATE OR REPLACE PROCEDURE GW_WR_MTTASKV5
 (
    PIUID          IN NUMBER,
    PIPTMSGID      IN NUMBER,
    PISENDSTATUS   IN NUMBER,
    PIRETFLAG      IN NUMBER,
    PIPKTOTAL      IN NUMBER,
    PIPHONECOUNT   IN NUMBER,
    PISPLITLEN_P   IN NUMBER,
    PIMULTILEN1_P  IN NUMBER,
    PIMULTILEN2_P  IN NUMBER,
    PISIGNLEN_P    IN NUMBER,
    PIECID         IN NUMBER,
    PIUSERID       IN VARCHAR2,
    PISPGATE       IN VARCHAR2,
    PICPNO         IN VARCHAR2,
    PIRECVMTTIME   IN VARCHAR2,
    PIMESSAGE      IN VARCHAR2,
    PISHOUJI       IN VARCHAR2,
    PIFEEFLAG      IN NUMBER,
    PISENDLEVEL    IN NUMBER,
    PITASKID       IN NUMBER,
    PIERCODE       IN VARCHAR2,
    PITPUDHI       IN NUMBER,
    PILONGMSGSEQ   IN NUMBER,
    PIMSGFMT       IN NUMBER,
    PIUNICOM       IN NUMBER,
    PIMOBILEAREA   IN NUMBER,
    PIPKNUMBER     IN NUMBER,
    PISVRTYPE      IN VARCHAR2,
    PIP1      IN VARCHAR2,
    PIP2      IN VARCHAR2,
    PIP3      IN VARCHAR2,
    PIP4      IN VARCHAR2,
    PIUSERMSGID    IN NUMBER DEFAULT 0,
    PIMODULEID     IN NUMBER DEFAULT 0,
    PIATTIME       IN NUMBER DEFAULT 0,
    PIVALIDTIME    IN NUMBER DEFAULT 0,
    PISENDTYPE     IN NUMBER DEFAULT 1,
    PIBATCHID      IN NUMBER DEFAULT 0,
    PIAREACODE     IN NUMBER DEFAULT 0,
    PICUSTID       IN VARCHAR2,
    PIEXDATA       IN VARCHAR2,
  PISUID1       IN VARCHAR2,
  PILUID1       IN VARCHAR2
 )
AS
--临时变量
PITMPMSGID NUMBER(22,0);
PILOCATION PLS_INTEGER;
PISTART PLS_INTEGER;
PIRESULTPHONE VARCHAR(21);
PISTRSPLIT VARCHAR(2);
PILEN PLS_INTEGER;
PIRESULTMSG VARCHAR(720);
PIPKNUM PLS_INTEGER;
PITMPNUM PLS_INTEGER;
ICOUNT PLS_INTEGER;
PISHOUJI_P VARCHAR2(3500);
PIRECVMTTIME_P TIMESTAMP(6);
PIPTMSGID_P NUMBER(22,0);

PISPLITLEN PLS_INTEGER;
PIMULTILEN1 PLS_INTEGER;
PIMULTILEN2 PLS_INTEGER;
PISIGNLEN PLS_INTEGER;

BEGIN
--变量赋值
PILEN := LENGTH(PIMESSAGE)-PISIGNLEN_P;
PITMPNUM := 0;
PIPKNUM := 1;
PISTRSPLIT := ',';
PISHOUJI_P :=PISHOUJI;
PIPTMSGID_P:=PIPTMSGID;


IF PIRECVMTTIME IS NULL THEN
   PIRECVMTTIME_P:=SYSTIMESTAMP;
ELSE
   PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
END IF;
--清空临时表,如果临时表不存在直接返回不处理
/*SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_MTTASK');
IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASK';
ELSE
  RETURN;
END IF;
*/
--验证手机号合法性
IF (PISHOUJI_P IS NULL) THEN
  PISHOUJI_P := ' ';
END IF;
IF /*(PISHOUJI_P IS NULL) OR */(PIPHONECOUNT < 1) THEN
   RETURN;
END IF;

--变量赋值
IF PIMSGFMT=4 OR PIMSGFMT=248 OR PIMSGFMT=246 THEN
  PISPLITLEN:=140;
  PIMULTILEN1:=134;
  PIMULTILEN2:=134;
  PISIGNLEN:=0;
ELSE
  PISPLITLEN  :=PISPLITLEN_P;
  PIMULTILEN1 :=PIMULTILEN1_P;
  PIMULTILEN2 :=PIMULTILEN2_P;
  PISIGNLEN   :=PISIGNLEN_P;
END IF;
IF PIMSGFMT=25 THEN
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  IF ICOUNT<1 THEN
    INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
    RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
    UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,SUID1,LUID1)
    VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
    PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
    PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PISUID1,PILUID1);
  END IF;
  RETURN;
END IF;
IF PIPHONECOUNT = 1 --单发
THEN
 SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  --IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PIPTMSGID_P)
  IF ICOUNT<1 THEN
    IF PIPKTOTAL = 1 THEN
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,SUID1,LUID1)
      VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
      PIRETFLAG,PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
      PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PISUID1,PILUID1);
    ELSE
      PIPKNUM := 1;
      PITMPMSGID := PIPTMSGID_P;
      IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
        PIRESULTMSG := SUBSTR(PIMESSAGE,1,PISPLITLEN);
        PITMPMSGID := PITMPMSGID;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID, PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
        PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
        PITMPMSGID := PITMPMSGID+17179869184;
        PIPKNUM := PIPKNUM+1;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
      ELSE
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          IF PIPKNUM = PIPKTOTAL THEN
             PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
             PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSIF PIPKNUM = PIPKTOTAL-1 THEN
            IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
               PITMPNUM := PILEN-1;
               --DBMS_OUTPUT.PUT_LINE('123');
            ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
               PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
               --DBMS_OUTPUT.PUT_LINE('456');
            END IF;
            PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
               --DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
          END IF;
          ICOUNT:=0;
          SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
          IF ICOUNT<1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
            PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
          --EXECUTE IMMEDIATE STR;
          PIPKNUM := PIPKNUM+1;
        END LOOP;--END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
      END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1;
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,SUID1,LUID1)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,
      A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PISUID1,PILUID1 FROM TMP_MTTASK A;
      COMMIT;
    END IF;--END IF OF IF PIPKTOTAL = 1
  --ELSE  --MSGID存在是写入MSGIDTEST表
  --  INSERT INTO MSGIDTEST(MSGID) VALUES(PIPTMSGID);
  END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PIPTMSGID_P)
ELSE --群发
    PISHOUJI_P := PISTRSPLIT||PISHOUJI_P||PISTRSPLIT;
    PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT);
  IF PIPKTOTAL < 1 THEN--没有短信内容
    RETURN;
  END IF;

  IF PIPKTOTAL >= 1 --需要拆分长短信
  THEN
    WHILE PILOCATION <> 0 LOOP--拆分手机号码
        PISTART := PILOCATION;
        PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT,PISTART+1);
      IF PILOCATION > 0 THEN
        PIRESULTPHONE := SUBSTR(PISHOUJI_P,PISTART+1,PILOCATION-PISTART-1);--拆分后的字符
        IF (PIRESULTPHONE IS NULL) THEN
          PIRESULTPHONE := ' ';
        END IF;
        PITMPMSGID := PIPTMSGID_P;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          IF PIPKTOTAL = 1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIMESSAGE,PISENDSTATUS,
            PIRETFLAG, PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          ELSE
            PIPKNUM := 1;
            IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
              PIRESULTMSG := SUBSTR(PIMESSAGE,1, PISPLITLEN);--拆分后的字符
              PITMPMSGID := PITMPMSGID;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID, PISPGATE,PICPNO,PIRESULTPHONE, PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG, PIPKNUM, PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF;
              PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
              PITMPMSGID := PITMPMSGID+17179869184;
              PIPKNUM := PIPKNUM+1;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
            ELSE
              WHILE PIPKNUM <= PIPKTOTAL LOOP--PIPKNUM:1    PIPKTOTAL 2
                IF PIPKNUM = PIPKTOTAL THEN
                  PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSIF PIPKNUM = PIPKTOTAL-1 THEN
                  IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
                    PITMPNUM := PILEN-1;
                  ELSE
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                    PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
                     ----第一条
                  END IF; --END IF OF PILEN-(PIPKNUM-1)*PIMULTILEN1 > PIMULTILEN2 AND PILEN-(PIPKNUM-1)*PIMULTILEN1 <= PIMULTILEN1
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSE
                  PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                END IF; --END IF OF IF PIPKNUM = PIPKTOTAL
                ICOUNT:=0;
                SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
                IF ICOUNT<1 THEN
                  INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                  RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                  UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                  VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                  PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                  PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
                END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM MT_TASK WHERE PTMSGID = PITMPMSGID)
                PIPKNUM := PIPKNUM+1;
              END LOOP;-- END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
            END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1
          END  IF;--END IF OF IF PIPKTOTAL = 1
        END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID)
        PIPTMSGID_P := PIPTMSGID_P+1;
      END  IF; --END IF OF IF PILOCATION > 0
    END LOOP; --END WHILE OF WHILE PILOCATION <> 0
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,SUID1,LUID1)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,
      A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PISUID1,PILUID1 FROM TMP_MTTASK A;
      COMMIT;
   END IF; --END IF OF IF PIPKTOTAL >= 1
END IF; --END IF OF IF PIPHONECOUNT = 1 --单发
END;

/

CREATE OR REPLACE PROCEDURE GW_WR_MTTASKSRV4
 (
    PIUID          IN NUMBER,
    PIPTMSGID      IN NUMBER,
    PISENDSTATUS   IN NUMBER,
    PIRETFLAG      IN NUMBER,
    PIPKTOTAL      IN NUMBER,
    PIPHONECOUNT   IN NUMBER,
    PIECID         IN NUMBER,
    PIUSERID       IN VARCHAR2,
    PISPGATE       IN VARCHAR2,
    PICPNO         IN VARCHAR2,
    PIRECVMTTIME   IN VARCHAR2,
    PIMESSAGE      IN VARCHAR2,
    PISHOUJI       IN VARCHAR2,
    PIFEEFLAG      IN NUMBER,
    PIPKNUMBER     IN NUMBER,
    PISENDLEVEL    IN NUMBER,
    PITASKID       IN NUMBER,
    PIERCODE       IN VARCHAR2,
    PITPUDHI       IN NUMBER,
    PILONGMSGSEQ   IN NUMBER,
    PIMSGFMT       IN NUMBER,
    PIUNICOM       IN NUMBER,
    PIMOBILEAREA   IN NUMBER,
    PISVRTYPE      IN VARCHAR2,
    PIP1           IN VARCHAR2,
    PIP2           IN VARCHAR2,
    PIP3           IN VARCHAR2,
    PIP4           IN VARCHAR2,
    PIUSERMSGID    IN NUMBER DEFAULT 0,
    PIMODULEID     IN NUMBER DEFAULT 0,
    PIATTIME       IN NUMBER DEFAULT 0,
    PIVALIDTIME    IN NUMBER DEFAULT 0,
    PISENDTYPE     IN NUMBER DEFAULT 1,
    PIBATCHID      IN NUMBER DEFAULT 0,
    PIAREACODE     IN NUMBER DEFAULT 0,
    PICUSTID       IN VARCHAR2,
    PIEXDATA       IN VARCHAR2,
	PILONGMSG 	   IN VARCHAR2,
	PITMPLID	   IN NUMBER,
	PICHGRADE	   IN NUMBER,
	PIMSGTYPE	   IN NUMBER,
	PIRMSVALIDTM   IN NUMBER,
	PIRMSRPTFLAG   IN NUMBER,
	PIPROTOCOLVER  IN NUMBER,
    PITMPLTYPE	  IN NUMBER,
    PITITLE        IN VARCHAR2,
    PISHOWAY       IN VARCHAR2,
    PIDLDWAY       IN NUMBER,
    PIDLDNEY       IN NUMBER,
    PIISFREE       IN NUMBER,
    PISHOWTIME     IN NUMBER,
	PISUID1        IN VARCHAR2,
	PILUID1        IN VARCHAR2
 )
AS
PILOCATION PLS_INTEGER;
PISTART PLS_INTEGER;
PIRESULTPHONE VARCHAR2(21);
PISTRSPLIT VARCHAR2(2);
PIRECVMTTIME_P TIMESTAMP(6);
ICOUNT PLS_INTEGER;
PISHOUJI_P VARCHAR2(3500);
PIPTMSGID_P NUMBER(22,0);

BEGIN

PISTRSPLIT := ',';
PISHOUJI_P := PISHOUJI;
PIPTMSGID_P:=PIPTMSGID;

IF PIRECVMTTIME IS NULL THEN
   PIRECVMTTIME_P:=SYSTIMESTAMP;
ELSE
   PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
END IF;
/*
SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_MTTASKSR');
IF ICOUNT>0 THEN
  EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASKSR';
ELSE
  RETURN;
END IF;
*/
IF (PISHOUJI_P IS NULL) THEN
   PISHOUJI_P := ' ';
END IF;
IF (PIPHONECOUNT < 1) THEN--手机号码为空
  RETURN;
END IF;

IF PIPHONECOUNT = 1 THEN--单发
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  IF ICOUNT<1 THEN
    INSERT INTO GW_MT_TASK_BAK("UID",USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE,SENDSTATUS,
    RETFLAG, PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,
    MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
    VALUES(PIUID,PIUSERID, PISPGATE, PICPNO, PISHOUJI_P, PIPTMSGID_P, PIMESSAGE,PISENDSTATUS,
    PIRETFLAG, PIPKNUMBER, PIPKTOTAL, PIRECVMTTIME_P, PIECID, PIFEEFLAG, PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,
    PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,
    PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIRMSRPTFLAG,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1);
  END IF;
ELSE --群发
  PISHOUJI_P := PISTRSPLIT||PISHOUJI_P||PISTRSPLIT;
  PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT);
  WHILE PILOCATION <> 0 LOOP--拆分手机号码
    PISTART := PILOCATION;
    PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT,PISTART+1);
    IF PILOCATION > 0 THEN
      PIRESULTPHONE := SUBSTR(PISHOUJI_P,PISTART+1,PILOCATION-PISTART-1);
      IF (PIRESULTPHONE IS NULL) THEN
        PIRESULTPHONE := ' ';
      END IF;
      ICOUNT:=0;
      SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;

      IF ICOUNT<1 THEN
        INSERT INTO TMP_MTTASKSR("UID",USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE,SENDSTATUS,
        RETFLAG, PKNUMBER, PKTOTAL, RECVMTTIME,ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,
        MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
        VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PIPTMSGID_P,PIMESSAGE,PISENDSTATUS,PIRETFLAG,
        PIPKNUMBER,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,
        PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
      END IF;
      PIPTMSGID_P := PIPTMSGID_P+1;
    END IF;
  END LOOP;
  INSERT INTO GW_MT_TASK_BAK("UID",USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE,SENDSTATUS, RETFLAG,
  PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
  UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,SUID1,LUID1)
  SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
  A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,
  A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIRMSRPTFLAG,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME,PISUID1,PILUID1 FROM TMP_MTTASKSR A;
  COMMIT;
END IF;
  EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASKSR';
END;
/

CREATE OR REPLACE PROCEDURE GW_WR_MTTASKSRV5
 (
    PIUID          IN NUMBER,
    PIPTMSGID      IN NUMBER,
    PISENDSTATUS   IN NUMBER,
    PIRETFLAG      IN NUMBER,
    PIPKTOTAL      IN NUMBER,
    PIPHONECOUNT   IN NUMBER,
    PIECID         IN NUMBER,
    PIUSERID       IN VARCHAR2,
    PISPGATE       IN VARCHAR2,
    PICPNO         IN VARCHAR2,
    PIRECVMTTIME   IN VARCHAR2,
    PIMESSAGE      IN VARCHAR2,
    PISHOUJI       IN VARCHAR2,
    PIFEEFLAG      IN NUMBER,
    PIPKNUMBER     IN NUMBER,
    PISENDLEVEL    IN NUMBER,
    PITASKID       IN NUMBER,
    PIERCODE       IN VARCHAR2,
    PITPUDHI       IN NUMBER,
    PILONGMSGSEQ   IN NUMBER,
    PIMSGFMT       IN NUMBER,
    PIUNICOM       IN NUMBER,
    PIMOBILEAREA   IN NUMBER,
    PISVRTYPE      IN VARCHAR2,
    PIP1           IN VARCHAR2,
    PIP2           IN VARCHAR2,
    PIP3           IN VARCHAR2,
    PIP4           IN VARCHAR2,
    PIUSERMSGID    IN NUMBER DEFAULT 0,
    PIMODULEID     IN NUMBER DEFAULT 0,
    PIATTIME       IN NUMBER DEFAULT 0,
    PIVALIDTIME    IN NUMBER DEFAULT 0,
    PISENDTYPE     IN NUMBER DEFAULT 1,
    PIBATCHID      IN NUMBER DEFAULT 0,
    PIAREACODE     IN NUMBER DEFAULT 0,
    PICUSTID       IN VARCHAR2,
    PIEXDATA       IN VARCHAR2,
	PISUID1        IN VARCHAR2,
	PILUID1        IN VARCHAR2
 )
AS
PILOCATION PLS_INTEGER;
PISTART PLS_INTEGER;
PIRESULTPHONE VARCHAR2(21);
PISTRSPLIT VARCHAR2(2);
PIRECVMTTIME_P TIMESTAMP(6);
ICOUNT PLS_INTEGER;
PISHOUJI_P VARCHAR2(3500);
PIPTMSGID_P NUMBER(22,0);

BEGIN

PISTRSPLIT := ',';
PISHOUJI_P := PISHOUJI;
PIPTMSGID_P:=PIPTMSGID;

IF PIRECVMTTIME IS NULL THEN
   PIRECVMTTIME_P:=SYSTIMESTAMP;
ELSE
   PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
END IF;
/*
SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_MTTASKSR');
IF ICOUNT>0 THEN
  EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASKSR';
ELSE
  RETURN;
END IF;
*/
IF (PISHOUJI_P IS NULL) THEN
   PISHOUJI_P := ' ';
END IF;
IF (PIPHONECOUNT < 1) THEN--手机号码为空
  RETURN;
END IF;

IF PIPHONECOUNT = 1 THEN--单发
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  IF ICOUNT<1 THEN
    INSERT INTO GW_MT_TASK_BAK("UID",USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE,SENDSTATUS,
    RETFLAG, PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,
    MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,SUID1,LUID1)
    VALUES(PIUID,PIUSERID, PISPGATE, PICPNO, PISHOUJI_P, PIPTMSGID_P, PIMESSAGE,PISENDSTATUS,
    PIRETFLAG, PIPKNUMBER, PIPKTOTAL, PIRECVMTTIME_P, PIECID, PIFEEFLAG, PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,
    PILONGMSGSEQ,PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,
    PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PISUID1,PILUID1);
  END IF;
ELSE --群发
  PISHOUJI_P := PISTRSPLIT||PISHOUJI_P||PISTRSPLIT;
  PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT);
  WHILE PILOCATION <> 0 LOOP--拆分手机号码
    PISTART := PILOCATION;
    PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT,PISTART+1);
    IF PILOCATION > 0 THEN
      PIRESULTPHONE := SUBSTR(PISHOUJI_P,PISTART+1,PILOCATION-PISTART-1);
      IF (PIRESULTPHONE IS NULL) THEN
        PIRESULTPHONE := ' ';
      END IF;
      ICOUNT:=0;
      SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;

      IF ICOUNT<1 THEN
        INSERT INTO TMP_MTTASKSR("UID",USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE,SENDSTATUS,
        RETFLAG, PKNUMBER, PKTOTAL, RECVMTTIME,ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,
        MSGFMT,UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
        VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PIPTMSGID_P,PIMESSAGE,PISENDSTATUS,PIRETFLAG,
        PIPKNUMBER,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,
        PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
      END IF;
      PIPTMSGID_P := PIPTMSGID_P+1;
    END IF;
  END LOOP;
  INSERT INTO GW_MT_TASK_BAK("UID",USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE,SENDSTATUS, RETFLAG,
  PKNUMBER, PKTOTAL, RECVMTTIME, ECID, FEEFLAG, SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
  UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,SUID1,LUID1)
  SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,A.MESSAGE,A.SENDSTATUS,A.RETFLAG,
  A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,
  A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PISUID1,PILUID1 FROM TMP_MTTASKSR A;
  COMMIT;
END IF;
  EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASKSR';
END;
/

CREATE OR REPLACE PROCEDURE GW_WR_MTTASKBAKV2
 (
    PIUID         IN GW_MT_TASK_BAK."UID"%TYPE,
    PIPTMSGID     IN GW_MT_TASK_BAK.PTMSGID%TYPE,
    PIECID        IN GW_MT_TASK_BAK.ECID%TYPE,
    PISENDSTATUS  IN GW_MT_TASK_BAK.SENDSTATUS%TYPE,
    PIRETFLAG     IN GW_MT_TASK_BAK.RETFLAG%TYPE,
    PIPKNUMBER    IN GW_MT_TASK_BAK.PKNUMBER%TYPE,
    PIPKTOTAL     IN GW_MT_TASK_BAK.PKTOTAL%TYPE,
    PIFEEFLAG     IN GW_MT_TASK_BAK.FEEFLAG%TYPE,
    PISENDLEVEL   IN GW_MT_TASK_BAK.SENDLEVEL%TYPE,
    PIRECVMTTIME  IN GW_MT_TASK_BAK.RECVMTTIME%TYPE,
    PIUSERID      IN GW_MT_TASK_BAK.USERID%TYPE,
    PISPGATE      IN GW_MT_TASK_BAK.SPGATE%TYPE,
    PICPNO        IN GW_MT_TASK_BAK.CPNO%TYPE,
    PIPHONE       IN GW_MT_TASK_BAK.PHONE%TYPE,
    PIMESSAGE     IN GW_MT_TASK_BAK.MESSAGE%TYPE,
    PITASKID      IN GW_MT_TASK_BAK.TASKID%TYPE,
    PIERRORCODE   IN GW_MT_TASK_BAK.ERRORCODE%TYPE,
    PITPUDHI      IN GW_MT_TASK_BAK.TPUDHI%TYPE,
    PILONGMSGSEQ  IN GW_MT_TASK_BAK.LONGMSGSEQ%TYPE,
    PIMSGFMT      IN GW_MT_TASK_BAK.MSGFMT%TYPE,
    PIUNICOM      IN GW_MT_TASK_BAK.UNICOM%TYPE,
    PIMOBILEAREA  IN GW_MT_TASK_BAK.MOBILEAREA%TYPE,
    PISVRTYPE     IN GW_MT_TASK_BAK.SVRTYPE%TYPE,
    PIP1          IN GW_MT_TASK_BAK.P1%TYPE,
    PIP2          IN GW_MT_TASK_BAK.P2%TYPE,
    PIP3          IN GW_MT_TASK_BAK.P3%TYPE,
    PIP4          IN GW_MT_TASK_BAK.P4%TYPE,
    PIUSERMSGID   IN GW_MT_TASK_BAK.USERMSGID%TYPE,
    PIMODULEID    IN GW_MT_TASK_BAK.MODULEID%TYPE,
    PIATTIME      IN GW_MT_TASK_BAK.ATTIME%TYPE,
    PIVALIDTIME   IN GW_MT_TASK_BAK.VALIDTIME%TYPE,
    PISENDTYPE    IN GW_MT_TASK_BAK.SENDTYPE%TYPE,
    PIBATCHID     IN GW_MT_TASK_BAK.BATCHID%TYPE,
    PIAREACODE    IN GW_MT_TASK_BAK.AREACODE%TYPE,
    PICUSTID     IN GW_MT_TASK_BAK.CUSTID%TYPE,
    PIEXDATA    IN GW_MT_TASK_BAK.EXDATA%TYPE,
	PISUID1    IN GW_MT_TASK_BAK.SUID1%TYPE,
	PILUID1    IN GW_MT_TASK_BAK.LUID1%TYPE
 )
AS
  PICNT NUMBER;
  BEGIN
    SELECT COUNT(ID) INTO PICNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID;
  IF PICNT=0 THEN
    INSERT INTO GW_MT_TASK_BAK("UID",PTMSGID,ECID,SENDSTATUS,RETFLAG,PKNUMBER,PKTOTAL,FEEFLAG,SENDLEVEL,
    RECVMTTIME,USERID,SPGATE,CPNO,PHONE,MESSAGE,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
    MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,SUID1,LUID1)
    VALUES(PIUID,PIPTMSGID,PIECID,PISENDSTATUS,PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIFEEFLAG,PISENDLEVEL,PIRECVMTTIME,
    PIUSERID,PISPGATE,PICPNO,PIPHONE,PIMESSAGE,PITASKID,PIERRORCODE,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,PIUNICOM,
    PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PISUID1,PILUID1);
  END IF;
END;
/
CREATE OR REPLACE PROCEDURE GW_DELWAIT
AS
  --批量转移临时变量
  PI_CURINDEX           NUMBER;
  PI_MININDEX           NUMBER;
  PI_MAXINDEX           NUMBER;
  EACHMAX               NUMBER; --每次处理最大数
  PIERROR VARCHAR2(4000);
BEGIN
   EACHMAX:= 500000;
   
   --删除文件发送请求历史表数据
   SELECT MIN(ID),MAX(ID) INTO PI_MININDEX,PI_MAXINDEX FROM BATCH_MT_REQ_HIS
   WHERE RECVTIME<TO_DATE(TO_CHAR(SYSDATE-60,'YYYY-MM-DD'),'YYYY-MM-DD HH24:MI:SS ');
     PI_CURINDEX:=PI_MININDEX;
     WHILE PI_CURINDEX<PI_MAXINDEX LOOP
     IF PI_MAXINDEX-PI_CURINDEX>=EACHMAX THEN
       PI_CURINDEX:=PI_CURINDEX+EACHMAX;
     ELSE
       PI_CURINDEX:=PI_MAXINDEX;
     END IF;
     BEGIN
       DELETE FROM BATCH_MT_REQ_HIS WHERE ID<=PI_CURINDEX;
       EXCEPTION WHEN OTHERS THEN
         PIERROR:=SQLERRM;
         INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除BATCH_MT_REQ_HIS表记录',PIERROR);

         COMMIT;
     END;--END OF EXCEPTION
   END LOOP;

   IF TO_CHAR(SYSDATE,'DD')='01' THEN

     SELECT MIN(ID),MAX(ID) INTO PI_MININDEX,PI_MAXINDEX FROM MO_WAIT_A
     WHERE DELIVERTIME<TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYY-MM-DD'),'YYYY-MM-DD HH24:MI:SS');
     PI_CURINDEX:=PI_MININDEX;
     WHILE PI_CURINDEX<PI_MAXINDEX LOOP
       IF PI_MAXINDEX-PI_CURINDEX>=EACHMAX THEN
         PI_CURINDEX:=PI_CURINDEX+EACHMAX;
       ELSE
         PI_CURINDEX:=PI_MAXINDEX;
       END IF;
       BEGIN
         DELETE FROM MO_WAIT_A WHERE ID<=PI_CURINDEX;
         EXCEPTION WHEN OTHERS THEN
           PIERROR:=SQLERRM;
           INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除MO_WAIT_A表记录',PIERROR);
           COMMIT;
       END;--END OF EXCEPTION
     END LOOP;

     SELECT MIN(ID),MAX(ID) INTO PI_MININDEX,PI_MAXINDEX FROM RPT_WAIT_A
     WHERE RECVTIME<TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYY-MM-DD'),'YYYY-MM-DD HH24:MI:SS');
     PI_CURINDEX:=PI_MININDEX;
     WHILE PI_CURINDEX<PI_MAXINDEX LOOP
       IF PI_MAXINDEX-PI_CURINDEX>=EACHMAX THEN
         PI_CURINDEX:=PI_CURINDEX+EACHMAX;
       ELSE
         PI_CURINDEX:=PI_MAXINDEX;
       END IF;
       BEGIN
         DELETE FROM RPT_WAIT_A WHERE ID<=PI_CURINDEX;
         EXCEPTION WHEN OTHERS THEN
           PIERROR:=SQLERRM;
           INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除RPT_WAIT_A表记录',PIERROR);
           COMMIT;
       END;--END OF EXCEPTION
     END LOOP;

     SELECT MIN(ID),MAX(ID) INTO PI_MININDEX,PI_MAXINDEX FROM RPT_WAIT_B
     WHERE RECVTIME<TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYY-MM-DD'),'YYYY-MM-DD HH24:MI:SS');
     PI_CURINDEX:=PI_MININDEX;
     WHILE PI_CURINDEX<PI_MAXINDEX LOOP
       IF PI_MAXINDEX-PI_CURINDEX>=EACHMAX THEN
         PI_CURINDEX:=PI_CURINDEX+EACHMAX;
       ELSE
         PI_CURINDEX:=PI_MAXINDEX;
       END IF;
       BEGIN
         DELETE FROM RPT_WAIT_B WHERE ID<=PI_CURINDEX;
         EXCEPTION WHEN OTHERS THEN
           PIERROR:=SQLERRM;
           INSERT INTO TRANS_LOG(USETYPE, TRANSNAME, TSTATUS) VALUES('SMS','短信删除RPT_WAIT_B表记录',PIERROR);
           COMMIT;
       END;--END OF EXCEPTION
     END LOOP;
   COMMIT;
   END IF;
END;
/

CREATE OR REPLACE PROCEDURE GW_H_TRANSFERV1(MININDEX IN NUMBER,
                                     MAXINDEX IN NUMBER,
                                     PROCESSFLAG IN NUMBER,
                                     LOTSIZE IN NUMBER) IS
PISTR VARCHAR2(4000);
PITABLENAME VARCHAR2(20);
MINYM NUMBER;
MAXYM NUMBER;
CURYM NUMBER;
BEGIN
  --------------------VER 3.1-------------------------------------
   SELECT CAST(TO_CHAR(MAX(SENDTIME),'YYYYMM')AS INT),CAST(TO_CHAR(MIN(SENDTIME),'YYYYMM')AS INT) INTO MAXYM,MINYM FROM GW_MT_TASK_BAK WHERE ID BETWEEN MININDEX AND MAXINDEX;

   CURYM := MINYM;
   WHILE CURYM<=MAXYM LOOP
      PITABLENAME := 'MTTASK'||CAST(CURYM AS CHAR);

      PISTR:= 'INSERT INTO '||PITABLENAME||' NOLOGGING (ID,MDAY,USERID,SPGATE,CPNO,PHONE,SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,
      PKTOTAL,SENDSTATUS,SENDFLAG,RECVFLAG,DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,SENDTIME,RECVTIME,MESSAGE,TASKID,
      ECID,PTMSGID,MOBILEAREA,SPID,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,DOWNTM,SUID1,LUID1)
      SELECT ID,TO_NUMBER(TO_CHAR(M.SENDTIME,''DD'')),USERID,SPGATE,CPNO,PHONE,SPMSGID,RETFLAG,FEEFLAG,PKNUMBER,PKTOTAL,
      SENDSTATUS,SENDFLAG,RECVFLAG,DONEDATE,ERRORCODE,SENDLEVEL,SENDTYPE,UNICOM,SENDTIME,RECVTIME,MESSAGE,TASKID,ECID,
      PTMSGID,MOBILEAREA,SPID,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,BATCHID,AREACODE,CUSTID,EXDATA,LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME,DOWNTM,SUID1,LUID1
      FROM GW_MT_TASK_BAK M
      WHERE CAST(TO_CHAR(SENDTIME,''YYYYMM'')AS INT) ='||CURYM||' AND (M.ID <='||MAXINDEX||') ';
      --DBMS_OUTPUT.PUT_LINE(PISTR);
      EXECUTE IMMEDIATE PISTR;

      IF CAST(SUBSTR(CAST(CURYM AS CHAR),5,2) AS INT)=12 THEN
        CURYM := CAST(CAST(CAST(SUBSTR(CAST(CURYM AS CHAR),1,4)AS INT)+1 AS CHAR)||'01' AS INT);
      ELSE
        CURYM := CURYM+1;
      END IF;
   END LOOP;
END GW_H_TRANSFERV1;

/

CREATE OR REPLACE PROCEDURE GW_WR_MTTASKV1
 (
    PIUID          IN NUMBER,
    PIPTMSGID      IN NUMBER,
    PISENDSTATUS   IN NUMBER,
    PIRETFLAG      IN NUMBER,
    PIPKTOTAL      IN NUMBER,
    PIPHONECOUNT   IN NUMBER,
    PISPLITLEN_P   IN NUMBER,
    PIMULTILEN1_P  IN NUMBER,
    PIMULTILEN2_P  IN NUMBER,
    PISIGNLEN_P    IN NUMBER,
    PIECID         IN NUMBER,
    PIUSERID       IN VARCHAR2,
    PISPGATE       IN VARCHAR2,
    PICPNO         IN VARCHAR2,
    PIRECVMTTIME   IN VARCHAR2,
    PIMESSAGE      IN VARCHAR2,
    PISHOUJI       IN VARCHAR2,
    PIFEEFLAG      IN NUMBER,
    PISENDLEVEL    IN NUMBER,
    PITASKID       IN NUMBER,
    PIERCODE       IN VARCHAR2,
    PITPUDHI       IN NUMBER,
    PILONGMSGSEQ   IN NUMBER,
    PIMSGFMT       IN NUMBER,
    PIUNICOM       IN NUMBER,
    PIMOBILEAREA   IN NUMBER,
    PIPKNUMBER     IN NUMBER,
    PISVRTYPE      IN VARCHAR2,
    PIP1      IN VARCHAR2,
    PIP2      IN VARCHAR2,
    PIP3      IN VARCHAR2,
    PIP4      IN VARCHAR2,
    PIUSERMSGID    IN NUMBER DEFAULT 0,
    PIMODULEID     IN NUMBER DEFAULT 0,
    PIATTIME       IN NUMBER DEFAULT 0,
    PIVALIDTIME    IN NUMBER DEFAULT 0,
    PISENDTYPE     IN NUMBER DEFAULT 1,
    PIBATCHID      IN NUMBER DEFAULT 0,
    PIAREACODE     IN NUMBER DEFAULT 0,
	PICUSTID      IN VARCHAR2,
	PIEXDATA      IN VARCHAR2
 )
AS
--临时变量
PITMPMSGID NUMBER(22,0);
PILOCATION PLS_INTEGER;
PISTART PLS_INTEGER;
PIRESULTPHONE VARCHAR(21);
PISTRSPLIT VARCHAR(2);
PILEN PLS_INTEGER;
PIRESULTMSG VARCHAR(720);
PIPKNUM PLS_INTEGER;
PITMPNUM PLS_INTEGER;
ICOUNT PLS_INTEGER;
PISHOUJI_P VARCHAR2(3500);
PIRECVMTTIME_P TIMESTAMP(6);
PIPTMSGID_P NUMBER(22,0);

PISPLITLEN PLS_INTEGER;
PIMULTILEN1 PLS_INTEGER;
PIMULTILEN2 PLS_INTEGER;
PISIGNLEN PLS_INTEGER;

BEGIN
--变量赋值
PILEN := LENGTH(PIMESSAGE)-PISIGNLEN_P;
PITMPNUM := 0;
PIPKNUM := 1;
PISTRSPLIT := ',';
PISHOUJI_P :=PISHOUJI;
PIPTMSGID_P:=PIPTMSGID;


IF PIRECVMTTIME IS NULL THEN
   PIRECVMTTIME_P:=SYSTIMESTAMP;
ELSE
   PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
END IF;
--清空临时表,如果临时表不存在直接返回不处理
/*SELECT  COUNT(*) INTO ICOUNT FROM USER_TABLES T WHERE UPPER(T.TABLE_NAME)=UPPER('TMP_MTTASK');
IF ICOUNT>0 THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_MTTASK';
ELSE
  RETURN;
END IF;
*/
--验证手机号合法性
IF (PISHOUJI_P IS NULL) THEN
  PISHOUJI_P := ' ';
END IF;
IF /*(PISHOUJI_P IS NULL) OR */(PIPHONECOUNT < 1) THEN
   RETURN;
END IF;

--变量赋值
IF PIMSGFMT=4 OR PIMSGFMT=248 OR PIMSGFMT=246 THEN
  PISPLITLEN:=140;
  PIMULTILEN1:=134;
  PIMULTILEN2:=134;
  PISIGNLEN:=0;
ELSE
  PISPLITLEN  :=PISPLITLEN_P;
  PIMULTILEN1 :=PIMULTILEN1_P;
  PIMULTILEN2 :=PIMULTILEN2_P;
  PISIGNLEN   :=PISIGNLEN_P;
END IF;
IF PIMSGFMT=25 THEN
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  IF ICOUNT<1 THEN
    INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
    RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
    UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
    VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
    PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
    PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  RETURN;
END IF;
IF PIPHONECOUNT = 1 --单发
THEN
 SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID_P;
  --IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PIPTMSGID_P)
  IF ICOUNT<1 THEN
    IF PIPKTOTAL = 1 THEN
      INSERT INTO GW_MT_TASK_BAK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PIPTMSGID_P,NVL(PIMESSAGE,' '),PISENDSTATUS,
      PIRETFLAG,PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
      PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
    ELSE
      PIPKNUM := 1;
      PITMPMSGID := PIPTMSGID_P;
      IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
        PIRESULTMSG := SUBSTR(PIMESSAGE,1,PISPLITLEN);
        PITMPMSGID := PITMPMSGID;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID, PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
        PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
        PITMPMSGID := PITMPMSGID+17179869184;
        PIPKNUM := PIPKNUM+1;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
          RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
          UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
          VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
          PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
          PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
        END IF;
      ELSE
        WHILE PIPKNUM <= PIPKTOTAL LOOP
          IF PIPKNUM = PIPKTOTAL THEN
             PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
             PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSIF PIPKNUM = PIPKTOTAL-1 THEN
            IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
               PITMPNUM := PILEN-1;
               --DBMS_OUTPUT.PUT_LINE('123');
            ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
               PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
               --DBMS_OUTPUT.PUT_LINE('456');
            END IF;
            PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
          ELSE
               PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
               PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
               --DBMS_OUTPUT.PUT_LINE(PIRESULTMSG);
          END IF;
          ICOUNT:=0;
          SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
          IF ICOUNT<1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PISHOUJI_P,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
            PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID)
          --EXECUTE IMMEDIATE STR;
          PIPKNUM := PIPKNUM+1;
        END LOOP;--END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
      END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1;
      INSERT INTO GW_MT_TASK_BAK ("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,
      A.MSGFMT,A.UNICOM,A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA FROM TMP_MTTASK A;
      COMMIT;
    END IF;--END IF OF IF PIPKTOTAL = 1
  --ELSE  --MSGID存在是写入MSGIDTEST表
  --  INSERT INTO MSGIDTEST(MSGID) VALUES(PIPTMSGID);
  END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PIPTMSGID_P)
ELSE --群发
    PISHOUJI_P := PISTRSPLIT||PISHOUJI_P||PISTRSPLIT;
    PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT);
  IF PIPKTOTAL < 1 THEN--没有短信内容
    RETURN;
  END IF;

  IF PIPKTOTAL >= 1 --需要拆分长短信
  THEN
    WHILE PILOCATION <> 0 LOOP--拆分手机号码
        PISTART := PILOCATION;
        PILOCATION := INSTR(PISHOUJI_P,PISTRSPLIT,PISTART+1);
      IF PILOCATION > 0 THEN
        PIRESULTPHONE := SUBSTR(PISHOUJI_P,PISTART+1,PILOCATION-PISTART-1);--拆分后的字符
        IF (PIRESULTPHONE IS NULL) THEN
          PIRESULTPHONE := ' ';
        END IF;
        PITMPMSGID := PIPTMSGID_P;
        ICOUNT:=0;
        SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
        IF ICOUNT<1 THEN
          IF PIPKTOTAL = 1 THEN
            INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
            RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
            UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
            VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIMESSAGE,PISENDSTATUS,
            PIRETFLAG, PIPKTOTAL,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
            PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
          ELSE
            PIPKNUM := 1;
            IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1 THEN
              PIRESULTMSG := SUBSTR(PIMESSAGE,1, PISPLITLEN);--拆分后的字符
              PITMPMSGID := PITMPMSGID;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID, PISPGATE,PICPNO,PIRESULTPHONE, PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG, PIPKNUM, PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF;
              PIRESULTMSG := SUBSTR(PIMESSAGE,PISPLITLEN+1, PILEN-PISPLITLEN+PISIGNLEN);
              PITMPMSGID := PITMPMSGID+17179869184;
              PIPKNUM := PIPKNUM+1;
              ICOUNT:=0;
              SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
              IF ICOUNT<1 THEN
                INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
              END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID)
            ELSE
              WHILE PIPKNUM <= PIPKTOTAL LOOP--PIPKNUM:1    PIPKTOTAL 2
                IF PIPKNUM = PIPKTOTAL THEN
                  PIRESULTMSG := SUBSTR(PIMESSAGE,PITMPNUM+1, PIMULTILEN2+PISIGNLEN);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSIF PIPKNUM = PIPKTOTAL-1 THEN
                  IF ((PILEN-(PIPKNUM-1)*PIMULTILEN1) > PIMULTILEN2) AND ((PILEN-(PIPKNUM-1)*PIMULTILEN1) <= PIMULTILEN1) THEN
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PILEN-(PIPKNUM-1)*PIMULTILEN1-1);
                    PITMPNUM := PILEN-1;
                  ELSE
                    PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                    PITMPNUM := (PIPKNUM-1)*PIMULTILEN1+PIMULTILEN1;
                     ----第一条
                  END IF; --END IF OF PILEN-(PIPKNUM-1)*PIMULTILEN1 > PIMULTILEN2 AND PILEN-(PIPKNUM-1)*PIMULTILEN1 <= PIMULTILEN1
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                ELSE
                  PIRESULTMSG := SUBSTR(PIMESSAGE,(PIPKNUM-1)*PIMULTILEN1+1, PIMULTILEN1);
                  PITMPMSGID := PIPTMSGID_P+(PIPKNUM-1)*17179869184;
                END IF; --END IF OF IF PIPKNUM = PIPKTOTAL
                ICOUNT:=0;
                SELECT COUNT(PTMSGID) INTO ICOUNT FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID;
                IF ICOUNT<1 THEN
                  INSERT INTO TMP_MTTASK("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
                  RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
                  UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE)
                  VALUES(PIUID,PIUSERID,PISPGATE,PICPNO,PIRESULTPHONE,PITMPMSGID,PIRESULTMSG,PISENDSTATUS,
                  PIRETFLAG,PIPKNUM,PIPKTOTAL,PIRECVMTTIME_P,PIECID,PIFEEFLAG,PISENDLEVEL,PITASKID,PIERCODE,PITPUDHI,PILONGMSGSEQ,
                  PIMSGFMT,PIUNICOM,PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE);
                END IF;--END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID)
                PIPKNUM := PIPKNUM+1;
              END LOOP;-- END WHILE OF WHILE PIPKNUM <= PIPKTOTAL
            END IF;--END IF OF IF PIPKTOTAL = 2 AND PILEN <= PIMULTILEN1
          END  IF;--END IF OF IF PIPKTOTAL = 1
        END IF; --END IF OF IF NOT EXISTS(SELECT PTMSGID FROM GW_MT_TASK_BAK WHERE PTMSGID = PITMPMSGID)
        PIPTMSGID_P := PIPTMSGID_P+1;
      END  IF; --END IF OF IF PILOCATION > 0
    END LOOP; --END WHILE OF WHILE PILOCATION <> 0
      INSERT INTO GW_MT_TASK_BAK ("UID",USERID,SPGATE,CPNO,PHONE,PTMSGID,MESSAGE,SENDSTATUS,
      RETFLAG,PKNUMBER,PKTOTAL,RECVMTTIME,ECID,FEEFLAG,SENDLEVEL,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,
      UNICOM,MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      SELECT A."UID",A.USERID,A.SPGATE,A.CPNO,A.PHONE,A.PTMSGID,NVL(A.MESSAGE,' '),A.SENDSTATUS,A.RETFLAG,
      A.PKNUMBER,A.PKTOTAL,A.RECVMTTIME,A.ECID,A.FEEFLAG,A.SENDLEVEL,A.TASKID,A.ERRORCODE,A.TPUDHI,A.LONGMSGSEQ,A.MSGFMT,A.UNICOM,
      A.MOBILEAREA,A.SVRTYPE,A.P1,A.P2,A.P3,A.P4,A.USERMSGID,A.MODULEID,A.ATTIME,A.VALIDTIME,A.SENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA FROM TMP_MTTASK A;
      COMMIT;
   END IF; --END IF OF IF PIPKTOTAL >= 1
END IF; --END IF OF IF PIPHONECOUNT = 1 --单发
END;
/

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'PUSHCONFIG' AS "PARAMITEM",4000 AS "GWTYPE" FROM  DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT (PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,
DEFAULTVALUE,  CONTROLTYPE, GWTYPE, HKPARAMNAME, HKPARAMMEMO, ENPARAMNAME, ENPARAMMEMO)
VALUES('PUSHCONFIG', '推送字段是否为JSON数组',  '推送字段是否为JSON数组(0:字符串,1:JSON数组)',
1, '0,1','0',1,4000,'推送字段是否為JSON數組','推送字段是否為JSON數組(0:字符串,1:JSON數組)','Whether the push field is a JSON array','Whether the push field is a JSON array (0: string, 1: JSON array)');

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'PUSHCONFIG','0' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='PUSHCONFIG'  AND  GWTYPE=4000) AND  GWTYPE=4000;

commit;
/

CREATE OR REPLACE PROCEDURE GW_LOAD_ECERRCODEBIND
 (
  OUT_CURSOR OUT SYS_REFCURSOR
 )
AS
BEGIN
  OPEN OUT_CURSOR FOR
  SELECT CORP_CODE,STATE_CODE,MAPPING_CODE,STATE_DES  FROM LF_STATECODE;
END;
/

-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.06.07';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.06.07',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/
/*网关升级脚本 V4.06.06-V4.06.07 END*/

/*网关升级脚本 V4.06.07-V4.06.08 START*/
--PROMPT
--PROMPT CREATING PROCEDURE GW_WR_MTTASKBAKV3
--PROMPT =============================== 
--PROMPT
CREATE OR REPLACE PROCEDURE GW_WR_MTTASKBAKV3
 (
    PIUID         IN GW_MT_TASK_BAK."UID"%TYPE,
    PIPTMSGID     IN GW_MT_TASK_BAK.PTMSGID%TYPE,
    PIECID        IN GW_MT_TASK_BAK.ECID%TYPE,
    PISENDSTATUS  IN GW_MT_TASK_BAK.SENDSTATUS%TYPE,
    PIRETFLAG     IN GW_MT_TASK_BAK.RETFLAG%TYPE,
    PIPKNUMBER    IN GW_MT_TASK_BAK.PKNUMBER%TYPE,
    PIPKTOTAL     IN GW_MT_TASK_BAK.PKTOTAL%TYPE,
    PIFEEFLAG     IN GW_MT_TASK_BAK.FEEFLAG%TYPE,
    PISENDLEVEL   IN GW_MT_TASK_BAK.SENDLEVEL%TYPE,
    PIRECVMTTIME  IN GW_MT_TASK_BAK.RECVMTTIME%TYPE,
    PIUSERID      IN GW_MT_TASK_BAK.USERID%TYPE,
    PISPGATE      IN GW_MT_TASK_BAK.SPGATE%TYPE,
    PICPNO        IN GW_MT_TASK_BAK.CPNO%TYPE,
    PIPHONE       IN GW_MT_TASK_BAK.PHONE%TYPE,
    PIMESSAGE     IN GW_MT_TASK_BAK.MESSAGE%TYPE,
    PITASKID      IN GW_MT_TASK_BAK.TASKID%TYPE,
    PIERRORCODE   IN GW_MT_TASK_BAK.ERRORCODE%TYPE,
    PITPUDHI      IN GW_MT_TASK_BAK.TPUDHI%TYPE,
    PILONGMSGSEQ  IN GW_MT_TASK_BAK.LONGMSGSEQ%TYPE,
    PIMSGFMT      IN GW_MT_TASK_BAK.MSGFMT%TYPE,
    PIUNICOM      IN GW_MT_TASK_BAK.UNICOM%TYPE,
    PIMOBILEAREA  IN GW_MT_TASK_BAK.MOBILEAREA%TYPE,
    PISVRTYPE     IN GW_MT_TASK_BAK.SVRTYPE%TYPE,
    PIP1          IN GW_MT_TASK_BAK.P1%TYPE,
    PIP2          IN GW_MT_TASK_BAK.P2%TYPE,
    PIP3          IN GW_MT_TASK_BAK.P3%TYPE,
    PIP4          IN GW_MT_TASK_BAK.P4%TYPE,
    PIUSERMSGID   IN GW_MT_TASK_BAK.USERMSGID%TYPE,
    PIMODULEID    IN GW_MT_TASK_BAK.MODULEID%TYPE,
    PIATTIME      IN GW_MT_TASK_BAK.ATTIME%TYPE,
    PIVALIDTIME   IN GW_MT_TASK_BAK.VALIDTIME%TYPE,
    PISENDTYPE    IN GW_MT_TASK_BAK.SENDTYPE%TYPE,
    PIBATCHID     IN GW_MT_TASK_BAK.BATCHID%TYPE,
    PIAREACODE    IN GW_MT_TASK_BAK.AREACODE%TYPE,
    PICUSTID     IN GW_MT_TASK_BAK.CUSTID%TYPE,
    PIEXDATA    IN GW_MT_TASK_BAK.EXDATA%TYPE,
	PISUID1    IN GW_MT_TASK_BAK.SUID1%TYPE,
	PILUID1    IN GW_MT_TASK_BAK.LUID1%TYPE,
	PILONGMSG 	  IN GW_MT_TASK_BAK.LONGMSG%TYPE,
    PITMPLID 	  IN GW_MT_TASK_BAK.TMPLID %TYPE,
    PICHGRADE     IN GW_MT_TASK_BAK.CHGRADE%TYPE,
    PIMSGTYPE     IN GW_MT_TASK_BAK.MSGTYPE%TYPE,
    PIRMSVALIDTM  IN GW_MT_TASK_BAK.RMSVALIDTM%TYPE,
    PIRMSRPTFLAG  IN GW_MT_TASK_BAK.RMSRPTFLAG%TYPE,
    PIPROTOCOLVER IN GW_MT_TASK_BAK.PROTOCOLVER%TYPE,
    PITMPLTYPE    IN GW_MT_TASK_BAK.TMPLTYPE%TYPE,
    PITITLE 	  IN GW_MT_TASK_BAK.TITLE%TYPE,
    PISHOWAY      IN GW_MT_TASK_BAK.SHOWAY%TYPE,
    PIDLDWAY 	  IN GW_MT_TASK_BAK.DLDWAY%TYPE,
    PIDLDNEY 	  IN GW_MT_TASK_BAK.DLDNEY%TYPE,
    PIISFREE 	  IN GW_MT_TASK_BAK.ISFREE%TYPE,
    PISHOWTIME 	  IN GW_MT_TASK_BAK.SHOWTIME%TYPE
 )
AS
  PICNT NUMBER;
  BEGIN
    SELECT COUNT(ID) INTO PICNT FROM GW_MT_TASK_BAK WHERE PTMSGID=PIPTMSGID;
  IF PICNT=0 THEN	---不存在则往GW_MT_TASK_BAK表里插入数据
    INSERT INTO GW_MT_TASK_BAK("UID",PTMSGID,ECID,SENDSTATUS,RETFLAG,PKNUMBER,PKTOTAL,FEEFLAG,SENDLEVEL,
    RECVMTTIME,USERID,SPGATE,CPNO,PHONE,MESSAGE,TASKID,ERRORCODE,TPUDHI,LONGMSGSEQ,MSGFMT,UNICOM,
    MOBILEAREA,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA,SUID1,LUID1,
	LONGMSG,TMPLID,CHGRADE,MSGTYPE,RMSVALIDTM,RMSRPTFLAG,PROTOCOLVER,TMPLTYPE,TITLE,SHOWAY,DLDWAY,DLDNEY,ISFREE,SHOWTIME)
    VALUES(PIUID,PIPTMSGID,PIECID,PISENDSTATUS,PIRETFLAG,PIPKNUMBER,PIPKTOTAL,PIFEEFLAG,PISENDLEVEL,PIRECVMTTIME,
    PIUSERID,PISPGATE,PICPNO,PIPHONE,PIMESSAGE,PITASKID,PIERRORCODE,PITPUDHI,PILONGMSGSEQ,PIMSGFMT,PIUNICOM,
    PIMOBILEAREA,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA,PISUID1,PILUID1,
	PILONGMSG,PITMPLID,PICHGRADE,PIMSGTYPE,PIRMSVALIDTM,PIRMSRPTFLAG,PIPROTOCOLVER,PITMPLTYPE,PITITLE,PISHOWAY,PIDLDWAY,PIDLDNEY,PIISFREE,PISHOWTIME);
  END IF;
END;
/

-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.06.08';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.06.08',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/
/*网关升级脚本 V4.06.07-V4.06.08 END*/


--增加版本信息--
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
    VERSIONSTR:='7.3.9.645.SP9';
    DBVERSIONSTR:='73.09';
    WBSVERSIONSTR:='8.6.5.220';
    SPGATEVERSIONSTR:='6.1.53.345';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;

  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1.修复由于百分号转义产生的内容错误问题;<br>2.修复 客服短信-》客户群组群发-》：发送内容输入半角单引号，提交发送之后在群发任务查看内容没有单引号 的问题;<br>3.修复 移动客服-》客户群组群发-》：发送特殊字符，会缺失或替换 的问题；<br>4.修复 参数内容包含中文，在群发任务查看发出的内容是乱码 的问题；<br>5.修复fastjson漏洞；<br>6.修复 操作员在绑定接入账号后，在SP账号统计报表查询不到接入账号数据 的问题；<br>7.解决客户群组群发''''\''字符串转成\的问题；<br>8.解决发送人民币符号变问号的问题。');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1.修复由于百分号转义产生的内容错误问题;<br>2.修复 客服短信-》客户群组群发-》：发送内容输入半角单引号，提交发送之后在群发任务查看内容没有单引号 的问题;<br>3.修复 移动客服-》客户群组群发-》：发送特殊字符，会缺失或替换 的问题；<br>4.修复 参数内容包含中文，在群发任务查看发出的内容是乱码 的问题；<br>5.修复fastjson漏洞；<br>6.修复 操作员在绑定接入账号后，在SP账号统计报表查询不到接入账号数据 的问题；<br>7.解决客户群组群发''''\''字符串转成\的问题；<br>8.解决发送人民币符号变问号的问题。' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;

  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;

  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'WEB更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/

--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
