--------------------V6.20-V6.21START------------------
BEGIN ATOMIC 
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.21';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;


/*网关升级脚本(V4.04.06-V4.05.02) START*/

CREATE PROCEDURE "DELPROC"(IN "PROCNAME1" VARCHAR(20)) 
  begin
DECLARE STR VARCHAR (256);
DECLARE STR1 VARCHAR (256);
SELECT PROCNAME INTO STR1 FROM SYSCAT.PROCEDURES WHERE  PROCNAME=PROCNAME1;
if  STR1 is not null THEN
  SET STR ='DROP PROCEDURE '||PROCNAME1; 
  execute immediate str ; 
end if; 
end;



CALL DELPROC('ADDCOLUMN');
CREATE PROCEDURE ADDCOLUMN (TABLENAME VARCHAR(20),COLUMNNAME VARCHAR(20),COLUMNTYPE VARCHAR(256 ))
BEGIN
DECLARE STR VARCHAR (256);
IF NOT EXISTS ( SELECT * FROM SYSIBM.SYSCOLUMNS WHERE NAME=COLUMNNAME AND TBNAME=TABLENAME ) THEN
  SET STR ='ALTER TABLE ' ||TABLENAME||' ADD COLUMN ' ||COLUMNNAME||'  '|| COLUMNTYPE; 
  EXECUTE IMMEDIATE STR ;
  SET STR = 'REORG TABLE '||TABLENAME ;
  CALL SYSPROC .ADMIN_CMD(STR);
END IF; 
END; 


CALL ADDCOLUMN('GW_USERPROPERTY','CACERTNAME','VARCHAR(256)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('GW_USERPROPERTY','VERIFYPEER','SMALLINT      NOT NULL  DEFAULT 1');
CALL ADDCOLUMN('GW_USERPROPERTY','VERIFYHOST','SMALLINT      NOT NULL  DEFAULT 1');
    
CALL ADDCOLUMN('MT_LEVEL1_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL1_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL1_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL1_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );
    
CALL ADDCOLUMN('MT_LEVEL2_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL2_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL2_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL2_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );
    
CALL ADDCOLUMN('MT_LEVEL3_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL3_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL3_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL3_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );
   
CALL ADDCOLUMN('MT_LEVEL4_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL4_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL4_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL4_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );
  
CALL ADDCOLUMN('MT_LEVEL5_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL5_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL5_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL5_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );
   
CALL ADDCOLUMN('MT_LEVEL6_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL6_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL6_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL6_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );
   
CALL ADDCOLUMN('MT_LEVEL7_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL7_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL7_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL7_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );
     
CALL ADDCOLUMN('MT_LEVEL8_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL8_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL8_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL8_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );
     
CALL ADDCOLUMN('MT_LEVEL9_QUEUE','CUSTID','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL9_QUEUE','EXDATA','VARCHAR(64)     NOT NULL  DEFAULT ''''');
CALL ADDCOLUMN('MT_LEVEL9_QUEUE','ATTIME',' BIGINT  NOT NULL DEFAULT ''0''   ' );
CALL ADDCOLUMN('MT_LEVEL9_QUEUE','VALIDTIME',' BIGINT NOT NULL DEFAULT ''0''   ' );



update GW_BASEPARA set ARGNAME='moduleid' where ARGNAME='modulid';

CALL DELPROC('ADDINDEX');
CREATE PROCEDURE ADDINDEX(TABLENAME VARCHAR(20),IDXNAME VARCHAR(100),CLUNAME VARCHAR(100))
begin
DECLARE STR VARCHAR (256);
DECLARE STR1 VARCHAR (256);
SELECT INDNAME INTO STR1 FROM SYSCAT.INDEXES WHERE TABNAME=UPPER(TABLENAME) AND INDNAME=UPPER(IDXNAME);
if  STR1 is  null THEN
  SET STR = ' CREATE  INDEX '||UPPER(IDXNAME)||' ON '||UPPER(TABLENAME)||' ('||UPPER(CLUNAME)||' ASC) PCTFREE 10   ALLOW REVERSE SCANS';
EXECUTE IMMEDIATE STR;
end if; 
END;
CALL ADDINDEX('MT_LEVEL0_QUEUE','IX_MTLVL0_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL1_QUEUE','IX_MTLVL1_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL2_QUEUE','IX_MTLVL2_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL3_QUEUE','IX_MTLVL3_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL4_QUEUE','IX_MTLVL4_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL5_QUEUE','IX_MTLVL5_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL6_QUEUE','IX_MTLVL6_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL7_QUEUE','IX_MTLVL7_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL8_QUEUE','IX_MTLVL8_ATTIME','ATTIME');
CALL ADDINDEX('MT_LEVEL9_QUEUE','IX_MTLVL9_ATTIME','ATTIME');
CALL DELPROC('ADDINDEX');


CALL DELPROC('GW_CTDCMD');
CREATE PROCEDURE GW_CTDCMD()
BEGIN
DECLARE PISQL VARCHAR(6000);
DECLARE PISQL_1 VARCHAR(256);
IF NOT EXISTS (SELECT * FROM SYSIBM.SYSTABLES WHERE TID <> 0 AND NAME = 'GW_TDCMD') THEN
SET PISQL ='CREATE TABLE  "GW_TDCMD" (
  ID INTEGER NOT NULL GENERATED BY DEFAULT
    AS IDENTITY (START WITH 1, INCREMENT BY 1, CACHE 20, MINVALUE 1, MAXVALUE 2147483647, NO CYCLE, NO ORDER),
  TD_CMD VARCHAR(64)  NOT NULL  DEFAULT ''TD'',
  TD_USERID VARCHAR(11) NOT NULL DEFAULT ''000000'',
  TD_SPNUMBER VARCHAR(21) NOT NULL DEFAULT '' '' ,
  TD_ECID INTEGER NOT NULL DEFAULT 0,
  TD_TIMES INTEGER NOT NULL DEFAULT 1,
  MATCHTYPE SMALLINT  NOT NULL DEFAULT 0,
  OPTYPE SMALLINT  NOT NULL DEFAULT 0,
  PB_USERID VARCHAR(11) NOT NULL DEFAULT ''000000'',
  PB_SPNUMBER VARCHAR(11) NOT NULL DEFAULT '' '',
  PB_SVRTYPE VARCHAR(64)  NOT NULL  DEFAULT '' '',
  PB_CROPCODE VARCHAR(64)  NOT NULL  DEFAULT '' '',
  STATUS SMALLINT  NOT NULL DEFAULT 0
)  DATA CAPTURE NONE
 IN "TPACCMGR"';
EXECUTE IMMEDIATE PISQL;

SET PISQL_1 = 'ALTER TABLE "GW_TDCMD"
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE
  LOG INDEX BUILD NULL';
EXECUTE IMMEDIATE PISQL_1;

SET PISQL_1 = 'ALTER TABLE  "GW_TDCMD"
ADD CONSTRAINT "GW_TDCMD_PK" PRIMARY KEY("ID")';
EXECUTE IMMEDIATE PISQL_1;

SET PISQL_1 = 'CREATE  INDEX  "IDX_CUSE"
  ON  "GW_TDCMD"
 ("TD_CMD","TD_USERID","TD_SPNUMBER","TD_ECID"
 )
  CLUSTER
  PCTFREE 10
  DISALLOW REVERSE SCANS';
EXECUTE IMMEDIATE PISQL_1;

END IF;
END;
CALL GW_CTDCMD();
CALL DELPROC('GW_CTDCMD');


CALL DELPROC('GW_CTDCMD_HIS');
CREATE PROCEDURE GW_CTDCMD_HIS()
BEGIN
DECLARE PISQL VARCHAR(6000);
DECLARE PISQL_1 VARCHAR(256);
IF NOT EXISTS (SELECT * FROM SYSIBM.SYSTABLES WHERE TID <> 0 AND NAME = 'GW_TDCMD_HIS') THEN
SET PISQL ='CREATE TABLE  "GW_TDCMD_HIS" (
   ID INTEGER NOT NULL GENERATED BY DEFAULT
    AS IDENTITY (START WITH 1, INCREMENT BY 1, CACHE 20, MINVALUE 1, MAXVALUE 2147483647, NO CYCLE, NO ORDER),
  TD_PHONE  BIGINT NOT NULL DEFAULT 0,
  TD_CMD VARCHAR(64)  NOT NULL  DEFAULT ''TD'',
  TD_USERID VARCHAR(11) NOT NULL DEFAULT ''000000'',
  TD_SPNUMBER VARCHAR(21) NOT NULL DEFAULT '' '' ,
  TD_ECID INTEGER NOT NULL DEFAULT 0,
  OPTYPE SMALLINT NOT NULL DEFAULT 0,
  MO_MSGID BIGINT NOT NULL DEFAULT 0,
  TD_TIME  TIMESTAMP       NOT NULL  DEFAULT CURRENT TIMESTAMP
)  DATA CAPTURE NONE
 IN "TPACCMGR"';
EXECUTE IMMEDIATE PISQL;

SET PISQL_1 = 'ALTER TABLE "GW_TDCMD_HIS"
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE
  LOG INDEX BUILD NULL';
EXECUTE IMMEDIATE PISQL_1;

SET PISQL_1 = 'ALTER TABLE  "GW_TDCMD_HIS"
ADD CONSTRAINT "GW_TDCMD_HIS_PK" PRIMARY KEY("ID")';
EXECUTE IMMEDIATE PISQL_1;

SET PISQL_1 = 'CREATE  INDEX  "IDX_PCUSE"
  ON  "GW_TDCMD_HIS"
 (TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID
 )
  CLUSTER
  PCTFREE 10
  DISALLOW REVERSE SCANS';
EXECUTE IMMEDIATE PISQL_1;

END IF;
END;
CALL GW_CTDCMD_HIS();
CALL DELPROC('GW_CTDCMD_HIS');


INSERT INTO A_PROTOCOLTMPL(PROTOCOLCODE, PROTOCOL, PROTOCOLPARAM)
SELECT 8, 'SMPP3X', 'EXPIREHOUR=24;OUTDBGINFO=3;RETURNMOUDHI=0' FROM SYSIBM.DUAL WHERE NOT EXISTS (SELECT PROTOCOLCODE FROM A_PROTOCOLTMPL WHERE PROTOCOLCODE=8);

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'FILTERB01TDMO' AS "PARAMITEM",4000 AS "GWTYPE" FROM  SYSIBM.DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT(PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('FILTERB01TDMO', '开启上行退订功能',  '是否开启上行回复退订，手机号自动添加黑名单功能 (0不启用、1启用)',1, '0,1','0',1,4000)
ELSE IGNORE;
INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'FILTERB01TDMO','0' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='FILTERB01TDMO' AND  GWTYPE=4000) AND  GWTYPE=4000;

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY01SPDCTRL' AS "PARAMITEM",4000 AS "GWTYPE" FROM  SYSIBM.DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT(PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY01SPDCTRL', '开启查询接口控速',  '对频繁调用获取上行、状态报告、查费接口进行控速(0不启用、1启用)',1, '0,1','1',1,4000);
INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY01SPDCTRL','1' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY01SPDCTRL' AND  GWTYPE=4000) AND  GWTYPE=4000;

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY02FREQ' AS "PARAMITEM",4000 AS "GWTYPE" FROM  SYSIBM.DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT(PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY02FREQ', '允许调用查询接口频率',  '在无数据获取时，允许连续调用查询接口的频率(1-120/秒/次)',1, '1-120','10',0,4000);
INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY02FREQ','10' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY02FREQ' AND  GWTYPE=4000) AND  GWTYPE=4000;

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY03DELAY' AS "PARAMITEM",4000 AS "GWTYPE" FROM  SYSIBM.DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT(PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY03DELAY', '查询延时回应时长',  '当频繁调用查询接口时，网关对查询回应延时回应(1-120/秒)',1, '1-120','30',0,4000);
INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY03DELAY','30' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY03DELAY' AND  GWTYPE=4000) AND  GWTYPE=4000;


CALL DELPROC('GW_GETURLBINDV1');
CREATE PROCEDURE "GW_GETURLBINDV1" 
(
	IN PIUID INTEGER,--=0,
    IN PISPTYPE INTEGER--=1
	)
SPECIFIC "GW_GETURLBINDV1"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN
 IF PISPTYPE IS NULL THEN
 SET PISPTYPE=1;
 END IF;
 
 IF PIUID IS NULL THEN
 SET PIUID=0;
 END IF;
 
	IF PIUID=0 THEN
	P1:BEGIN
	DECLARE RS1 CURSOR WITH RETURN FOR
		SELECT UD.UID,UD.USERID,UD.USERPASSWORD AS PWD,UD.MTURL,
		CASE WHEN(VALUE(UD.MOURL,'')<>'' AND UD.TRANSMOTYPE=2) THEN UD.MOURL ELSE '' END AS MOURL, 
		CASE WHEN(VALUE(UD.RPTURL,'')<>'' AND UD.TRANSRPTYPE=2) THEN UD.RPTURL ELSE '' END AS RPTURL,
		GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,
		GU.PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT,UD.PUSHVERSION,GU.CACERTNAME,GU.VERIFYPEER,GU.VERIFYHOST 
		FROM USERDATA UD INNER JOIN 	GW_USERPROPERTY GU ON GU.USERID=UD.USERID
		WHERE UD.USERTYPE=0 AND UD.STATUS=0 
		AND ((VALUE(UD.MOURL,'')<>'' AND UD.TRANSMOTYPE=2) OR (VALUE(UD.RPTURL,'')<>'' AND UD.TRANSRPTYPE=2)) 
		AND UD.ACCOUNTTYPE=PISPTYPE ORDER BY UD.UID;
		OPEN RS1;
	END P1;
	ELSE 
	P2:BEGIN
	DECLARE RS2 CURSOR WITH RETURN FOR
		SELECT UD.UID,UD.USERID,UD.USERPASSWORD AS PWD,UD.MTURL,
		CASE WHEN(VALUE(UD.MOURL,'')<>'' AND UD.TRANSMOTYPE=2) THEN UD.MOURL ELSE '' END AS MOURL, 
		CASE WHEN(VALUE(UD.RPTURL,'')<>'' AND UD.TRANSRPTYPE=2) THEN UD.RPTURL ELSE '' END AS RPTURL,
		GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,
		GU.PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT,UD.PUSHVERSION,GU.CACERTNAME,GU.VERIFYPEER,GU.VERIFYHOST 
		FROM USERDATA UD INNER JOIN 	GW_USERPROPERTY GU ON GU.USERID=UD.USERID
		WHERE UD.UID=PIUID AND UD.USERTYPE=0 AND UD.STATUS=0 
		AND ((VALUE(UD.MOURL,'')<>'' AND UD.TRANSMOTYPE=2) OR (VALUE(UD.RPTURL,'')<>'' AND UD.TRANSRPTYPE=2))
		AND UD.ACCOUNTTYPE=PISPTYPE ORDER BY UD.UID;
	OPEN RS2;
	END P2;
	END IF;
END;


CALL DELPROC('GW_LOADTDCMD');
CREATE PROCEDURE "GW_LOADTDCMD"
 (IN "PIMAXID" BIGINT, 
  IN "PIMAXCOLNUM" INTEGER
 ) 
  SPECIFIC "GW_LOADTDCMD"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
  BEGIN  
	DECLARE PISQLSTR VARCHAR(3000);
	DECLARE RS1 CURSOR WITH RETURN FOR S1; 
	SET PISQLSTR = 'SELECT ID,TD_CMD,MATCHTYPE FROM GW_TDCMD '||'WHERE ID>'||CAST(PIMAXID AS CHAR(12))||' ORDER BY ID ASC FETCH FIRST '||CAST(PIMAXCOLNUM AS CHAR(12))||' ROW ONLY';
	PREPARE S1 FROM PISQLSTR;
	OPEN RS1;	
END;


CALL DELPROC('GW_ADDPBLISTBLACK');
CREATE PROCEDURE "GW_ADDPBLISTBLACK"(
IN PIPHONE BIGINT,         
IN PITDCMD VARCHAR(64),    
IN PIUSERID VARCHAR(11),   
IN PISPNUMBER VARCHAR(21), 
IN PISVRTYPE VARCHAR(64),  
IN PIECID INTEGER,         
IN PIMOMSGID BIGINT)       
 SPECIFIC "GW_ADDPBLISTBLACK"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN
DECLARE PIOPTYPE SMALLINT;      
DECLARE PIPBUSERID VARCHAR(11);
DECLARE PIPBSPNUMBER VARCHAR(21);
DECLARE PIPBSVRTYPE VARCHAR(64);
DECLARE PIPBCROPCODE VARCHAR(64);


	
	--表的策略信息决定是否需要添加黑名单
       IF EXISTS (SELECT * FROM GW_TDCMD WHERE TD_CMD=PITDCMD AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE TD_SPNUMBER||'%')) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0) THEN      
		    SELECT OPTYPE,PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE INTO PIOPTYPE,PIPBUSERID,PIPBSPNUMBER,PIPBSVRTYPE,PIPBCROPCODE FROM GW_TDCMD  WHERE TD_CMD=PITDCMD AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE TD_SPNUMBER||'%')) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0 FETCH FIRST 1 ROW ONLY;
            	
		 --PB_LIST_BLACK表中是否已经存在对应的黑名单数据
		IF NOT EXISTS(SELECT * FROM PB_LIST_BLACK WHERE USERID=PIPBUSERID AND SPGATE='' AND SPNUMBER=PIPBSPNUMBER AND PHONE=PIPHONE AND SVRTYPE=PIPBSVRTYPE AND CORPCODE=PIPBCROPCODE) THEN
		   INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
		          VALUES(PIPBUSERID,'',PIPBSPNUMBER,PIPHONE,PIOPTYPE,CURRENT TIMESTAMP,'',PIPBSVRTYPE,0,PIPBCROPCODE,1);
		   INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
		          VALUES(PIPHONE,PITDCMD,PIUSERID,PISPNUMBER,PIECID,PIOPTYPE,PIMOMSGID,CURRENT TIMESTAMP);
                END IF;	
  

        END IF;	
END;



CALL DELPROC('GW_RD_MTLVLQUEV1');
CREATE PROCEDURE "GW_RD_MTLVLQUEV1"
 (IN "PIDESTUID" INTEGER, 
  IN "PISENDLEVEL" INTEGER, 
  IN "PIMAXREADCNT" INTEGER, 
  IN "PISTRUID" VARCHAR(4000), 
  IN "PICURTIME" BIGINT,
  IN P_TABLENO INTEGER
 ) 
  SPECIFIC "GW_RD_MTLVLQUEV1"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
  BEGIN  
	DECLARE PISQLSTR VARCHAR(6000);
	DECLARE P_TABNAME VARCHAR(6000);
	DECLARE RS1 CURSOR WITH RETURN FOR S1; 
	
	 IF  P_TABLENO>=0  AND   P_TABLENO<=9 THEN 
	   SET P_TABNAME='MT_LEVEL'||CAST(P_TABLENO AS CHAR(1))||'_QUEUE';
	 ELSE
	   SET P_TABNAME='MT_LEVEL0_QUEUE';
	 END IF;
	 
	SET PISQLSTR = 'SELECT ID,UID,DESTUID,LOGINUID,ECID,TASKID,FEEFLAG,USERID,SPGATE,CPNO,PHONE,PTMSGID,RETFLAG,TPUDHI,PKNUMBER,PKTOTAL,SENDSTATUS,PHONECOUNT,SPLITFLAG,SENDLEVEL,LONGMSGSEQ,MSGFMT,MESSAGE,SENDTIME AS RECVMTTIME,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA FROM '||P_TABNAME||' WHERE DESTUID='||
		CAST(PIDESTUID AS CHAR(12))||' AND UID NOT IN ('||PISTRUID||')AND SENDLEVEL='||CAST(PISENDLEVEL AS CHAR(12))||' AND (ATTIME<='||CAST(PICURTIME AS CHAR(20))||' OR ATTIME<0) FETCH FIRST '||CAST(PIMAXREADCNT AS CHAR(12))||' ROW ONLY';   
	PREPARE S1 FROM PISQLSTR;
	OPEN RS1;	
END;



CALL DELPROC('S_STATREMAIN');
CREATE PROCEDURE "S_STATREMAIN"
 (IN "PIPICMD" INTEGER
 ) 
  SPECIFIC "S_STATREMAIN"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
  BEGIN  
	DECLARE PISQLSTR VARCHAR(6000);
	DECLARE RS1 CURSOR WITH RETURN FOR S1;
	
	IF PIPICMD=100 THEN
  --汇总MT_LEVEL0_QUEUE中各帐号数据
    --前端滞留
  SET PISQLSTR = 'SELECT UID, SENDLEVEL AS LEVEL, SUM(TOTALCOUNT) AS REMAINEDNUM FROM (SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL0_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL1_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL2_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL3_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL4_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL5_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL6_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL7_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL8_QUEUE WHERE UID>0
UNION ALL SELECT UID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL9_QUEUE WHERE UID>0) GROUP BY UID,SENDLEVEL';
    --后端滞留
  ELSEIF PIPICMD=110 THEN
    SET PISQLSTR = 'SELECT DESTUID AS UID,SENDLEVEL AS LEVEL,SUM(TOTALCOUNT) AS REMAINEDNUM  FROM (SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL0_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL1_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL2_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL3_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL4_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL5_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL6_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL7_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL8_QUEUE WHERE DESTUID>0
UNION ALL SELECT DESTUID,SENDLEVEL,TOTALCOUNT FROM MT_LEVEL9_QUEUE WHERE DESTUID>0) GROUP BY DESTUID,SENDLEVEL';
 
  --汇总MT_TIMER_QUEUE中各帐号数据
    --前端滞留
  ELSEIF PIPICMD=200 THEN
    SET PISQLSTR = 'SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS LEVEL, UID FROM MT_TIMER_QUEUE WHERE UID>0 GROUP BY UID,SENDLEVEL';
  --后端滞留
  ELSEIF PIPICMD=210 THEN
    SET PISQLSTR = 'SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS LEVEL, DESTUID AS UID FROM MT_TIMER_QUEUE WHERE DESTUID>0 GROUP BY DESTUID,SENDLEVEL';

  --汇总MO_TASK中各帐号数据
    --前端滞留
  ELSEIF PIPICMD=300 THEN
   SET PISQLSTR = 'SELECT COUNT(UID) AS REMAINEDNUM, 0 AS LEVEL, UID FROM MO_TASK WHERE SENDSTATUS=1 AND UID>0 AND ORGUID>0 GROUP BY UID';
    --后端滞留
  ELSEIF PIPICMD=310 THEN
   SET PISQLSTR = 'SELECT COUNT(UID) AS REMAINEDNUM, 0 AS LEVEL, ORGUID AS UID FROM MO_TASK WHERE SENDSTATUS=1 AND ORGUID>0 GROUP BY ORGUID';

  --汇总RPT_WAIT_B中各帐号数据
    --前端滞留
  ELSEIF PIPICMD=401 THEN
   SET PISQLSTR = 'SELECT COUNT(UID) AS REMAINEDNUM, 1 AS LEVEL, UID FROM RPT_WAIT_B WHERE UID>0 AND ORGUID>0 GROUP BY UID';
    --后端滞留
  ELSEIF PIPICMD=411 THEN
   SET PISQLSTR = 'SELECT COUNT(UID) AS REMAINEDNUM, 1 AS LEVEL, ORGUID AS UID FROM RPT_WAIT_B WHERE ORGUID>0 GROUP BY ORGUID';
   
   --CMD 501统计MT_WAIT_A
  ELSEIF PIPICMD=501 THEN
    SET PISQLSTR = 'SELECT SUM(TOTALCOUNT) AS REMAINEDNUM,0 AS LEVEL,  USERUID AS UID FROM MT_WAIT_A WHERE USERUID>0 GROUP BY USERUID';
   
   --502统计BATCH_MT_REQ(统计滞留为TOTALNUM-SENDNUM)
  ELSEIF PIPICMD=502 THEN
    SET PISQLSTR = 'SELECT SUM(TOTALNUM-SENDNUM) AS REMAINEDNUM,0 AS LEVEL,  USERUID AS UID FROM BATCH_MT_REQ WHERE USERUID>0 GROUP BY USERUID';
 ELSE    
		   SET PISQLSTR = 'SELECT 0 AS REMAINEDNUM, 0 AS LEVEL, 0 AS UID ';
 END IF; 
	
	PREPARE S1 FROM PISQLSTR;
	OPEN RS1;
END;

CALL DELPROC('GW_WR_MTLVLQUEV2');
CREATE PROCEDURE "GW_WR_MTLVLQUEV2"
 (IN "PIUID" INTEGER, 
  IN "PIPTMSGID" BIGINT, 
  IN "PIRETFLAG" SMALLINT, 
  IN "PIPKTOTAL" SMALLINT, 
  IN "PIPHONECOUNT" INTEGER, 
  IN "PISENDSTATUS" SMALLINT, 
  IN "PISPLITFLAG" SMALLINT, 
  IN "PIECID" INTEGER, 
  IN "PIUSERID" VARCHAR(11), 
  IN "PISPGATE" VARCHAR(21), 
  IN "PICPNO" VARCHAR(21), 
  IN "PIRECVMTTIME" TIMESTAMP, 
  IN "PIPHONE" VARCHAR(3500), 
  IN "PIMESSAGE" VARCHAR(3000), 
  IN "PIFEEFLAG" SMALLINT, 
  IN "PIDESTUID" INTEGER, 
  IN "PILOGINUID" INTEGER, 
  IN "PIPKNUMBER" SMALLINT, 
  IN "PISENDLEVEL" SMALLINT, 
  IN "PITPUDHI" SMALLINT, 
  IN "PITASKID" INTEGER, 
  IN "PILONGMSGSEQ" SMALLINT, 
  IN "PIMSGFMT" SMALLINT, 
  IN "PITOTALCOUNT" INTEGER, 
  IN "PISVRTYPE" VARCHAR(64), 
  IN "PIP1" VARCHAR(64), 
  IN "PIP2" VARCHAR(64), 
  IN "PIP3" VARCHAR(64), 
  IN "PIP4" VARCHAR(64), 
  IN "PIUSERMSGID" BIGINT, 
  IN "PIMODULEID" INTEGER, 
  IN "PIATTIME" BIGINT, 
  IN "PIVALIDTIME" BIGINT,
  IN "PISENDTYPE" INTEGER,
  IN "PIBATCHID" BIGINT,
  IN "PIAREACODE" INTEGER,
  IN PICUSTID VARCHAR(64), 
  IN PIEXDATA VARCHAR(64),
  IN P_TABLENO INTEGER
 ) 
  SPECIFIC "GW_WR_MTLVLQUEV2"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
  BEGIN 
  
     DECLARE PISQLSTR VARCHAR(4000);
     DECLARE P_TABNAME VARCHAR(20);
     DECLARE P_ISEXISTS INTEGER;
     IF  P_TABLENO>=0  AND  P_TABLENO<=9 THEN 
	   SET P_TABNAME='MT_LEVEL'||CAST(P_TABLENO AS CHAR(1))||'_QUEUE';
	 ELSE
	   SET P_TABNAME='MT_LEVEL0_QUEUE';
	 END IF;
	 
	 DECLARE GLOBAL TEMPORARY TABLE SESSION.TMPTB_RDMTLEVEL(ISEXISTS INTEGER)ON COMMIT DELETE ROWS NOT LOGGED WITH REPLACE;
            SET PISQLSTR='INSERT INTO SESSION.TMPTB_RDMTLEVEL(ISEXISTS) SELECT COUNT(*) FROM  '||P_TABNAME||' WHERE PTMSGID='||CHAR(PIPTMSGID);
            EXECUTE IMMEDIATE PISQLSTR;
	    SELECT ISEXISTS INTO P_ISEXISTS  FROM SESSION.TMPTB_RDMTLEVEL;
	   
	IF P_ISEXISTS=0 THEN
	    SET PISQLSTR= 'INSERT INTO '||P_TABNAME||'(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
	   		  PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
			  TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
	      VALUES('||PIUID||','''||PIUSERID||''','''||PISPGATE||''','''||PICPNO||''','''|| PIPHONE||''',' || PIPTMSGID||','''|| PIMESSAGE||''','||PIRETFLAG||','||PIPKTOTAL||','||PITOTALCOUNT||','||
	       PIPHONECOUNT||','''||PIRECVMTTIME||''','||PISENDSTATUS||','||PISPLITFLAG||','||PIECID||','||PIFEEFLAG||','||PIDESTUID||','||PILOGINUID||','||PIPKNUMBER||','||
	       PITPUDHI||','||PISENDLEVEL||','||PITASKID||','||PILONGMSGSEQ||','||PIMSGFMT||','''||PISVRTYPE||''','''||PIP1||''','''||PIP2||''','''||PIP3||''','''||PIP4||''','||PIUSERMSGID||','||PIMODULEID||','||PIATTIME||','||PIVALIDTIME||','||PISENDTYPE||','||PIBATCHID||','||PIAREACODE||','''||PICUSTID||''','''||PIEXDATA||''')'; 
	  EXECUTE IMMEDIATE PISQLSTR;
	END IF;
END;

DELETE FROM GW_BASEPARA WHERE ID BETWEEN 259 AND 264;
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(259,'RPT',1,'rptreq',3600,'状态报告主动推送',1); 
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(260,'RPT',2,'rptrsp',3600,'rptrsp',1); 
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(261,'RPT',3,'rptrsp',3600,'rptrsp',1); 

INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(262,'MO',1,'moreq',64,'XML中moreq描述',1);  
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(263,'MO',2,'morsp',64,'morsp',1);  
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(264,'MO',3,'morsp',64,'morsp',1); 

DELETE FROM GW_BASEPARA WHERE ID BETWEEN 265 AND 266;
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(265,'RPT',1,'rpt',3600,'rpt',1); 
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(266,'MO',1,'mo',64,'mo',1); 

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY04TIMES' AS "PARAMITEM",4000 AS "GWTYPE" FROM  SYSIBM.DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT(PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY04TIMES', '频繁调用次数',  '连续频繁调用次数超过设置值后开启延时回应 (1-100次，默认10次)',2, '1-100','10',0,4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY04TIMES','10' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY04TIMES' AND  GWTYPE=4000) AND  GWTYPE=4000;


UPDATE A_GWPARAMCONF SET PARAMMEMO='对频繁调用获取上行、状态报告接口进行控速(0不启用、1启用)' WHERE PARAMITEM='QUERY01SPDCTRL' AND GWTYPE=4000;
UPDATE A_GWPARAMCONF SET PARAMMEMO='在无数据获取时，允许连续调用查询接口的频率(1-120/秒/次，默认3秒)',DEFAULTVALUE='3' WHERE PARAMITEM='QUERY02FREQ' AND GWTYPE=4000;
UPDATE A_GWPARAMVALUE SET PARAMVALUE=3 WHERE  GWTYPE=4000 AND PARAMITEM='QUERY02FREQ';
UPDATE A_GWPARAMCONF SET PARAMMEMO='当频繁调用查询接口时，网关对查询回应延时回应(1-120/秒)，默认5秒',DEFAULTVALUE='5' WHERE PARAMITEM='QUERY03DELAY' AND GWTYPE=4000;
UPDATE A_GWPARAMVALUE SET PARAMVALUE=5 WHERE  GWTYPE=4000 AND PARAMITEM='QUERY03DELAY';

UPDATE A_GWPARAMCONF SET PARAMMEMO='运营商协议，CMPP-移动,SGIP-联通,SMGP-电信,SMPP-国际协议',DEFAULTVALUE='1-0-0-0',VALUERANGE='CMPP,SMGP,SGIP,SMPP' WHERE PARAMITEM='STARTSVRPROTOCOL' AND GWTYPE=4000;


DROP PROCEDURE "DELPROC";

BEGIN ATOMIC 
DECLARE PIVERSION VARCHAR(32);
SET PIVERSION = '4.05.01';
IF NOT EXISTS (SELECT VERSION FROM VERSION_CMPP WHERE VERSION = PIVERSION) THEN
INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
VALUES (PIVERSION,CURRENT DATE,(TRIM(CHAR(YEAR(CURRENT TIMESTAMP)))||'-'|| (CASE MONTH(CURRENT TIMESTAMP) WHEN 
1 THEN '01' WHEN 2 THEN '02' WHEN 3 THEN '03' WHEN 4 THEN '04' WHEN 5 THEN '05' WHEN 6 THEN '06'WHEN 7 THEN '07' WHEN 8 THEN '08' WHEN 9 THEN '09'   ELSE   
TRIM(CHAR(MONTH(CURRENT TIMESTAMP))) END)||'-'||TRIM(CHAR(DAY(CURRENT TIMESTAMP)))||' '||TRIM(CHAR(HOUR(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(MINUTE(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(SECOND(CURRENT TIMESTAMP)))));
END IF;
END ;


MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY04TIMES' AS "PARAMITEM",4000 AS "GWTYPE" FROM  SYSIBM.DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT(PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY04TIMES', '频繁调用次数',  '连续频繁调用次数超过设置值后开启延时回应 (1-100次，默认10次)',2, '1-100','10',0,4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY04TIMES','10' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY04TIMES' AND  GWTYPE=4000) AND  GWTYPE=4000;


UPDATE A_GWPARAMCONF SET PARAMMEMO='对频繁调用获取上行、状态报告接口进行控速(0不启用、1启用)' WHERE PARAMITEM='QUERY01SPDCTRL' AND GWTYPE=4000;
UPDATE A_GWPARAMCONF SET PARAMMEMO='在无数据获取时，允许连续调用查询接口的频率(1-120/秒/次，默认3秒)',DEFAULTVALUE='3' WHERE PARAMITEM='QUERY02FREQ' AND GWTYPE=4000;
UPDATE A_GWPARAMVALUE SET PARAMVALUE=3 WHERE  GWTYPE=4000 AND PARAMITEM='QUERY02FREQ';
UPDATE A_GWPARAMCONF SET PARAMMEMO='当频繁调用查询接口时，网关对查询回应延时回应(1-120/秒)，默认5秒',DEFAULTVALUE='5' WHERE PARAMITEM='QUERY03DELAY' AND GWTYPE=4000;
UPDATE A_GWPARAMVALUE SET PARAMVALUE=5 WHERE  GWTYPE=4000 AND PARAMITEM='QUERY03DELAY';

UPDATE A_GWPARAMCONF SET PARAMMEMO='运营商协议，CMPP-移动,SGIP-联通,SMGP-电信,SMPP-国际协议',DEFAULTVALUE='1-0-0-0',VALUERANGE='CMPP,SMGP,SGIP,SMPP' WHERE PARAMITEM='STARTSVRPROTOCOL' AND GWTYPE=4000;

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'SMPPPORT' AS "PARAMITEM",4000 AS "GWTYPE" FROM  SYSIBM.DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT(PARAMITEM, PARAMNAME, PARAMATTRIBUTE, PARAMMEMO, DEFAULTVALUE, VALUERANGE, CONTROLTYPE, GWTYPE)
VALUES ('SMPPPORT', 'SMPP监听端口', 0, '移动运营商SMPP监听端口', '8891', ' ', 0, 4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'SMPPPORT','8891' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='SMPPPORT' AND  GWTYPE=4000) AND  GWTYPE=4000;

BEGIN ATOMIC 
DECLARE PIVERSION VARCHAR(32);
SET PIVERSION = '4.05.02';
IF NOT EXISTS (SELECT VERSION FROM VERSION_CMPP WHERE VERSION = PIVERSION) THEN
INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
VALUES (PIVERSION,CURRENT DATE,(TRIM(CHAR(YEAR(CURRENT TIMESTAMP)))||'-'|| (CASE MONTH(CURRENT TIMESTAMP) WHEN 
1 THEN '01' WHEN 2 THEN '02' WHEN 3 THEN '03' WHEN 4 THEN '04' WHEN 5 THEN '05' WHEN 6 THEN '06'WHEN 7 THEN '07' WHEN 8 THEN '08' WHEN 9 THEN '09'   ELSE   
TRIM(CHAR(MONTH(CURRENT TIMESTAMP))) END)||'-'||TRIM(CHAR(DAY(CURRENT TIMESTAMP)))||' '||TRIM(CHAR(HOUR(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(MINUTE(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(SECOND(CURRENT TIMESTAMP)))));
END IF;
END ;

/*网关升级脚本(V4.04.06-V4.05.02) END*/



/*EMP升级脚本START*/

/*接入账号查看权限 权限 */
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2834;
IF NOT EXISTS(SELECT * FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=PRIID) THEN
	 INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE)
  	 VALUES (PRIID,13, 1, '查看', '1900-1470-0', '接入账号查看权限', '网关前端配置', '1900-1470', '/pgb_accessPri.htm');
END IF;
END;

/*接入账号查看权限 权限 */
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2834;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=1) THEN
INSERT INTO LF_IMPOWER VALUES(1,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2834;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=2) THEN
INSERT INTO LF_IMPOWER VALUES(2,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2834;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=4) THEN
INSERT INTO LF_IMPOWER VALUES(4,PRIID);
END IF;
END;

/*接入账号查看权限 关系绑定 权限 */
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2842;
IF NOT EXISTS(SELECT * FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=PRIID) THEN
	 INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE)
  	 VALUES (PRIID, 13, NULL, '关系绑定', '1900-1470-1', '接入账号查看权限', '网关前端配置', '1900-1470', NULL);
END IF;
END;

/*接入账号查看权限 关系绑定 权限 */
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2842;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=1) THEN
INSERT INTO LF_IMPOWER VALUES(1,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2842;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=2) THEN
INSERT INTO LF_IMPOWER VALUES(2,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2842;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=4) THEN
INSERT INTO LF_IMPOWER VALUES(4,PRIID);
END IF;
END;


/*下行记录查询权限*/
CREATE PROCEDURE "CREATEEXISTS"
BEGIN ATOMIC 
IF NOT EXISTS (SELECT TABNAME FROM SYSCAT.TABLES WHERE TABNAME='LF_MT_PRI') THEN
  EXECUTE IMMEDIATE 'CREATE TABLE LF_MT_PRI
(
	ID BIGINT PRIMARY KEY  NOT NULL GENERATED BY DEFAULT AS IDENTITY (  
                    START WITH +1  
                    INCREMENT BY +1  
                    MINVALUE +1  
                    MAXVALUE +2147483647  
                    NO CYCLE  
                    NO CACHE  
                    NO ORDER ),	--自增ID
	SPUSERID VARCHAR(32) DEFAULT '''' NOT NULL,/*发送账号*/
	USER_ID BIGINT DEFAULT 0 NOT NULL,/*操作员USERID*/
	CREATETIME TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP ,/*创建时间*/
	CREATE_USERID BIGINT DEFAULT 0 NOT NULL,/*创建者USERID*/
	CORP_CODE VARCHAR(64) DEFAULT '''' NOT NULL /*企业编码*/
) IN EMP_TABLESPACE';
END IF;
END ;
CALL CREATEEXISTS;
DROP PROCEDURE CREATEEXISTS;

/*EMP升级脚本 END */


--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.330';
SET DBVERSIONSTR='6.21';
SET WBSVERSIONSTR='8.4.1.153';
SET SPGATEVERSIONSTR='6.1.21.313';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.20-V6.21END------------------


--------------------V6.21-V6.22START------------------
BEGIN ATOMIC 
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.22';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.330';

/*网关升级脚本(V4.05.02-V4.05.03) START*/
CREATE PROCEDURE "DELPROC"(IN "PROCNAME1" VARCHAR(20)) 
  begin
DECLARE STR VARCHAR (256);
DECLARE STR1 VARCHAR (256);
SELECT PROCNAME INTO STR1 FROM SYSCAT.PROCEDURES WHERE  PROCNAME=PROCNAME1;
if  STR1 is not null THEN
  SET STR ='DROP PROCEDURE '||PROCNAME1; 
  execute immediate str ; 
end if; 
end;


CALL DELPROC('GW_WR_MTLVLQUEV2');
CREATE PROCEDURE "GW_WR_MTLVLQUEV2"
 (IN "PIUID" INTEGER, 
  IN "PIPTMSGID" BIGINT, 
  IN "PIRETFLAG" SMALLINT, 
  IN "PIPKTOTAL" SMALLINT, 
  IN "PIPHONECOUNT" INTEGER, 
  IN "PISENDSTATUS" SMALLINT, 
  IN "PISPLITFLAG" SMALLINT, 
  IN "PIECID" INTEGER, 
  IN "PIUSERID" VARCHAR(11), 
  IN "PISPGATE" VARCHAR(21), 
  IN "PICPNO" VARCHAR(21), 
  IN "PIRECVMTTIME" TIMESTAMP, 
  IN "PIPHONE" VARCHAR(3500), 
  IN "PIMESSAGE" VARCHAR(3000), 
  IN "PIFEEFLAG" SMALLINT, 
  IN "PIDESTUID" INTEGER, 
  IN "PILOGINUID" INTEGER, 
  IN "PIPKNUMBER" SMALLINT, 
  IN "PISENDLEVEL" SMALLINT, 
  IN "PITPUDHI" SMALLINT, 
  IN "PITASKID" INTEGER, 
  IN "PILONGMSGSEQ" SMALLINT, 
  IN "PIMSGFMT" SMALLINT, 
  IN "PITOTALCOUNT" INTEGER, 
  IN "PISVRTYPE" VARCHAR(64), 
  IN "PIP1" VARCHAR(64), 
  IN "PIP2" VARCHAR(64), 
  IN "PIP3" VARCHAR(64), 
  IN "PIP4" VARCHAR(64), 
  IN "PIUSERMSGID" BIGINT, 
  IN "PIMODULEID" INTEGER, 
  IN "PIATTIME" BIGINT, 
  IN "PIVALIDTIME" BIGINT,
  IN "PISENDTYPE" INTEGER,
  IN "PIBATCHID" BIGINT,
  IN "PIAREACODE" INTEGER,
  IN PICUSTID VARCHAR(64), 
  IN PIEXDATA VARCHAR(64),
  IN P_TABLENO INTEGER
 ) 
  SPECIFIC "GW_WR_MTLVLQUEV2"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
  BEGIN 
	IF P_TABLENO =0 THEN
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL0_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL0_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =1 THEN  
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL1_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL1_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =2 THEN
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL2_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL2_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =3 THEN 
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL3_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL3_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =4 THEN
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL4_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL4_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =5 THEN
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL5_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL5_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =6 THEN
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL6_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL6_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =7 THEN
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL7_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL7_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =8 THEN
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL8_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL8_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
ELSEIF P_TABLENO =9 THEN
   IF NOT EXISTS (SELECT PTMSGID FROM MT_LEVEL9_QUEUE WHERE PTMSGID=PIPTMSGID) THEN
      INSERT INTO MT_LEVEL9_QUEUE(UID, USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT, 
      PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,
      TASKID,LONGMSGSEQ,MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
      VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, 
      PIPHONECOUNT,PIRECVMTTIME, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,
      PITPUDHI,PISENDLEVEL,PITASKID,PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA); 
   END IF;
END IF;
END;

DROP PROCEDURE "DELPROC";

BEGIN ATOMIC 
DECLARE PIVERSION VARCHAR(32);
SET PIVERSION = '4.05.03';
IF NOT EXISTS (SELECT VERSION FROM VERSION_CMPP WHERE VERSION = PIVERSION) THEN
INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
VALUES (PIVERSION,CURRENT DATE,(TRIM(CHAR(YEAR(CURRENT TIMESTAMP)))||'-'|| (CASE MONTH(CURRENT TIMESTAMP) WHEN 
1 THEN '01' WHEN 2 THEN '02' WHEN 3 THEN '03' WHEN 4 THEN '04' WHEN 5 THEN '05' WHEN 6 THEN '06'WHEN 7 THEN '07' WHEN 8 THEN '08' WHEN 9 THEN '09'   ELSE   
TRIM(CHAR(MONTH(CURRENT TIMESTAMP))) END)||'-'||TRIM(CHAR(DAY(CURRENT TIMESTAMP)))||' '||TRIM(CHAR(HOUR(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(MINUTE(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(SECOND(CURRENT TIMESTAMP)))));
END IF;
END ;

/*网关升级脚本(V4.05.02-V4.05.03) START*/

--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.331';
SET DBVERSIONSTR='6.22';
SET WBSVERSIONSTR='8.4.1.153';
SET SPGATEVERSIONSTR='6.1.21.313';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.21-V6.22END-----------------


--------------------V6.22-V6.23START------------------
BEGIN ATOMIC 
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.23';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;


UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.331';

--企业表增加 是否开启上行退订功能 默认值为0  0不启动  1是启用
CREATE PROCEDURE "ADDCOLUMNEXISTS"
BEGIN ATOMIC 
IF NOT EXISTS (SELECT * FROM SYSCAT.COLUMNS WHERE TABNAME='LF_CORP' AND COLNAME='ISOPENTD') THEN
  EXECUTE IMMEDIATE 'ALTER TABLE LF_CORP ADD ISOPENTD INT DEFAULT 0 NOT NULL';
END IF;
END ;
CALL ADDCOLUMNEXISTS;
DROP PROCEDURE ADDCOLUMNEXISTS;
REORG TABLE LF_CORP;

--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.332';
SET DBVERSIONSTR='6.23';
SET WBSVERSIONSTR='8.4.1.153';
SET SPGATEVERSIONSTR='6.1.21.313';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.22-V6.23END-----------------


--------------------V6.23-V6.25START------------------
BEGIN ATOMIC 
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.25';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;


UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.332';



/*网关升级脚本(4.05.03-4.05.04) START*/

CREATE PROCEDURE "DELPROC"(IN "PROCNAME1" VARCHAR(20)) 
  begin
DECLARE STR VARCHAR (256);
DECLARE STR1 VARCHAR (256);
SELECT PROCNAME INTO STR1 FROM SYSCAT.PROCEDURES WHERE  PROCNAME=PROCNAME1;
if  STR1 is not null THEN
  SET STR ='DROP PROCEDURE '||PROCNAME1; 
  execute immediate str ; 
end if; 
end;

UPDATE A_GWPARAMCONF SET PARAMATTRIBUTE=2 WHERE PARAMITEM='SMPPPORT' AND GWTYPE=4000;

CALL DELPROC('GW_ADDPBLISTBLACK');
CREATE PROCEDURE "GW_ADDPBLISTBLACK"(
IN PIPHONE BIGINT,         
IN PITDCMD VARCHAR(64),    
IN PIUSERID VARCHAR(11),   
IN PISPNUMBER VARCHAR(21), 
IN PISVRTYPE VARCHAR(64),  
IN PIECID INTEGER,         
IN PIMOMSGID BIGINT)       
 SPECIFIC "GW_ADDPBLISTBLACK"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN
DECLARE PIOPTYPE SMALLINT;      
DECLARE PIPBUSERID VARCHAR(11);
DECLARE PIPBSPNUMBER VARCHAR(21);
DECLARE PIPBSVRTYPE VARCHAR(64);
DECLARE PIPBCROPCODE VARCHAR(64);


	
	--表的策略信息决定是否需要添加黑名单
       IF EXISTS (SELECT * FROM GW_TDCMD WHERE UPPER(TD_CMD)=UPPER(PITDCMD) AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE TD_SPNUMBER||'%')) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0) THEN      
		    SELECT OPTYPE,PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE INTO PIOPTYPE,PIPBUSERID,PIPBSPNUMBER,PIPBSVRTYPE,PIPBCROPCODE FROM GW_TDCMD  WHERE UPPER(TD_CMD)=UPPER(PITDCMD) AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE TD_SPNUMBER||'%')) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0 FETCH FIRST 1 ROW ONLY;
            	
		 --PB_LIST_BLACK表中是否已经存在对应的黑名单数据
		IF NOT EXISTS(SELECT * FROM PB_LIST_BLACK WHERE USERID=PIPBUSERID AND SPGATE='' AND SPNUMBER=PIPBSPNUMBER AND PHONE=PIPHONE AND SVRTYPE=PIPBSVRTYPE AND CORPCODE=PIPBCROPCODE) THEN
		   INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
		          VALUES(PIPBUSERID,'',PIPBSPNUMBER,PIPHONE,PIOPTYPE,CURRENT TIMESTAMP,'',PIPBSVRTYPE,0,PIPBCROPCODE,1);
		   INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
		          VALUES(PIPHONE,PITDCMD,PIUSERID,PISPNUMBER,PIECID,PIOPTYPE,PIMOMSGID,CURRENT TIMESTAMP);
                END IF;	
  

        END IF;	
END;

UPDATE A_PROTOCOLTMPL SET PROTOCOLPARAM='EXPIREHOUR=24;OUTDBGINFO=3;RETURNMOUDHI=0;SRCTON=1;SRCNPI=1;DESTTON=1;DESTNPI=1;MSGIDENCODE=16'  
WHERE PROTOCOLCODE=8 AND PROTOCOL='SMPP3X';

DROP PROCEDURE "DELPROC";

BEGIN ATOMIC 
DECLARE PIVERSION VARCHAR(32);
SET PIVERSION = '4.05.04';
IF NOT EXISTS (SELECT VERSION FROM VERSION_CMPP WHERE VERSION = PIVERSION) THEN
INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
VALUES (PIVERSION,CURRENT DATE,(TRIM(CHAR(YEAR(CURRENT TIMESTAMP)))||'-'|| (CASE MONTH(CURRENT TIMESTAMP) WHEN 
1 THEN '01' WHEN 2 THEN '02' WHEN 3 THEN '03' WHEN 4 THEN '04' WHEN 5 THEN '05' WHEN 6 THEN '06'WHEN 7 THEN '07' WHEN 8 THEN '08' WHEN 9 THEN '09'   ELSE   
TRIM(CHAR(MONTH(CURRENT TIMESTAMP))) END)||'-'||TRIM(CHAR(DAY(CURRENT TIMESTAMP)))||' '||TRIM(CHAR(HOUR(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(MINUTE(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(SECOND(CURRENT TIMESTAMP)))));
END IF;
END ;


/*网关升级脚本(4.05.03-4.05.04) END*/

--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.333';
SET DBVERSIONSTR='6.25';
SET WBSVERSIONSTR='8.4.4.157';
SET SPGATEVERSIONSTR='6.1.21.313';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.23-V6.25END-----------------

--------------------V6.25-V6.26START------------------
BEGIN ATOMIC 
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.26';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;


UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.333';

/*网关升级脚本(4.05.04-4.05.05) START*/

CREATE PROCEDURE "DELPROC"(IN "PROCNAME1" VARCHAR(20)) 
  begin
DECLARE STR VARCHAR (256);
DECLARE STR1 VARCHAR (256);
SELECT PROCNAME INTO STR1 FROM SYSCAT.PROCEDURES WHERE  PROCNAME=PROCNAME1;
if  STR1 is not null THEN
  SET STR ='DROP PROCEDURE '||PROCNAME1; 
  execute immediate str ; 
end if; 
end;


CALL DELPROC('GW_ADDPBLISTBLACK');
CREATE PROCEDURE "GW_ADDPBLISTBLACK"(
IN PIPHONE BIGINT,         
IN PITDCMD VARCHAR(64),    
IN PIUSERID VARCHAR(11),   
IN PISPNUMBER VARCHAR(21), 
IN PISVRTYPE VARCHAR(64),  
IN PIECID INTEGER,         
IN PIMOMSGID BIGINT)       
 SPECIFIC "GW_ADDPBLISTBLACK"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN
DECLARE PIOPTYPE SMALLINT;      
DECLARE PIPBUSERID VARCHAR(11);
DECLARE PIPBSPNUMBER VARCHAR(21);
DECLARE PIPBSVRTYPE VARCHAR(64);
DECLARE PIPBCROPCODE VARCHAR(64);


	
	--表的策略信息决定是否需要添加黑名单
       IF EXISTS (SELECT * FROM GW_TDCMD WHERE UPPER(TD_CMD)=UPPER(PITDCMD) AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE TD_SPNUMBER||'%')) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0) THEN      
		    SELECT OPTYPE,PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE INTO PIOPTYPE,PIPBUSERID,PIPBSPNUMBER,PIPBSVRTYPE,PIPBCROPCODE FROM GW_TDCMD  WHERE UPPER(TD_CMD)=UPPER(PITDCMD) AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE TD_SPNUMBER||'%')) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0 FETCH FIRST 1 ROW ONLY;
            	
		 --PB_LIST_BLACK表中是否已经存在对应的黑名单数据
		IF NOT EXISTS(SELECT * FROM PB_LIST_BLACK WHERE USERID=PIPBUSERID AND SPGATE='' AND SPNUMBER=PIPBSPNUMBER AND PHONE=PIPHONE AND SVRTYPE=PIPBSVRTYPE AND CORPCODE=PIPBCROPCODE AND OPTYPE=1) THEN
		   INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
		          VALUES(PIPBUSERID,'',PIPBSPNUMBER,PIPHONE,PIOPTYPE,CURRENT TIMESTAMP,'',PIPBSVRTYPE,0,PIPBCROPCODE,1);
		   INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
		          VALUES(PIPHONE,PITDCMD,PIUSERID,PISPNUMBER,PIECID,PIOPTYPE,PIMOMSGID,CURRENT TIMESTAMP);
                END IF;	
  

        END IF;	
END;


DROP PROCEDURE "DELPROC";

BEGIN ATOMIC 
DECLARE PIVERSION VARCHAR(32);
SET PIVERSION = '4.05.05';
IF NOT EXISTS (SELECT VERSION FROM VERSION_CMPP WHERE VERSION = PIVERSION) THEN
INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
VALUES (PIVERSION,CURRENT DATE,(TRIM(CHAR(YEAR(CURRENT TIMESTAMP)))||'-'|| (CASE MONTH(CURRENT TIMESTAMP) WHEN 
1 THEN '01' WHEN 2 THEN '02' WHEN 3 THEN '03' WHEN 4 THEN '04' WHEN 5 THEN '05' WHEN 6 THEN '06'WHEN 7 THEN '07' WHEN 8 THEN '08' WHEN 9 THEN '09'   ELSE   
TRIM(CHAR(MONTH(CURRENT TIMESTAMP))) END)||'-'||TRIM(CHAR(DAY(CURRENT TIMESTAMP)))||' '||TRIM(CHAR(HOUR(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(MINUTE(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(SECOND(CURRENT TIMESTAMP)))));
END IF;
END ;

/*网关升级脚本(4.05.04-4.05.05) END*/

--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.335';
SET DBVERSIONSTR='6.26';
SET WBSVERSIONSTR='8.4.5.158';
SET SPGATEVERSIONSTR='6.1.21.313';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.25-V6.26END-----------------



--------------------V6.26-V6.27START------------------
BEGIN ATOMIC 
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.27';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;


UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.335';
DELETE FROM LF_USER2ROLE WHERE USER_ID=1;

/*网关升级脚本(4.05.04-4.05.05) START*/
CREATE PROCEDURE "DELPROC"(IN "PROCNAME1" VARCHAR(20)) 
  begin
DECLARE STR VARCHAR (256);
DECLARE STR1 VARCHAR (256);
SELECT PROCNAME INTO STR1 FROM SYSCAT.PROCEDURES WHERE  PROCNAME=PROCNAME1;
if  STR1 is not null THEN
  SET STR ='DROP PROCEDURE '||PROCNAME1; 
  execute immediate str ; 
end if; 
end;


CALL DELPROC('GW_ADDPBLISTBLACK');
CREATE PROCEDURE "GW_ADDPBLISTBLACK"(
IN PIPHONE BIGINT,         
IN PITDCMD VARCHAR(64),    
IN PIUSERID VARCHAR(11),   
IN PISPNUMBER VARCHAR(21), 
IN PISVRTYPE VARCHAR(64),  
IN PIECID INTEGER,         
IN PIMOMSGID BIGINT)       
 SPECIFIC "GW_ADDPBLISTBLACK"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN
DECLARE PIOPTYPE SMALLINT;      
DECLARE PIPBUSERID VARCHAR(11);
DECLARE PIPBSPNUMBER VARCHAR(21);
DECLARE PIPBSVRTYPE VARCHAR(64);
DECLARE PIPBCROPCODE VARCHAR(64);


	
	--表的策略信息决定是否需要添加黑名单
       IF EXISTS (SELECT * FROM GW_TDCMD WHERE UPPER(TD_CMD)=UPPER(PITDCMD) AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE TD_SPNUMBER||'%')) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0) THEN      
		    SELECT OPTYPE,PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE INTO PIOPTYPE,PIPBUSERID,PIPBSPNUMBER,PIPBSVRTYPE,PIPBCROPCODE FROM GW_TDCMD  WHERE UPPER(TD_CMD)=UPPER(PITDCMD) AND (TD_USERID=PIUSERID OR TD_USERID='000000') AND (TD_SPNUMBER='' OR ( PISPNUMBER LIKE TD_SPNUMBER||'%')) AND (TD_ECID=PIECID OR TD_ECID=0) AND (PB_SVRTYPE=PISVRTYPE OR PB_SVRTYPE='') AND STATUS=0 FETCH FIRST 1 ROW ONLY;
            	
		 --PB_LIST_BLACK表中是否已经存在对应的黑名单数据
		IF NOT EXISTS(SELECT * FROM PB_LIST_BLACK WHERE USERID=PIPBUSERID AND SPGATE='' AND SPNUMBER=PIPBSPNUMBER AND PHONE=PIPHONE AND SVRTYPE=PIPBSVRTYPE AND CORPCODE=PIPBCROPCODE AND OPTYPE=1) THEN
		   INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
		          VALUES(PIPBUSERID,'',PIPBSPNUMBER,PIPHONE,PIOPTYPE,CURRENT TIMESTAMP,'',PIPBSVRTYPE,0,PIPBCROPCODE,1);
		   INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
		          VALUES(PIPHONE,PITDCMD,PIUSERID,PISPNUMBER,PIECID,PIOPTYPE,PIMOMSGID,CURRENT TIMESTAMP);
                END IF;	
  

        END IF;	
END;

CALL DELPROC('GW_LOADTDCMD');
CREATE PROCEDURE "GW_LOADTDCMD"() 
  SPECIFIC "GW_LOADTDCMD"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
  BEGIN  
	DECLARE PISQLSTR VARCHAR(3000);
	DECLARE RS1 CURSOR WITH RETURN FOR S1; 
	SET PISQLSTR = 'SELECT TD_CMD,MATCHTYPE FROM GW_TDCMD';
	PREPARE S1 FROM PISQLSTR;
	OPEN RS1;	
END;

DROP PROCEDURE "DELPROC";

BEGIN ATOMIC 
DECLARE PIVERSION VARCHAR(32);
SET PIVERSION = '4.05.06';
IF NOT EXISTS (SELECT VERSION FROM VERSION_CMPP WHERE VERSION = PIVERSION) THEN
INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
VALUES (PIVERSION,CURRENT DATE,(TRIM(CHAR(YEAR(CURRENT TIMESTAMP)))||'-'|| (CASE MONTH(CURRENT TIMESTAMP) WHEN 
1 THEN '01' WHEN 2 THEN '02' WHEN 3 THEN '03' WHEN 4 THEN '04' WHEN 5 THEN '05' WHEN 6 THEN '06'WHEN 7 THEN '07' WHEN 8 THEN '08' WHEN 9 THEN '09'   ELSE   
TRIM(CHAR(MONTH(CURRENT TIMESTAMP))) END)||'-'||TRIM(CHAR(DAY(CURRENT TIMESTAMP)))||' '||TRIM(CHAR(HOUR(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(MINUTE(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(SECOND(CURRENT TIMESTAMP)))));
END IF;
END ;

/*网关升级脚本(4.05.05-4.05.06) END*/

--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.336';
SET DBVERSIONSTR='6.27';
SET WBSVERSIONSTR='8.4.8.161';
SET SPGATEVERSIONSTR='6.1.22.315';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.26-V6.27END-----------------


--------------------V6.27-V6.28START------------------
BEGIN ATOMIC
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.28';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;


UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.336';


--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.337';
SET DBVERSIONSTR='6.28';
SET WBSVERSIONSTR='8.4.10.163';
SET SPGATEVERSIONSTR='6.1.22.315';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.27-V6.28END-----------------


--------------------V6.28-V6.29START------------------
BEGIN ATOMIC
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.29';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.337';


--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.338';
SET DBVERSIONSTR='6.29';
SET WBSVERSIONSTR='8.4.10.163';
SET SPGATEVERSIONSTR='6.1.22.315';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.28-V6.29END-----------------



--------------------V6.29-V6.30START------------------
BEGIN ATOMIC
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.30';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.338';



--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.339';
SET DBVERSIONSTR='6.30';
SET WBSVERSIONSTR='8.4.10.163';
SET SPGATEVERSIONSTR='6.1.23.316';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.29-V6.30END-----------------



--------------------V6.30-V6.31START------------------
BEGIN ATOMIC
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.31';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.339';

/*代理账号管理*/
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2845;
IF NOT EXISTS(SELECT * FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=PRIID) THEN
	 INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE)
  	 VALUES (PRIID, 13, 1, '查看', '1900-1480-0', '代理账号管理', '网关前端配置', '1900-1480', '/pag_proxyMage.htm');
END IF;
END;

/*代理账号管理*/
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2845;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=1) THEN
INSERT INTO LF_IMPOWER VALUES(1,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2845;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=2) THEN
INSERT INTO LF_IMPOWER VALUES(2,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2845;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=4) THEN
INSERT INTO LF_IMPOWER VALUES(4,PRIID);
END IF;
END;


/*代理账号管理 新增权限*/
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2846;
IF NOT EXISTS(SELECT * FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=PRIID) THEN
	 INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE)
  	 VALUES (PRIID, 13, NULL, '新增', '1900-1480-1', '代理账号管理', '网关前端配置', '1900-1480', NULL);
END IF;
END;

/*代理账号管理 新增权限*/
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2846;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=1) THEN
INSERT INTO LF_IMPOWER VALUES(1,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2846;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=2) THEN
INSERT INTO LF_IMPOWER VALUES(2,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2846;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=4) THEN
INSERT INTO LF_IMPOWER VALUES(4,PRIID);
END IF;
END;


/*代理账号管理 修改权限*/
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2847;
IF NOT EXISTS(SELECT * FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=PRIID) THEN
	 INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE)
  	 VALUES (PRIID, 13, NULL, '修改', '1900-1480-2', '代理账号管理', '网关前端配置', '1900-1480', NULL);
END IF;
END;

/*代理账号管理 修改权限*/
BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2847;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=1) THEN
INSERT INTO LF_IMPOWER VALUES(1,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2847;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=2) THEN
INSERT INTO LF_IMPOWER VALUES(2,PRIID);
END IF;
END;

BEGIN ATOMIC
DECLARE PRIID BIGINT;
SET PRIID=2847;
IF NOT EXISTS(SELECT * FROM LF_IMPOWER WHERE PRIVILEGE_ID=PRIID AND ROLE_ID=4) THEN
INSERT INTO LF_IMPOWER VALUES(4,PRIID);
END IF;
END;



--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.340';
SET DBVERSIONSTR='6.31';
SET WBSVERSIONSTR='8.4.10.163';
SET SPGATEVERSIONSTR='6.1.23.316';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.30-V6.31END-----------------


--------------------V6.31-V6.32START------------------
BEGIN ATOMIC
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.32';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMP网关更改');
END IF;
END ;

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.340';



--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.341';
SET DBVERSIONSTR='6.32';
SET WBSVERSIONSTR='8.4.10.163';
SET SPGATEVERSIONSTR='6.1.23.316';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMP网关更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;

END ;
--------------------V6.31-V6.32END----------------- 


--------------------V6.32-V6.33START------------------
BEGIN ATOMIC
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.33';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'EMPWEB更改');
END IF;
END ;

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.341';



--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.342';
SET DBVERSIONSTR='6.33';
SET WBSVERSIONSTR='8.4.10.163';
SET SPGATEVERSIONSTR='6.1.23.316';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'EMPWEB更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;
END ;
--------------------V6.32-V6.33END-----------------


--------------------V6.33-V6.35START------------------
BEGIN ATOMIC
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET DBVERSIONSTR = '6.35';
SET NUMSTR=1;
SET TOTALSTR=1;
IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,1,'网关包更改');
END IF;
END ;

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.342';

/*V4.05.06-V4.04.07 START*/
CREATE PROCEDURE "DELPROC"(IN "PROCNAME1" VARCHAR(20)) 
  begin
DECLARE STR VARCHAR (256);
DECLARE STR1 VARCHAR (256);
SELECT PROCNAME INTO STR1 FROM SYSCAT.PROCEDURES WHERE  PROCNAME=PROCNAME1;
if  STR1 is not null THEN
  SET STR ='DROP PROCEDURE '||PROCNAME1; 
  execute immediate str ; 
end if; 
end;



CALL DELPROC('GW_H_STATISTIV2');

CREATE PROCEDURE "GW_H_STATISTIV2"
 (IN "PIPROCESSFLAG" INTEGER, 
  IN "ISP1" INTEGER, 
  IN "ISP2" INTEGER, 
  IN "ISP3" INTEGER, 
  IN "ISP4" INTEGER
 ) 
  SPECIFIC "GW_H_STATISTIV2"
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
  BEGIN
	DECLARE STR VARCHAR(4000);
	DECLARE BEGTIME VARCHAR(32);
	DECLARE ENDTIME VARCHAR(32);
	DECLARE MAXIYMD INTEGER;
	DECLARE DIFFDATE INTEGER;
	DECLARE MINTMIYMD INTEGER;
	DECLARE MAXTMIYMD INTEGER;

	DECLARE GLOBAL TEMPORARY TABLE SESSION.TEMP_STATISTICS ( 
	USERID VARCHAR(11),
	TASKID INTEGER,
	SPGATE VARCHAR(21),
	SPISUNCM INTEGER, 
	SPID VARCHAR(32),
	SVRTYPE VARCHAR(64), 
	P1 VARCHAR(64),
	P2 VARCHAR(64),
	P3 VARCHAR(64), 
	P4 VARCHAR(64),
    IYMD INTEGER,
	IYEAR INTEGER,
	IMONTH INTEGER, 
	IHOUR INTEGER,
	ICOUNT INTEGER, 
	SUCC INTEGER,
	FAIL INTEGER,
	NRET INTEGER,
	MOBILEAREA INTEGER,
	SENDTYPE INTEGER,
	BATCHID BIGINT,AREACODE INTEGER) ON COMMIT DELETE ROWS NOT LOGGED WITH REPLACE;
	
     SELECT  COALESCE(MAX(IYMD),20000101)  INTO MAXIYMD FROM MT_DATAREPORT ;
	SET DIFFDATE=days(CURRENT DATE - 2 days) - days(date(SUBSTR(CHAR(MAXIYMD),1,4)||'-'||SUBSTR(CHAR(MAXIYMD),5,2)||'-'||SUBSTR(CHAR(MAXIYMD),7,2)));
	IF DIFFDATE>0 THEN
          SET PIPROCESSFLAG=PIPROCESSFLAG+DIFFDATE;
	END IF;

	SET BEGTIME = TRIM(CAST((CURRENT DATE - PIPROCESSFLAG DAYS) AS CHAR(32)))||' 00:00:00.000000';
	SET ENDTIME = TRIM(CAST((CURRENT DATE) AS CHAR(32)))||' 00:00:00.000000';
	
     

	SET STR= 'INSERT INTO SESSION.TEMP_STATISTICS(USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,MOBILEAREA,SENDTYPE,BATCHID,AREACODE)
               SELECT  USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE';
			   IF ISP1 =1 THEN
			    SET STR=STR||' ,P1';
			   ELSE 
			    SET STR=STR||','' '' AS P1';
			   END IF;
			   IF ISP2 =1 THEN
			    SET STR=STR||' ,P2';
			   ELSE 
			    SET STR=STR||','' '' AS P2';
			   END IF;
			   IF ISP3 =1 THEN
			    SET STR=STR||' ,P3';
			   ELSE 
			    SET STR=STR||','' '' AS P3';
			   END IF;
			   IF ISP1 =4 THEN
			    SET STR=STR||' ,P4';
			   ELSE 
			    SET STR=STR||','' '' AS P4';
			   END IF;
			
               SET STR=STR||', INT(DATE(SENDTIME)) AS IYMD,
               INT(YEAR(SENDTIME)) AS IYEAR,
               INT(MONTH(SENDTIME)) AS MON,
               INT(HOUR(SENDTIME)) AS HOUR,
               COUNT(ID),
			         VALUE(COUNT(CASE TRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE NULL END),0),
			         VALUE(COUNT(CASE SUBSTR(ERRORCODE,1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE NULL END),0),
			         VALUE(COUNT(CASE LENGTH(TRIM(ERRORCODE))  WHEN 0 THEN 1 ELSE NULL END ),0),
			         MOBILEAREA,
			         SENDTYPE,
			         BATCHID,AREACODE
               FROM GW_MT_TASK_BAK
               WHERE SENDTIME BETWEEN '''||BEGTIME|| ''' AND '''||ENDTIME||''' GROUP BY 
               USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE';
	         IF ISP1 =1 THEN
			    SET STR=STR||' ,P1';
             END IF;
			 IF ISP2 =1 THEN
			    SET STR=STR||' ,P2';
             END IF;
			 IF ISP3 =1 THEN
			    SET STR=STR||' ,P3'; 
			   END IF;
			 IF ISP4 =1 THEN
			    SET STR=STR||' ,P4';
			   END IF;
	 SET STR=STR||',MOBILEAREA,SENDTYPE,BATCHID,AREACODE,
               INT(DATE(SENDTIME)),
               INT(YEAR(SENDTIME)),
               INT(MONTH(SENDTIME)),
               INT(HOUR(SENDTIME))';
		     
       EXECUTE IMMEDIATE STR;  
       --插入或更新统计表   
	  SELECT MIN(IYMD) , MAX(IYMD) INTO MINTMIYMD,MAXTMIYMD FROM SESSION.TEMP_STATISTICS;
      DELETE FROM MT_DATAREPORT WHERE IYMD BETWEEN MINTMIYMD AND MAXTMIYMD;

      INSERT INTO MT_DATAREPORT(USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET, SENDTYPE, MOBILEAREA,BATCHID,AREACODE)
      SELECT T.USERID,T.TASKID,T.SPGATE,T.SPISUNCM,T.SPID,T.SVRTYPE,T.P1,T.P2,T.P3,T.P4,T.IYMD,T.IHOUR,T.IMONTH,T.IYEAR,T.ICOUNT,T.SUCC,T.FAIL,(T.ICOUNT-T.SUCC-T.FAIL-T.NRET),T.NRET, T.SENDTYPE, T.MOBILEAREA,T.BATCHID ,T.AREACODE
      FROM SESSION.TEMP_STATISTICS  T;
      COMMIT;
   END;

DROP PROCEDURE "DELPROC";

BEGIN ATOMIC 
DECLARE PIVERSION VARCHAR(32);
SET PIVERSION = '4.05.07';
IF NOT EXISTS (SELECT VERSION FROM VERSION_CMPP WHERE VERSION = PIVERSION) THEN
INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
VALUES (PIVERSION,CURRENT DATE,(TRIM(CHAR(YEAR(CURRENT TIMESTAMP)))||'-'|| (CASE MONTH(CURRENT TIMESTAMP) WHEN 
1 THEN '01' WHEN 2 THEN '02' WHEN 3 THEN '03' WHEN 4 THEN '04' WHEN 5 THEN '05' WHEN 6 THEN '06'WHEN 7 THEN '07' WHEN 8 THEN '08' WHEN 9 THEN '09'   ELSE   
TRIM(CHAR(MONTH(CURRENT TIMESTAMP))) END)||'-'||TRIM(CHAR(DAY(CURRENT TIMESTAMP)))||' '||TRIM(CHAR(HOUR(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(MINUTE(CURRENT TIMESTAMP)))||':'||TRIM(CHAR(SECOND(CURRENT TIMESTAMP)))));
END IF;
END ;

/*V4.05.06-V4.05.07 end*/



--增加版本信息
BEGIN ATOMIC 
DECLARE VERSIONSTR VARCHAR(32);
DECLARE DBVERSIONSTR VARCHAR(32);
DECLARE WBSVERSIONSTR VARCHAR(32);
DECLARE SPGATEVERSIONSTR VARCHAR(32);
DECLARE NUMSTR INT;
DECLARE TOTALSTR INT;
SET VERSIONSTR = '6.6.0.343';
SET DBVERSIONSTR='6.35';
SET WBSVERSIONSTR='8.4.10.163';
SET SPGATEVERSIONSTR='6.1.23.316';
SET NUMSTR=1;
SET TOTALSTR=1;
--EMP产品版本记录
IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION SET UPDATETIME=CURRENT TIMESTAMP,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;
--EMP产品版本历史记录
IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000) THEN
--EMP-WEB
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
VALUES(1000,1000,VERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000) THEN
--EMP_GATEWAY
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,2000,WBSVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'EMP_GATEWAY');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000) THEN
--SMT_SPGATE
INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
VALUES(1000,3000,SPGATEVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,'SMT_SPGATE');
ELSE
UPDATE LF_VERSION_HIS SET UPDATETIME=CURRENT TIMESTAMP WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
END IF;

IF NOT EXISTS (SELECT * FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR) THEN
--EMP产品数据库版本信息表
INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
VALUES(DBVERSIONSTR,CURRENT TIMESTAMP,CURRENT TIMESTAMP,NUMSTR,TOTALSTR,2,'网关包更改');
ELSE
UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=CURRENT TIMESTAMP WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMSTR AND TOTAL=TOTALSTR;
END IF;
END ;
--------------------V6.33-V6.35END-----------------  