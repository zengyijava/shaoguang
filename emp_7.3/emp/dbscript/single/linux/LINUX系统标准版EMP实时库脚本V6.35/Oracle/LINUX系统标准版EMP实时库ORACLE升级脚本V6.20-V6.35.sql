-----------V6.20-V6.21 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.21';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/


/*网关升级脚本(V4.04.06-V4.05.02)START  */
--GW_USERPROPERTY增加字段
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='GW_USERPROPERTY' AND COLUMN_NAME='CACERTNAME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE GW_USERPROPERTY ADD CACERTNAME VARCHAR2(256) DEFAULT ('' '') NOT NULL';
END IF;
END;
/

DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='GW_USERPROPERTY' AND COLUMN_NAME='VERIFYPEER';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE GW_USERPROPERTY ADD VERIFYPEER NUMBER(4) DEFAULT 1 NOT NULL';
END IF;
END;
/

DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='GW_USERPROPERTY' AND COLUMN_NAME='VERIFYHOST';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE GW_USERPROPERTY ADD VERIFYHOST NUMBER(4) DEFAULT 1 NOT NULL';
END IF;
END;
/

--滞留表添加字段
--MT_LEVEL1_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL1_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL1_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL1_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL1_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL1_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL1_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL1_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL1_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--MT_LEVEL2_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL2_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL2_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL2_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL2_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL2_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL2_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL2_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL2_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--MT_LEVEL3_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL3_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL3_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL3_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL3_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL3_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL3_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL3_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL3_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--MT_LEVEL4_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL4_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL4_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL4_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL4_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL4_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL4_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL4_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL4_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--MT_LEVEL5_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL5_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL5_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL5_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL5_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL5_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL5_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL5_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL5_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--MT_LEVEL6_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL6_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL6_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL6_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL6_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL6_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL6_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL6_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL6_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--MT_LEVEL7_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL7_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL7_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL7_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL7_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL7_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL7_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL7_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL7_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--MT_LEVEL8_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL8_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL8_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL8_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL8_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL8_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL8_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL8_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL8_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--MT_LEVEL9_QUEUE
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL9_QUEUE' AND COLUMN_NAME='ATTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL9_QUEUE ADD ATTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL9_QUEUE' AND COLUMN_NAME='VALIDTIME';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL9_QUEUE ADD VALIDTIME NUMBER(22) DEFAULT 0 NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL9_QUEUE' AND COLUMN_NAME='CUSTID';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL9_QUEUE ADD CUSTID VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_TAB_COLS WHERE TABLE_NAME='MT_LEVEL9_QUEUE' AND COLUMN_NAME='EXDATA';
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE MT_LEVEL9_QUEUE ADD EXDATA VARCHAR2(64) DEFAULT '' '' NOT NULL';
END IF;
END;
/

--增加退订指令表GW_TDCMD，用于保存上行退订指令详细信息
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I  FROM  USER_TABLES WHERE TABLE_NAME='GW_TDCMD';
IF I=0 THEN
   EXECUTE IMMEDIATE 'CREATE TABLE GW_TDCMD  (
   ID NUMBER(11) NOT NULL ,
   TD_CMD VARCHAR2(64) DEFAULT ''TD'' NOT NULL ,
   TD_USERID VARCHAR2(11) DEFAULT ''000000'' NOT NULL,
   TD_SPNUMBER VARCHAR2(21) DEFAULT '' '' NOT NULL,
   TD_ECID NUMBER(11) DEFAULT 0 NOT NULL,
   TD_TIMES NUMBER(11) DEFAULT 1 NOT NULL,
   MATCHTYPE NUMBER(4) DEFAULT 0 NOT NULL,
   OPTYPE NUMBER(4) DEFAULT 0 NOT NULL,
   PB_USERID VARCHAR2(11) DEFAULT ''000000'' NOT NULL,  
   PB_SPNUMBER VARCHAR2(21) DEFAULT '' '' NOT NULL, 
   PB_SVRTYPE VARCHAR2(64) DEFAULT '' '' NOT NULL,
   PB_CROPCODE VARCHAR2(64) DEFAULT '' '' NOT NULL,
   STATUS NUMBER(4) DEFAULT 0 NOT NULL
) TABLESPACE TBSSVRDATA
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )';
END IF;
END;
/  

DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM  USER_SEQUENCES WHERE SEQUENCE_NAME='SEQ_GW_TDCMD';
IF I=0 THEN
   EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_GW_TDCMD
MINVALUE 1
MAXVALUE 9999999999999999999999
START WITH 1
INCREMENT BY 1
CACHE 20000
ORDER';
END IF;
END;
/

CREATE OR REPLACE TRIGGER "TIG_GW_TDCMD" BEFORE
INSERT ON  "GW_TDCMD"
    FOR EACH ROW
BEGIN
IF (:NEW.ID IS NULL)
THEN
SELECT SEQ_GW_TDCMD.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END;
/

DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_INDEXES WHERE TABLE_NAME = UPPER('GW_TDCMD') AND INDEX_NAME =UPPER('IX_GW_TDCMD');
IF I=0 THEN
   EXECUTE IMMEDIATE 'CREATE INDEX IX_GW_TDCMD ON GW_TDCMD (TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID)
  TABLESPACE TBSSVRINDEX
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )';
END IF;
END;
/

DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_INDEXES WHERE TABLE_NAME = UPPER('GW_TDCMD') AND INDEX_NAME =UPPER('PK_GW_TDCMD');
IF I=0 THEN
  EXECUTE IMMEDIATE 'ALTER TABLE GW_TDCMD ADD CONSTRAINT  PK_GW_TDCMD  PRIMARY KEY( ID )
  USING INDEX 
  TABLESPACE TBSSVRINDEX
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )';
END IF;
END;
/

--增加上行退订操作历史记录表 GW_TDCMD_HIS
DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I  FROM  USER_TABLES WHERE TABLE_NAME='GW_TDCMD_HIS';
IF I=0 THEN
   EXECUTE IMMEDIATE 'CREATE TABLE GW_TDCMD_HIS (
   ID NUMBER(11) NOT NULL ,
   TD_PHONE NUMBER(22) DEFAULT 0 NOT NULL ,
   TD_CMD VARCHAR2(64) DEFAULT ''TD'' NOT NULL,
   TD_USERID VARCHAR2(11) DEFAULT ''000000'' NOT NULL ,
   TD_SPNUMBER VARCHAR2(21) DEFAULT '' '' NOT NULL ,
   TD_ECID NUMBER(11) DEFAULT 0 NOT NULL ,
   OPTYPE NUMBER(4) DEFAULT 0 NOT NULL ,
   MO_MSGID NUMBER(22) DEFAULT 0 NOT NULL ,  
   TD_TIME TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
) TABLESPACE TBSSVRDATA
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )';
END IF;
END;
/  

DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM  USER_SEQUENCES WHERE SEQUENCE_NAME='SEQ_GW_TDCMD_HIS';
IF I=0 THEN
   EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_GW_TDCMD_HIS
MINVALUE 1
MAXVALUE 9999999999999999999999
START WITH 1
INCREMENT BY 1
CACHE 20000
ORDER';
END IF;
END;
/

CREATE OR REPLACE TRIGGER "TIG_GW_TDCMD_HIS" BEFORE
INSERT ON  "GW_TDCMD_HIS"
    FOR EACH ROW
BEGIN
IF (:NEW.ID IS NULL)
THEN
SELECT SEQ_GW_TDCMD_HIS.NEXTVAL INTO :NEW.ID FROM DUAL;
END IF;
END;
/

DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_INDEXES WHERE TABLE_NAME = UPPER('GW_TDCMD_HIS') AND INDEX_NAME =UPPER('IX_GW_TDCMD_HIS');
IF I=0 THEN
   EXECUTE IMMEDIATE 'CREATE INDEX IX_GW_TDCMD_HIS ON GW_TDCMD_HIS (TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID)
  TABLESPACE TBSSVRINDEX
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )';
END IF;
END;
/

DECLARE I NUMBER(11);
BEGIN
SELECT COUNT(*) INTO I FROM USER_INDEXES WHERE TABLE_NAME = UPPER('GW_TDCMD_HIS') AND INDEX_NAME =UPPER('PK_GW_TDCMD_HIS');
IF I=0 THEN
   EXECUTE IMMEDIATE 'ALTER TABLE GW_TDCMD_HIS ADD CONSTRAINT PK_GW_TDCMD_HIS PRIMARY KEY( ID )
  USING INDEX 
  TABLESPACE TBSSVRINDEX
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )';
END IF;
END;
/


--增加初始化参数
--表A_PROTOCOLTMPL表增加SMPP协议参数初始化数据
MERGE INTO A_PROTOCOLTMPL A USING (SELECT 8 AS "PROTOCOLCODE" FROM  DUAL) B ON 
(A.PROTOCOLCODE=B.PROTOCOLCODE)
WHEN NOT MATCHED THEN 
INSERT (PROTOCOLCODE, PROTOCOL, PROTOCOLPARAM) 
VALUES(8,'SMPP3X','EXPIREHOUR=24;OUTDBGINFO=3;RETURNMOUDHI=0');
COMMIT;
/

--增加配置参数，开启上行退订功能FILTERB01TDMO
MERGE INTO  A_GWPARAMCONF A USING (SELECT 'FILTERB01TDMO' AS "PARAMITEM",4000 AS "GWTYPE" FROM  DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT (PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('FILTERB01TDMO', '开启上行退订功能',  '是否开启上行回复退订，手机号自动添加黑名单功能 (0不启用、1启用)',1, '0,1','0',1,4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'FILTERB01TDMO','0' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='FILTERB01TDMO'  AND  GWTYPE=4000) AND  GWTYPE=4000;
/

--增加配置参数，查询接口调用频率限制相关配置参数
MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY01SPDCTRL' AS "PARAMITEM",4000 AS "GWTYPE" FROM  DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT (PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY01SPDCTRL', '开启查询接口控速',  '对频繁调用获取上行、状态报告、查费接口进行控速(0不启用、1启用)',1, '0,1','0',1,4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY01SPDCTRL','0' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY01SPDCTRL'  AND  GWTYPE=4000) AND  GWTYPE=4000;
/


MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY02FREQ' AS "PARAMITEM",4000 AS "GWTYPE" FROM  DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT (PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY02FREQ', '允许调用查询接口频率',  '在无数据获取时，允许连续调用查询接口的频率(1-120/秒/次)',1, '1-120','10',0,4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY02FREQ','10' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY02FREQ'  AND  GWTYPE=4000) AND  GWTYPE=4000;
/

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY03DELAY' AS "PARAMITEM",4000 AS "GWTYPE" FROM  DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT (PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY03DELAY', '查询延时回应时长',  '当频繁调用查询接口时，网关对查询回应延时回应(1-120/秒)',1, '1-120','30',0,4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY03DELAY','30' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY03DELAY'  AND  GWTYPE=4000) AND  GWTYPE=4000;
COMMIT;
/

CREATE OR REPLACE PROCEDURE GW_GETURLBINDV1
 (
  PIUID           IN NUMBER,
  PISPTYPE        IN NUMBER,
  OUT_CURSOR      OUT SYS_REFCURSOR
 )
AS
BEGIN
  IF (PIUID=0) THEN
     OPEN OUT_CURSOR FOR
     SELECT UD."UID",UD.USERID,UD.USERPASSWORD AS PWD,UD.MTURL,
     CASE WHEN ((RTRIM(UD.MOURL) IS NOT NULL) AND UD.TRANSMOTYPE=2) THEN UD.MOURL ELSE ' ' END AS MOURL,
     CASE WHEN ((RTRIM(UD.RPTURL) IS NOT NULL) AND UD.TRANSRPTYPE=2) THEN UD.RPTURL ELSE ' ' END AS RPTURL,
     GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,
     GU.PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT,GU.CACERTNAME,GU.VERIFYPEER,GU.VERIFYHOST
     FROM USERDATA UD INNER JOIN   GW_USERPROPERTY GU ON GU.USERID=UD.USERID
     WHERE UD.USERTYPE=0 AND UD.STATUS=0 
     AND (((RTRIM(UD.MOURL) IS NOT NULL) AND UD.TRANSMOTYPE=2) OR ((RTRIM(UD.RPTURL) IS NOT NULL) AND UD.TRANSRPTYPE=2)) 
     AND UD.ACCOUNTTYPE=PISPTYPE ORDER BY UD."UID";

  ELSE
     OPEN OUT_CURSOR FOR
     SELECT UD."UID",UD.USERID,UD.USERPASSWORD AS PWD,UD.MTURL,
     CASE WHEN ((RTRIM(UD.MOURL) IS NOT NULL) AND UD.TRANSMOTYPE=2) THEN UD.MOURL ELSE ' ' END AS MOURL,
     CASE WHEN ((RTRIM(UD.RPTURL) IS NOT NULL) AND UD.TRANSRPTYPE=2) THEN UD.RPTURL ELSE ' ' END AS RPTURL,
     GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,
     GU.PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT,GU.CACERTNAME,GU.VERIFYPEER,GU.VERIFYHOST
     FROM USERDATA UD INNER JOIN   GW_USERPROPERTY GU ON GU.USERID=UD.USERID
      WHERE UD."UID"=PIUID AND UD.USERTYPE=0 AND UD.STATUS=0 
     AND (((RTRIM(UD.MOURL) IS NOT NULL) AND UD.TRANSMOTYPE=2) OR ((RTRIM(UD.RPTURL) IS NOT NULL) AND UD.TRANSRPTYPE=2)) 
     AND UD.ACCOUNTTYPE=PISPTYPE ORDER BY UD."UID";
  END IF;
END;
/

--增量加载退订命令表GW_TDCMD
CREATE OR REPLACE PROCEDURE GW_LOADTDCMD
 (
  PI_MAXID        IN NUMBER,
  PIMAXNUM        IN NUMBER,
  OUT_CURSOR      OUT SYS_REFCURSOR
 )
AS
BEGIN
     OPEN OUT_CURSOR FOR 
     SELECT CMD.ID,CMD.TD_CMD,CMD.MATCHTYPE FROM
     (SELECT ID,TD_CMD,MATCHTYPE FROM GW_TDCMD WHERE ID> PI_MAXID ORDER BY ID ASC) CMD WHERE ROWNUM<= PIMAXNUM;
END;
/

/*自动添加黑名单功能存储过程，
1.根据参数从GW_TDCMD表中获取退订指令相关策略信息。
2.根据GW_TDCMD表的策略信息决定是否需要添加黑名单，如果需要，在检测PB_LIST_BLACK表中是否已经存在对应的黑名单数据。不存在则添加黑名单，存在则无需重复添加。
3.再向GW_TDCMD_HIS表添加一条记录
*/
CREATE OR REPLACE PROCEDURE GW_ADDPBLISTBLACK (
PI_PHONE IN NUMBER,
PITD_CMD IN VARCHAR2,
PIUSERID IN VARCHAR2,
PISPNUMBER IN VARCHAR2,
PISVRTYPE IN VARCHAR2,
PI_ECID IN NUMBER,
PI_MO_MSGID IN NUMBER
)
AS
 PI_PB_USERID VARCHAR2(11) ;
 PI_PB_SPNUMBER VARCHAR2(21) ;
 PI_PB_SVRTYPE VARCHAR2(64) ;
 PI_PB_CROPCODE VARCHAR2(64) ;
 PI_OPTYPE NUMBER(4);
 PI_CNT NUMBER(11);
 PI_CNT1 NUMBER(11);
 PI_TD_CMD VARCHAR2(64);
 PI_USERID VARCHAR2(11);
 PI_SPNUMBER VARCHAR2(21);
 PI_SVRTYPE VARCHAR2(64);
BEGIN
PI_TD_CMD := COALESCE(PITD_CMD,' ');
PI_USERID := COALESCE(PIUSERID,' ');
PI_SPNUMBER := COALESCE(PISPNUMBER,' ');
PI_SVRTYPE := COALESCE(PISVRTYPE,' ');
--根据GW_TDCMD表的策略信息判断是否需要添加黑名单
SELECT COUNT(ID) INTO PI_CNT FROM GW_TDCMD WHERE (TD_CMD=PI_TD_CMD) AND (TD_USERID=PI_USERID OR TD_USERID='000000')
AND (TD_SPNUMBER=' ' OR (PI_SPNUMBER LIKE TD_SPNUMBER+'%' )) AND (TD_ECID=PI_ECID OR TD_ECID=0)
AND (PB_SVRTYPE=PI_SVRTYPE OR PB_SVRTYPE=' ') AND STATUS=0;

IF PI_CNT>=1 THEN
--需要添加黑名单，读取策略信息
SELECT  PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE,OPTYPE
INTO PI_PB_USERID, PI_PB_SPNUMBER, PI_PB_SVRTYPE, PI_PB_CROPCODE, PI_OPTYPE
FROM GW_TDCMD WHERE (TD_CMD=PI_TD_CMD) AND (TD_USERID=PI_USERID OR TD_USERID='000000')
AND (TD_SPNUMBER=' ' OR (PI_SPNUMBER LIKE TD_SPNUMBER+'%' )) AND (TD_ECID=PI_ECID OR TD_ECID=0)
AND (PB_SVRTYPE=PI_SVRTYPE OR PB_SVRTYPE=' ') AND STATUS=0 AND ROWNUM<=1;

--判断PB_LIST_BLAK表中是否已经存在对应的黑名单数据，不存在则添加
SELECT COUNT(ID) INTO PI_CNT1 FROM PB_LIST_BLACK WHERE USERID=PI_PB_USERID AND SPGATE=' ' AND SPNUMBER=PI_PB_SPNUMBER AND PHONE=PI_PHONE
AND SVRTYPE=PI_PB_SVRTYPE AND CORPCODE=PI_PB_CROPCODE;

IF PI_CNT1=0 THEN
INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
VALUES(PI_PB_USERID,' ',PI_PB_SPNUMBER,PI_PHONE,PI_OPTYPE,SYSTIMESTAMP,' ',PI_PB_SVRTYPE,0,PI_PB_CROPCODE,1);
--再向GW_TDCMD_HIS表添加一条记录
INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
VALUES(PI_PHONE,PI_TD_CMD,PI_USERID,PI_SPNUMBER,PI_ECID,PI_OPTYPE,PI_MO_MSGID,SYSTIMESTAMP);
END IF;
END IF;
END ;
/

--统计所有的MT_LEVEL0-MT_LEVEL9滞留表
CREATE OR REPLACE PROCEDURE S_STATREMAIN
 (
   PICMD          IN NUMBER,
   OUT_CURSOR     OUT SYS_REFCURSOR
 )
AS
PI_TBNUM NUMBER(4);
PI_STR VARCHAR2(2048);
PI_STR1 VARCHAR2(128);
PI_STR2 VARCHAR2(2048);
BEGIN
  PI_TBNUM:=0;
  WHILE PI_TBNUM<=9 LOOP
    IF PI_TBNUM<9 THEN
      PI_STR1:='SELECT TOTALCOUNT,SENDLEVEL,"UID",DESTUID FROM '||'MT_LEVEL'||CAST(PI_TBNUM AS CHAR)||'_QUEUE UNION ALL ';
    ELSE
      PI_STR1:='SELECT TOTALCOUNT,SENDLEVEL,"UID",DESTUID FROM '||'MT_LEVEL'||CAST(PI_TBNUM AS CHAR)||'_QUEUE';
    END IF;
    PI_STR:=PI_STR||PI_STR1;
    PI_TBNUM:=PI_TBNUM+1;
  END LOOP;

  IF PICMD=100 THEN
  --汇总MT_LEVEL0_QUEUE中各帐号数据
    --前端滞留
    PI_STR2:='SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS "LEVEL", "UID" FROM ('||PI_STR||') WHERE "UID">0 GROUP BY "UID",SENDLEVEL';
    OPEN OUT_CURSOR FOR PI_STR2;
    --后端滞留
  ELSIF PICMD=110 THEN
    PI_STR2:='SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS "LEVEL", DESTUID AS "UID" FROM ('||PI_STR||') WHERE DESTUID>0 GROUP BY DESTUID,SENDLEVEL';
    OPEN OUT_CURSOR FOR PI_STR2;

     --代理滞留
  --ELSIF PICMD=120 THEN
  --  OPEN OUT_CURSOR FOR
  --  SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS "LEVEL", LOGINUID AS "UID" FROM MT_LEVEL0_QUEUE WHERE LOGINUID>0 AND "UID"<>LOGINUID GROUP BY LOGINUID,SENDLEVEL;

  --汇总MT_TIMER_QUEUE中各帐号数据
    --前端滞留
  ELSIF PICMD=200 THEN
    OPEN OUT_CURSOR FOR
    SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS "LEVEL", "UID" FROM MT_TIMER_QUEUE WHERE "UID">0 GROUP BY "UID",SENDLEVEL;
  --后端滞留
  ELSIF PICMD=210 THEN
    OPEN OUT_CURSOR FOR
    SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS "LEVEL", DESTUID AS "UID" FROM MT_TIMER_QUEUE WHERE DESTUID>0 GROUP BY DESTUID,SENDLEVEL;
    --代理滞留
  --ELSIF PICMD=220 THEN
  -- OPEN OUT_CURSOR FOR
  -- SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, SENDLEVEL AS "LEVEL", LOGINUID AS "UID" FROM MT_TIMER_QUEUE WHERE LOGINUID>0 AND "UID"<>LOGINUID GROUP BY LOGINUID,SENDLEVEL;

  --汇总MO_TASK中各帐号数据
    --前端滞留
  ELSIF PICMD=300 THEN
   OPEN OUT_CURSOR FOR
   SELECT COUNT("UID") AS REMAINEDNUM, 0 AS "LEVEL", "UID" FROM MO_TASK WHERE SENDSTATUS=1 AND "UID">0 AND ORGUID>0 GROUP BY "UID";
    --后端滞留
  ELSIF PICMD=310 THEN
   OPEN OUT_CURSOR FOR
   SELECT COUNT("UID") AS REMAINEDNUM, 0 AS "LEVEL", ORGUID AS "UID" FROM MO_TASK WHERE SENDSTATUS=1 AND ORGUID>0 GROUP BY ORGUID;

  --汇总RPT_WAIT_B中各帐号数据
    --前端滞留
  ELSIF PICMD=401 THEN
   OPEN OUT_CURSOR FOR
   SELECT COUNT("UID") AS REMAINEDNUM, 1 AS "LEVEL", "UID" FROM RPT_WAIT_B WHERE "UID">0 AND ORGUID>0 GROUP BY "UID";

    --后端滞留
  ELSIF PICMD=411 THEN
   OPEN OUT_CURSOR FOR
   SELECT COUNT("UID") AS REMAINEDNUM, 1 AS "LEVEL", ORGUID AS "UID" FROM RPT_WAIT_B WHERE ORGUID>0 GROUP BY ORGUID;

   --CMD 501统计MT_WAIT_A
  ELSIF PICMD=501 THEN
   OPEN OUT_CURSOR FOR
   SELECT SUM(TOTALCOUNT) AS REMAINEDNUM, 0 AS "LEVEL",USERUID AS "UID" FROM MT_WAIT_A WHERE USERUID>0 GROUP BY USERUID;

   --502统计BATCH_MT_REQ(统计滞留为TOTALNUM-SENDNUM)
  ELSIF PICMD=502 THEN
   OPEN OUT_CURSOR FOR
   SELECT SUM(TOTALNUM-SENDNUM) AS REMAINEDNUM,0 AS "LEVEL", USERUID AS "UID" FROM BATCH_MT_REQ WHERE USERUID>0 GROUP BY USERUID;

  ELSE
   OPEN OUT_CURSOR FOR
   SELECT 0 AS REMAINEDNUM, 0 AS "LEVEL", 0 AS "UID" FROM DUAL;
  END IF;
END;
/

--增加参数PITABLENO（滞留表MT_LEVEL0-9）
CREATE OR REPLACE PROCEDURE GW_WR_MTLVLQUEV2
 (
   PIUID        IN NUMBER,
   PIPTMSGID    IN NUMBER,
   PIRETFLAG    IN NUMBER,
   PIPKTOTAL    IN NUMBER,
   PIPHONECOUNT IN NUMBER,
   PISENDSTATUS IN NUMBER,
   PISPLITFLAG  IN NUMBER,
   PIECID       IN NUMBER,
   PIUSERID     IN VARCHAR2,
   PISPGATE     IN VARCHAR2,
   PICPNO       IN VARCHAR2,
   PIRECVMTTIME IN VARCHAR2,
   PIPHONE      IN VARCHAR2,
   PIMESSAGE    IN VARCHAR2,
   PIFEEFLAG    IN NUMBER,
   PIDESTUID    IN NUMBER,
   PILOGINUID   IN NUMBER,
   PIPKNUMBER   IN NUMBER,
   PISENDLEVEL  IN NUMBER,
   PITPUDHI     IN NUMBER,
   PITASKID     IN NUMBER,
   PILONGMSGSEQ IN NUMBER,
   PIMSGFMT     IN NUMBER,
   PITOTALCOUNT IN NUMBER,
   PISVRTYPE      IN VARCHAR2,
   PIP1           IN VARCHAR2,
   PIP2           IN VARCHAR2,
   PIP3           IN VARCHAR2,
   PIP4           IN VARCHAR2,
   PIUSERMSGID    IN NUMBER DEFAULT 0,
   PIMODULEID     IN NUMBER DEFAULT 0,
   PIATTIME       IN NUMBER DEFAULT 0,
   PIVALIDTIME    IN NUMBER DEFAULT 0,
   PISENDTYPE     IN NUMBER DEFAULT 1,
   PIBATCHID      IN NUMBER DEFAULT 0,
   PIAREACODE     IN NUMBER DEFAULT 0,
   PICUSTID     IN MT_LEVEL0_QUEUE.CUSTID%TYPE,
   PIEXDATA    IN MT_LEVEL0_QUEUE.EXDATA%TYPE,
   PITABLENO   IN NUMBER
 )
AS
PIRECVMTTIME_P TIMESTAMP(6);
ICOUNT PLS_INTEGER;
PI_STR1 VARCHAR2(128);
PI_STR VARCHAR2(2048);
BEGIN
  ICOUNT:=0;
  PI_STR1:='SELECT COUNT(PTMSGID) FROM MT_LEVEL'||CAST(PITABLENO AS CHAR)||'_QUEUE WHERE PTMSGID = '||CAST(PIPTMSGID AS CHAR);
  EXECUTE IMMEDIATE PI_STR1 INTO ICOUNT;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       PI_STR:='INSERT INTO /*+APPEND*/ MT_LEVEL'||CAST(PITABLENO AS CHAR)||'_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES('||PIUID||','''||PIUSERID||''','''||PISPGATE||''','''||PICPNO||''','''||PIPHONE||''','||PIPTMSGID||
       ','''||PIMESSAGE||''','||PIRETFLAG||','||PIPKTOTAL||','||PITOTALCOUNT||
       ','|| PIPHONECOUNT||','''||PIRECVMTTIME_P||''','||PISENDSTATUS||','||PISPLITFLAG||
       ','||PIECID||','||PIFEEFLAG||','||PIDESTUID||','||PILOGINUID||
       ','||PIPKNUMBER||','||PITPUDHI||','||PISENDLEVEL||','||PITASKID||
       ','||PILONGMSGSEQ||','||PIMSGFMT||','''||PISVRTYPE||''','''||PIP1||''','''||PIP2||''','''||PIP3||''','''||PIP4||
       ''','||PIUSERMSGID||','||PIMODULEID||','||PIATTIME||','||PIVALIDTIME||
       ','||PISENDTYPE||','||PIBATCHID||','||PIAREACODE||','''||PICUSTID||''','''||PIEXDATA||''')';  
       EXECUTE IMMEDIATE PI_STR;
 -- DBMS_OUTPUT.PUT_LINE(PI_STR);
 END IF;
END;
/

--增加参数PITABLENO（滞留表MT_LEVEL0-9）
CREATE OR REPLACE PROCEDURE GW_RD_MTLVLQUEV1
(
  PIDESTUID      IN NUMBER,
  PISENDLEVEL    IN NUMBER,
  PIMAXREADCNT   IN NUMBER,
  PISTRUID       IN VARCHAR2,
  SPCURTIME      IN NUMBER DEFAULT 0,
  PITABLENO      IN NUMBER,
  OUT_CURSOR     OUT SYS_REFCURSOR
  )
AS
  PISQLSTR VARCHAR2(4000);
BEGIN
  PISQLSTR :=
  'SELECT /*+RULE*/ ID,"UID",DESTUID,LOGINUID,ECID,TASKID,FEEFLAG,USERID,SPGATE,CPNO,PHONE,PTMSGID,'
  ||'RETFLAG,TPUDHI,PKNUMBER,PKTOTAL,SENDSTATUS,PHONECOUNT,SPLITFLAG,SENDLEVEL,LONGMSGSEQ,MSGFMT,MESSAGE,'
  ||'TO_DATE(TO_CHAR(SENDTIME, ''YYYY-MM-DD HH24:MI:SS''),''YYYY-MM-DD HH24:MI:SS'') AS RECVMTTIME, '
  ||'SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA '
  ||'FROM MT_LEVEL'||PITABLENO||'_QUEUE WHERE DESTUID='||PIDESTUID||' AND "UID" NOT IN('||PISTRUID||') 
  AND SENDLEVEL='||PISENDLEVEL ||'AND (ATTIME<='||SPCURTIME||'OR ATTIME<0) AND ROWNUM<='||PIMAXREADCNT||'';
  --DBMS_OUTPUT.PUT_LINE(PISQLSTR);
  --EXECUTE IMMEDIATE PISQLSTR;
  --返回给上层数据
  OPEN OUT_CURSOR FOR PISQLSTR;
END;
/

update GW_BASEPARA set ARGNAME='moduleid' where ARGNAME='modulid';
COMMIT;
/

DELETE FROM GW_BASEPARA WHERE ID BETWEEN 259 AND 264;
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(259,'RPT',1,'rptreq',3600,'状态报告主动推送',1); 
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(260,'RPT',2,'rptrsp',3600,'rptrsp',1); 
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(261,'RPT',3,'rptrsp',3600,'rptrsp',1); 

INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(262,'MO',1,'moreq',64,'XML中moreq描述',1);  
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(263,'MO',2,'morsp',64,'morsp',1);  
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(264,'MO',3,'morsp',64,'morsp',1); 
COMMIT;
/

DELETE FROM GW_BASEPARA WHERE ID BETWEEN 265 AND 266;
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(265,'RPT',1,'rpt',3600,'rpt',1); 
INSERT INTO GW_BASEPARA(ID,FUNNAME,CMDTYPE, ARGNAME,ARGVALUELEN,ARGDES,ARGTYPE)
            VALUES(266,'MO',1,'mo',64,'mo',1); 
COMMIT;
/           
-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.05.01';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.05.01',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/


MERGE INTO  A_GWPARAMCONF A USING (SELECT 'QUERY04TIMES' AS "PARAMITEM",4000 AS "GWTYPE" FROM  DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT (PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('QUERY04TIMES', '频繁调用次数',  '连续频繁调用次数超过设置值后开启延时回应 (1-100次，默认10次)',2, '1-100','10',0,4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'QUERY04TIMES','10' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='QUERY04TIMES'  AND  GWTYPE=4000) AND  GWTYPE=4000;
/

MERGE INTO  A_GWPARAMCONF A USING (SELECT 'SMPPPORT' AS "PARAMITEM",4000 AS "GWTYPE" FROM  DUAL) B ON (A.PARAMITEM=B.PARAMITEM AND A.GWTYPE=B.GWTYPE)
WHEN NOT MATCHED THEN 
INSERT (PARAMITEM, PARAMNAME,  PARAMMEMO,PARAMATTRIBUTE, VALUERANGE,DEFAULTVALUE,  CONTROLTYPE, GWTYPE) 
VALUES('SMPPPORT', 'SMPP协议端口',  '国际协议SMPP协议端口',0, ' ','8891',0,4000);

INSERT INTO A_GWPARAMVALUE(GWNO, GWTYPE, PARAMITEM, PARAMVALUE)
SELECT DISTINCT GWNO,4000,'SMPPPORT','8891' FROM A_GWPARAMVALUE 
WHERE  NOT EXISTS(SELECT * FROM A_GWPARAMVALUE WHERE PARAMITEM='SMPPPORT'  AND  GWTYPE=4000) AND  GWTYPE=4000;
/

UPDATE A_GWPARAMCONF SET PARAMMEMO='对频繁调用获取上行、状态报告接口进行控速(0不启用、1启用)' WHERE PARAMITEM='QUERY01SPDCTRL' AND GWTYPE=4000;
UPDATE A_GWPARAMCONF SET PARAMMEMO='在无数据获取时，允许连续调用查询接口的频率(1-120/秒/次，默认3秒)',DEFAULTVALUE='3' WHERE PARAMITEM='QUERY02FREQ' AND GWTYPE=4000;
UPDATE A_GWPARAMVALUE SET PARAMVALUE=3 WHERE  GWTYPE=4000 AND PARAMITEM='QUERY02FREQ';
UPDATE A_GWPARAMCONF SET PARAMMEMO='当频繁调用查询接口时，网关对查询回应延时回应(1-120/秒)，默认5秒',DEFAULTVALUE='5' WHERE PARAMITEM='QUERY03DELAY' AND GWTYPE=4000;
UPDATE A_GWPARAMVALUE SET PARAMVALUE=5 WHERE  GWTYPE=4000 AND PARAMITEM='QUERY03DELAY';

UPDATE A_GWPARAMCONF SET PARAMMEMO='运营商协议，CMPP-移动,SGIP-联通,SMGP-电信,SMPP-国际协议',DEFAULTVALUE='1-0-0-0',VALUERANGE='CMPP,SMGP,SGIP,SMPP' WHERE PARAMITEM='STARTSVRPROTOCOL' AND GWTYPE=4000;
COMMIT;
/
-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.05.02';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.05.02',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/

/*网关升级脚本(V4.04.06-V4.05.02)END  */

/*EMP升级脚本START*/




/*接入账号查看权限  /pgb_accessPri.htm*/
DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=2834;
  IF COUNTNUM=0 THEN
   INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE) 
    VALUES (2834, 13, 1, '查看', '1900-1470-0', '接入账号查看权限', '网关前端配置', '1900-1470', '/pgb_accessPri.htm');
    COMMIT;
  END IF;
END;
/


/*接入账号查看权限 关系绑定  /pgb_accessPri.htm*/
DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=2842;
  IF COUNTNUM=0 THEN
   INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE) 
    VALUES (2842, 13, NULL, '关系绑定', '1900-1470-1', '接入账号查看权限', '网关前端配置', '1900-1470', NULL);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2834 AND ROLE_ID=1;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(1,2834);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2834 AND ROLE_ID=2;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(2,2834);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2834 AND ROLE_ID=4;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(4,2834);
    COMMIT;
  END IF;
END;
/



DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2842 AND ROLE_ID=1;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(1,2842);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2842 AND ROLE_ID=2;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(2,2842);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2842 AND ROLE_ID=4;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(4,2842);
    COMMIT;
  END IF;
END;
/


DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM USER_TABLES WHERE TABLE_NAME='LF_MT_PRI';
  IF VERSION = 0 THEN
  EXECUTE IMMEDIATE '/*下行记录查询权限*/
CREATE TABLE LF_MT_PRI
(
  ID NUMBER(38) PRIMARY KEY NOT NULL, /*标识列ID*/
  SPUSERID VARCHAR2(32) DEFAULT '''' NOT NULL,/*发送账号*/
  USER_ID NUMBER(38) DEFAULT 0 NOT NULL,/*操作员USERID*/
  CREATETIME DATE DEFAULT SYSDATE NOT NULL,/*创建时间*/
  CREATE_USERID NUMBER(38) DEFAULT 0 NOT NULL,/*创建者USERID*/
  CORP_CODE VARCHAR2(64) DEFAULT '''' NOT NULL /*企业编码*/
)TABLESPACE EMP_TABLESPACE
    PCTFREE 10
    INITRANS 1
    MAXTRANS 255
    STORAGE
    (
       INITIAL 64K
       MINEXTENTS 1
       MAXEXTENTS UNLIMITED
     )'; 
  END IF;
END;
/


DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM USER_SEQUENCES WHERE SEQUENCE_NAME='S_LF_MT_PRI';
  IF VERSION = 0 THEN
  EXECUTE IMMEDIATE 'CREATE SEQUENCE S_LF_MT_PRI
MINVALUE 1
MAXVALUE 999999999999999999999999999
START WITH 1
INCREMENT BY 1
CACHE 20'; 
  END IF;
END;
/


CREATE OR REPLACE TRIGGER LF_MT_PRI_Q
BEFORE INSERT ON LF_MT_PRI
FOR EACH ROW
  BEGIN
    IF(:NEW.ID IS NULL)
    THEN
      SELECT S_LF_MT_PRI.NEXTVAL INTO :NEW.ID FROM DUAL;
      END IF;
      END;
/     




/*EMP升级脚本END*/



COMMIT;

--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.330';
  DBVERSIONSTR:='6.21';
  WBSVERSIONSTR:='8.4.1.153';
  SPGATEVERSIONSTR:='6.1.21.313';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

   
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.20-V6.21 END------------------------


-----------V6.21-V6.22 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.22';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.330';
COMMIT;

/*网关升级脚本(V4.05.02-V4.05.03)START  */

CREATE OR REPLACE PROCEDURE GW_GETURLBINDV1
 (
  PIUID           IN NUMBER,
  PISPTYPE        IN NUMBER,
  OUT_CURSOR      OUT SYS_REFCURSOR
 )
AS
BEGIN
  IF (PIUID=0) THEN
     OPEN OUT_CURSOR FOR
     SELECT UD."UID",UD.USERID,UD.USERPASSWORD AS PWD,UD.MTURL,
     CASE WHEN ((RTRIM(UD.MOURL) IS NOT NULL) AND UD.TRANSMOTYPE=2) THEN UD.MOURL ELSE ' ' END AS MOURL,
     CASE WHEN ((RTRIM(UD.RPTURL) IS NOT NULL) AND UD.TRANSRPTYPE=2) THEN UD.RPTURL ELSE ' ' END AS RPTURL,
     GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,
     GU.PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT,GU.CACERTNAME,GU.VERIFYPEER,GU.VERIFYHOST,UD.PUSHVERSION
     FROM USERDATA UD INNER JOIN   GW_USERPROPERTY GU ON GU.USERID=UD.USERID
     WHERE UD.USERTYPE=0 AND UD.STATUS=0 
     AND (((RTRIM(UD.MOURL) IS NOT NULL) AND UD.TRANSMOTYPE=2) OR ((RTRIM(UD.RPTURL) IS NOT NULL) AND UD.TRANSRPTYPE=2)) 
     AND UD.ACCOUNTTYPE=PISPTYPE ORDER BY UD."UID";

  ELSE
     OPEN OUT_CURSOR FOR
     SELECT UD."UID",UD.USERID,UD.USERPASSWORD AS PWD,UD.MTURL,
     CASE WHEN ((RTRIM(UD.MOURL) IS NOT NULL) AND UD.TRANSMOTYPE=2) THEN UD.MOURL ELSE ' ' END AS MOURL,
     CASE WHEN ((RTRIM(UD.RPTURL) IS NOT NULL) AND UD.TRANSRPTYPE=2) THEN UD.RPTURL ELSE ' ' END AS RPTURL,
     GU.ECID,GU.PWDENCODE,GU.PWDENCODESTR,GU.MSGCODE,GU.MSGENCODE,GU.PUSHMOFMT,GU.PUSHRPTFMT,GU.PUSHPWDENCODE,GU.PUSHPWDENCODESTR,GU.PUSHMSGCODE,GU.PUSHMSGENCODE,
     GU.PUSHFAILCNT,GU.PUSHSLIDEWND,GU.PUSHMOMAXCNT,GU.PUSHRPTMAXCNT,GU.GETMOMAXCNT,GU.GETRPTMAXCNT,GU.CACERTNAME,GU.VERIFYPEER,GU.VERIFYHOST,UD.PUSHVERSION
     FROM USERDATA UD INNER JOIN   GW_USERPROPERTY GU ON GU.USERID=UD.USERID
      WHERE UD."UID"=PIUID AND UD.USERTYPE=0 AND UD.STATUS=0 
     AND (((RTRIM(UD.MOURL) IS NOT NULL) AND UD.TRANSMOTYPE=2) OR ((RTRIM(UD.RPTURL) IS NOT NULL) AND UD.TRANSRPTYPE=2)) 
     AND UD.ACCOUNTTYPE=PISPTYPE ORDER BY UD."UID";
  END IF;
END;
/

CREATE OR REPLACE PROCEDURE GW_WR_MTLVLQUEV2
 (
   PIUID        IN NUMBER,
   PIPTMSGID    IN NUMBER,
   PIRETFLAG    IN NUMBER,
   PIPKTOTAL    IN NUMBER,
   PIPHONECOUNT IN NUMBER,
   PISENDSTATUS IN NUMBER,
   PISPLITFLAG  IN NUMBER,
   PIECID       IN NUMBER,
   PIUSERID     IN VARCHAR2,
   PISPGATE     IN VARCHAR2,
   PICPNO       IN VARCHAR2,
   PIRECVMTTIME IN VARCHAR2,
   PIPHONE      IN VARCHAR2,
   PIMESSAGE    IN VARCHAR2,
   PIFEEFLAG    IN NUMBER,
   PIDESTUID    IN NUMBER,
   PILOGINUID   IN NUMBER,
   PIPKNUMBER   IN NUMBER,
   PISENDLEVEL  IN NUMBER,
   PITPUDHI     IN NUMBER,
   PITASKID     IN NUMBER,
   PILONGMSGSEQ IN NUMBER,
   PIMSGFMT     IN NUMBER,
   PITOTALCOUNT IN NUMBER,
   PISVRTYPE      IN VARCHAR2,
   PIP1           IN VARCHAR2,
   PIP2           IN VARCHAR2,
   PIP3           IN VARCHAR2,
   PIP4           IN VARCHAR2,
   PIUSERMSGID    IN NUMBER DEFAULT 0,
   PIMODULEID     IN NUMBER DEFAULT 0,
   PIATTIME       IN NUMBER DEFAULT 0,
   PIVALIDTIME    IN NUMBER DEFAULT 0,
   PISENDTYPE     IN NUMBER DEFAULT 1,
   PIBATCHID      IN NUMBER DEFAULT 0,
   PIAREACODE     IN NUMBER DEFAULT 0,
   PICUSTID     IN MT_LEVEL0_QUEUE.CUSTID%TYPE,
   PIEXDATA    IN MT_LEVEL0_QUEUE.EXDATA%TYPE,
   PITABLENO   IN NUMBER
 )
AS
PIRECVMTTIME_P TIMESTAMP(6);
ICOUNT PLS_INTEGER;
BEGIN
  IF PITABLENO = 0 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL0_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL0_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 1 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL1_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL1_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 2 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL2_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL2_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 3 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL3_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL3_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 4 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL4_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL4_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 5 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL5_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL5_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 6 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL6_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL6_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 7 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL7_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL7_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 8 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL8_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL8_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
  ELSIF PITABLENO = 9 THEN
  ICOUNT:=0;
  SELECT COUNT(PTMSGID) INTO ICOUNT FROM MT_LEVEL9_QUEUE WHERE PTMSGID = PIPTMSGID;
  IF ICOUNT<1 THEN
    IF (PIRECVMTTIME IS NULL) THEN
       PIRECVMTTIME_P:=SYSTIMESTAMP;
    ELSE
       PIRECVMTTIME_P:=TO_TIMESTAMP(PIRECVMTTIME,'YYYY-MM-DD HH24:MI:SS.FF');
    END IF;
       INSERT INTO /*+APPEND*/ MT_LEVEL9_QUEUE("UID", USERID, SPGATE, CPNO, PHONE, PTMSGID, MESSAGE, RETFLAG, PKTOTAL, TOTALCOUNT,
       PHONECOUNT, SENDTIME, SENDSTATUS, SPLITFLAG, ECID, FEEFLAG,DESTUID,LOGINUID,PKNUMBER,TPUDHI,SENDLEVEL,TASKID,LONGMSGSEQ,
       MSGFMT,SVRTYPE,P1,P2,P3,P4,USERMSGID,MODULEID,ATTIME,VALIDTIME,SENDTYPE,BATCHID,AREACODE,CUSTID,EXDATA)
       VALUES(PIUID, PIUSERID, PISPGATE, PICPNO, PIPHONE, PIPTMSGID, PIMESSAGE, PIRETFLAG, PIPKTOTAL, PITOTALCOUNT, PIPHONECOUNT,
       PIRECVMTTIME_P, PISENDSTATUS, PISPLITFLAG, PIECID, PIFEEFLAG, PIDESTUID,PILOGINUID,PIPKNUMBER,PITPUDHI,PISENDLEVEL,PITASKID,
       PILONGMSGSEQ,PIMSGFMT,PISVRTYPE,PIP1,PIP2,PIP3,PIP4,PIUSERMSGID,PIMODULEID,PIATTIME,PIVALIDTIME,PISENDTYPE,PIBATCHID,PIAREACODE,PICUSTID,PIEXDATA);
  END IF;
END IF;
END;
/

-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.05.03';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.05.03',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/

/*网关升级脚本(V4.05.02-V4.05.03)END  */

--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.331';
  DBVERSIONSTR:='6.22';
  WBSVERSIONSTR:='8.4.3.156';
  SPGATEVERSIONSTR:='6.1.21.313';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

   
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.21-V6.22 END------------------------


-----------V6.22-V6.23 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.23';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.331';
COMMIT;


/*Lf_Corp表新增字段 是否开启上行退订功能 默认值为0  0不启动  1是启用*/
DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM USER_TAB_COLS WHERE TABLE_NAME='LF_CORP' AND COLUMN_NAME='ISOPENTD';
  IF COUNTNUM=0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE LF_CORP ADD ISOPENTD INT DEFAULT 0 NOT NULL';
  END IF;
END;
/


--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.332';
  DBVERSIONSTR:='6.23';
  WBSVERSIONSTR:='8.4.1.153';
  SPGATEVERSIONSTR:='6.1.21.313';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

   
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.22-V6.23 END------------------------


-----------V6.23-V6.25 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.25';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.332';
COMMIT;

/*网关升级脚本(V4.05.03-V4.05.04)START*/
UPDATE A_GWPARAMCONF SET DEFAULTVALUE='1' WHERE PARAMITEM='QUERY01SPDCTRL'  AND  GWTYPE=4000;
UPDATE A_GWPARAMVALUE SET PARAMVALUE='1' WHERE PARAMITEM='QUERY01SPDCTRL'  AND  GWTYPE=4000;

UPDATE A_GWPARAMCONF SET PARAMATTRIBUTE=2 WHERE PARAMITEM='SMPPPORT' AND GWTYPE=4000;
COMMIT;
/

CREATE OR REPLACE PROCEDURE GW_ADDPBLISTBLACK (
PI_PHONE IN NUMBER,
PITD_CMD IN VARCHAR2,
PIUSERID IN VARCHAR2,
PISPNUMBER IN VARCHAR2,
PISVRTYPE IN VARCHAR2,
PI_ECID IN NUMBER,
PI_MO_MSGID IN NUMBER
)
AS
 PI_PB_USERID VARCHAR2(11) ;
 PI_PB_SPNUMBER VARCHAR2(21) ;
 PI_PB_SVRTYPE VARCHAR2(64) ;
 PI_PB_CROPCODE VARCHAR2(64) ;
 PI_OPTYPE NUMBER(4);
 PI_CNT NUMBER(11);
 PI_CNT1 NUMBER(11);
 PI_TD_CMD VARCHAR2(64);
 PI_USERID VARCHAR2(11);
 PI_SPNUMBER VARCHAR2(21);
 PI_SVRTYPE VARCHAR2(64);
BEGIN
PI_TD_CMD := COALESCE(PITD_CMD,' ');
PI_USERID := COALESCE(PIUSERID,' ');
PI_SPNUMBER := COALESCE(PISPNUMBER,' ');
PI_SVRTYPE := COALESCE(PISVRTYPE,' ');
--根据GW_TDCMD表的策略信息判断是否需要添加黑名单
SELECT COUNT(ID) INTO PI_CNT FROM GW_TDCMD WHERE (UPPER(TD_CMD)=UPPER(PI_TD_CMD)) AND (TD_USERID=PI_USERID OR TD_USERID='000000')
AND (TD_SPNUMBER=' ' OR (PI_SPNUMBER LIKE TD_SPNUMBER+'%' )) AND (TD_ECID=PI_ECID OR TD_ECID=0)
AND (PB_SVRTYPE=PI_SVRTYPE OR PB_SVRTYPE=' ') AND STATUS=0;

IF PI_CNT>=1 THEN
--需要添加黑名单，读取策略信息
SELECT  PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE,OPTYPE
INTO PI_PB_USERID, PI_PB_SPNUMBER, PI_PB_SVRTYPE, PI_PB_CROPCODE, PI_OPTYPE
FROM GW_TDCMD WHERE (UPPER(TD_CMD)=UPPER(PI_TD_CMD)) AND (TD_USERID=PI_USERID OR TD_USERID='000000')
AND (TD_SPNUMBER=' ' OR (PI_SPNUMBER LIKE TD_SPNUMBER+'%' )) AND (TD_ECID=PI_ECID OR TD_ECID=0)
AND (PB_SVRTYPE=PI_SVRTYPE OR PB_SVRTYPE=' ') AND STATUS=0 AND ROWNUM<=1;

--判断PB_LIST_BLAK表中是否已经存在对应的黑名单数据，不存在则添加
SELECT COUNT(ID) INTO PI_CNT1 FROM PB_LIST_BLACK WHERE USERID=PI_PB_USERID AND SPGATE=' ' AND SPNUMBER=PI_PB_SPNUMBER AND PHONE=PI_PHONE
AND SVRTYPE=PI_PB_SVRTYPE AND CORPCODE=PI_PB_CROPCODE;

IF PI_CNT1=0 THEN
INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
VALUES(PI_PB_USERID,' ',PI_PB_SPNUMBER,PI_PHONE,PI_OPTYPE,SYSTIMESTAMP,' ',PI_PB_SVRTYPE,0,PI_PB_CROPCODE,1);
--再向GW_TDCMD_HIS表添加一条记录
INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
VALUES(PI_PHONE,PI_TD_CMD,PI_USERID,PI_SPNUMBER,PI_ECID,PI_OPTYPE,PI_MO_MSGID,SYSTIMESTAMP);
END IF;
END IF;
END ;
/

UPDATE A_PROTOCOLTMPL SET PROTOCOLPARAM='EXPIREHOUR=24;OUTDBGINFO=3;RETURNMOUDHI=0;SRCTON=1;SRCNPI=1;DESTTON=1;DESTNPI=1;MSGIDENCODE=16'  
WHERE PROTOCOLCODE=8 AND PROTOCOL='SMPP3X';
COMMIT;
/
-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.05.04';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.05.04',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/
/*网关升级脚本(V4.05.03-V4.05.04) END*/

--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.333';
  DBVERSIONSTR:='6.25';
  WBSVERSIONSTR:='8.4.4.157';
  SPGATEVERSIONSTR:='6.1.21.313';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

   
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.23-V6.25 END------------------------


-----------V6.25-V6.26 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.26';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.333';
COMMIT;


/*网关升级脚本(V4.05.04-V4.05.05)START*/

CREATE OR REPLACE PROCEDURE GW_ADDPBLISTBLACK (
PI_PHONE IN NUMBER,
PITD_CMD IN VARCHAR2,
PIUSERID IN VARCHAR2,
PISPNUMBER IN VARCHAR2,
PISVRTYPE IN VARCHAR2,
PI_ECID IN NUMBER,
PI_MO_MSGID IN NUMBER
)
AS
 PI_PB_USERID VARCHAR2(11) ;
 PI_PB_SPNUMBER VARCHAR2(21) ;
 PI_PB_SVRTYPE VARCHAR2(64) ;
 PI_PB_CROPCODE VARCHAR2(64) ;
 PI_OPTYPE NUMBER(4);
 PI_CNT NUMBER(11);
 PI_CNT1 NUMBER(11);
 PI_TD_CMD VARCHAR2(64);
 PI_USERID VARCHAR2(11);
 PI_SPNUMBER VARCHAR2(21);
 PI_SVRTYPE VARCHAR2(64);
BEGIN
PI_TD_CMD := COALESCE(PITD_CMD,' ');
PI_USERID := COALESCE(PIUSERID,' ');
PI_SPNUMBER := COALESCE(PISPNUMBER,' ');
PI_SVRTYPE := COALESCE(PISVRTYPE,' ');
--根据GW_TDCMD表的策略信息判断是否需要添加黑名单
SELECT COUNT(ID) INTO PI_CNT FROM GW_TDCMD WHERE (UPPER(TD_CMD)=UPPER(PI_TD_CMD)) AND (TD_USERID=PI_USERID OR TD_USERID='000000')
AND (TD_SPNUMBER=' ' OR (PI_SPNUMBER LIKE TD_SPNUMBER+'%' )) AND (TD_ECID=PI_ECID OR TD_ECID=0)
AND (PB_SVRTYPE=PI_SVRTYPE OR PB_SVRTYPE=' ') AND STATUS=0;

IF PI_CNT>=1 THEN
--需要添加黑名单，读取策略信息
SELECT  PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE,OPTYPE
INTO PI_PB_USERID, PI_PB_SPNUMBER, PI_PB_SVRTYPE, PI_PB_CROPCODE, PI_OPTYPE
FROM GW_TDCMD WHERE (UPPER(TD_CMD)=UPPER(PI_TD_CMD)) AND (TD_USERID=PI_USERID OR TD_USERID='000000')
AND (TD_SPNUMBER=' ' OR (PI_SPNUMBER LIKE TD_SPNUMBER+'%' )) AND (TD_ECID=PI_ECID OR TD_ECID=0)
AND (PB_SVRTYPE=PI_SVRTYPE OR PB_SVRTYPE=' ') AND STATUS=0 AND ROWNUM<=1;

--判断PB_LIST_BLAK表中是否已经存在对应的黑名单数据，不存在则添加
SELECT COUNT(ID) INTO PI_CNT1 FROM PB_LIST_BLACK WHERE USERID=PI_PB_USERID AND SPGATE=' ' AND SPNUMBER=PI_PB_SPNUMBER AND PHONE=PI_PHONE
AND SVRTYPE=PI_PB_SVRTYPE AND CORPCODE=PI_PB_CROPCODE AND OPTYPE=1;

IF PI_CNT1=0 THEN
INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
VALUES(PI_PB_USERID,' ',PI_PB_SPNUMBER,PI_PHONE,PI_OPTYPE,SYSTIMESTAMP,' ',PI_PB_SVRTYPE,0,PI_PB_CROPCODE,1);
--再向GW_TDCMD_HIS表添加一条记录
INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
VALUES(PI_PHONE,PI_TD_CMD,PI_USERID,PI_SPNUMBER,PI_ECID,PI_OPTYPE,PI_MO_MSGID,SYSTIMESTAMP);
END IF;
END IF;
END ;
/

-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.05.05';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.05.05',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/


/*网关升级脚本(V4.05.04-V4.05.05) END*/

--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.335';
  DBVERSIONSTR:='6.26';
  WBSVERSIONSTR:='8.4.5.158';
  SPGATEVERSIONSTR:='6.1.21.313';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

   
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.25-V6.26 END------------------------

-----------V6.26-V6.27 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.27';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.335';
COMMIT;


DELETE FROM LF_USER2ROLE WHERE USER_ID=1;
COMMIT;
/

/*网关升级脚本(V4.05.05-V4.05.06)START*/

CREATE OR REPLACE PROCEDURE GW_ADDPBLISTBLACK (
PI_PHONE IN NUMBER,
PITD_CMD IN VARCHAR2,
PIUSERID IN VARCHAR2,
PISPNUMBER IN VARCHAR2,
PISVRTYPE IN VARCHAR2,
PI_ECID IN NUMBER,
PI_MO_MSGID IN NUMBER
)
AS
 PI_PB_USERID VARCHAR2(11) ;
 PI_PB_SPNUMBER VARCHAR2(21) ;
 PI_PB_SVRTYPE VARCHAR2(64) ;
 PI_PB_CROPCODE VARCHAR2(64) ;
 PI_OPTYPE NUMBER(4);
 PI_CNT NUMBER(11);
 PI_CNT1 NUMBER(11);
 PI_TD_CMD VARCHAR2(64);
 PI_USERID VARCHAR2(11);
 PI_SPNUMBER VARCHAR2(21);
 PI_SVRTYPE VARCHAR2(64);
BEGIN
PI_TD_CMD := COALESCE(PITD_CMD,' ');
PI_USERID := COALESCE(PIUSERID,' ');
PI_SPNUMBER := COALESCE(PISPNUMBER,' ');
PI_SVRTYPE := COALESCE(PISVRTYPE,' ');
--根据GW_TDCMD表的策略信息判断是否需要添加黑名单
SELECT COUNT(ID) INTO PI_CNT FROM GW_TDCMD WHERE (UPPER(TD_CMD)=UPPER(PI_TD_CMD)) AND (TD_USERID=PI_USERID OR TD_USERID='000000')
AND (TD_SPNUMBER=' ' OR (PI_SPNUMBER LIKE TD_SPNUMBER||'%' )) AND (TD_ECID=PI_ECID OR TD_ECID=0)
AND (PB_SVRTYPE=PI_SVRTYPE OR PB_SVRTYPE=' ') AND STATUS=0;

IF PI_CNT>=1 THEN
--需要添加黑名单，读取策略信息
SELECT  PB_USERID,PB_SPNUMBER,PB_SVRTYPE,PB_CROPCODE,OPTYPE
INTO PI_PB_USERID, PI_PB_SPNUMBER, PI_PB_SVRTYPE, PI_PB_CROPCODE, PI_OPTYPE
FROM GW_TDCMD WHERE (UPPER(TD_CMD)=UPPER(PI_TD_CMD)) AND (TD_USERID=PI_USERID OR TD_USERID='000000')
AND (TD_SPNUMBER=' ' OR (PI_SPNUMBER LIKE TD_SPNUMBER||'%' )) AND (TD_ECID=PI_ECID OR TD_ECID=0)
AND (PB_SVRTYPE=PI_SVRTYPE OR PB_SVRTYPE=' ') AND STATUS=0 AND ROWNUM<=1;

--判断PB_LIST_BLAK表中是否已经存在对应的黑名单数据，不存在则添加
SELECT COUNT(ID) INTO PI_CNT1 FROM PB_LIST_BLACK WHERE USERID=PI_PB_USERID AND SPGATE=' ' AND SPNUMBER=PI_PB_SPNUMBER AND PHONE=PI_PHONE
AND SVRTYPE=PI_PB_SVRTYPE AND CORPCODE=PI_PB_CROPCODE AND OPTYPE=1;

IF PI_CNT1=0 THEN
INSERT INTO PB_LIST_BLACK(USERID,SPGATE,SPNUMBER,PHONE,OPTYPE,OPTTIME,MSG,SVRTYPE,SPISUNCM,CORPCODE,BLTYPE)
VALUES(PI_PB_USERID,' ',PI_PB_SPNUMBER,PI_PHONE,PI_OPTYPE,SYSTIMESTAMP,' ',PI_PB_SVRTYPE,0,PI_PB_CROPCODE,1);
--再向GW_TDCMD_HIS表添加一条记录
INSERT INTO GW_TDCMD_HIS(TD_PHONE,TD_CMD,TD_USERID,TD_SPNUMBER,TD_ECID,OPTYPE,MO_MSGID,TD_TIME)
VALUES(PI_PHONE,PI_TD_CMD,PI_USERID,PI_SPNUMBER,PI_ECID,PI_OPTYPE,PI_MO_MSGID,SYSTIMESTAMP);
END IF;
END IF;
END ;
/

--加载退订命令表GW_TDCMD
CREATE OR REPLACE PROCEDURE GW_LOADTDCMD
 (
  OUT_CURSOR      OUT SYS_REFCURSOR
 )
AS
BEGIN
     OPEN OUT_CURSOR FOR 
     SELECT TD_CMD,MATCHTYPE FROM GW_TDCMD ;
END;
/

-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.05.06';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.05.06',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/


/*网关升级脚本(V4.05.05-V4.05.06) END*/

--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.336';
  DBVERSIONSTR:='6.27';
  WBSVERSIONSTR:='8.4.8.161';
  SPGATEVERSIONSTR:='6.1.22.315';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

   
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.26-V6.27 END------------------------


-----------V6.27-V6.28 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.28';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.336';
COMMIT;

--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.337';
  DBVERSIONSTR:='6.28';
  WBSVERSIONSTR:='8.4.10.163';
  SPGATEVERSIONSTR:='6.1.22.315';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.27-V6.28 END------------------------


-----------V6.28-V6.29 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.29';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.337';
COMMIT;

--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.338';
  DBVERSIONSTR:='6.29';
  WBSVERSIONSTR:='8.4.10.163';
  SPGATEVERSIONSTR:='6.1.22.315';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.28-V6.29 END------------------------


-----------V6.29-V6.30 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.30';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.338';
COMMIT;

--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.339';
  DBVERSIONSTR:='6.30';
  WBSVERSIONSTR:='8.4.10.163';
  SPGATEVERSIONSTR:='6.1.23.316';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.29-V6.30 END------------------------


-----------V6.30-V6.31 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.31';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.339';
COMMIT;



/*代理账号管理*/
DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=2845;
  IF COUNTNUM=0 THEN
   INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE) 
    VALUES (2845, 13, 1, '查看', '1900-1480-0', '代理账号管理', '网关前端配置', '1900-1480', '/pag_proxyMage.htm');
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2845 AND ROLE_ID=1;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(1,2845);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2845 AND ROLE_ID=2;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(2,2845);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2845 AND ROLE_ID=4;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(4,2845);
    COMMIT;
  END IF;
END;
/


/*代理账号管理 新增权限*/
DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=2846;
  IF COUNTNUM=0 THEN
   INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE) 
    VALUES (2846, 13, NULL, '新增', '1900-1480-1', '代理账号管理', '网关前端配置', '1900-1480', NULL);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2846 AND ROLE_ID=1;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(1,2846);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2846 AND ROLE_ID=2;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(2,2846);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2846 AND ROLE_ID=4;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(4,2846);
    COMMIT;
  END IF;
END;
/

/*代理账号管理 修改权限*/ 
DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_PRIVILEGE WHERE PRIVILEGE_ID=2847;
  IF COUNTNUM=0 THEN
   INSERT INTO LF_PRIVILEGE (PRIVILEGE_ID, RESOURCE_ID, OPERATE_ID, COMMENTS, PRIV_CODE, MENUNAME, MODNAME, MENUCODE, MENUSITE) 
    VALUES (2847, 13, NULL, '修改', '1900-1480-2', '代理账号管理', '网关前端配置', '1900-1480', NULL);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2847 AND ROLE_ID=1;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(1,2847);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2847 AND ROLE_ID=2;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(2,2847);
    COMMIT;
  END IF;
END;
/

DECLARE COUNTNUM INT;
BEGIN
  SELECT COUNT(*) INTO COUNTNUM FROM LF_IMPOWER WHERE PRIVILEGE_ID=2847 AND ROLE_ID=4;
  IF COUNTNUM=0 THEN
    INSERT INTO LF_IMPOWER(ROLE_ID,PRIVILEGE_ID) VALUES(4,2847);
    COMMIT;
  END IF;
END;
/


--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.340';
  DBVERSIONSTR:='6.31';
  WBSVERSIONSTR:='8.4.10.163';
  SPGATEVERSIONSTR:='6.1.23.316';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.30-V6.31 END------------------------


-----------V6.31-V6.32 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.32';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.340';
COMMIT;


--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.341';
  DBVERSIONSTR:='6.32';
  WBSVERSIONSTR:='8.4.10.163';
  SPGATEVERSIONSTR:='6.1.23.316';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END;
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.31-V6.32 END------------------------


-----------V6.32-V6.33 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.33';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'EMPWEB更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.341';
COMMIT;


--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.342';
  DBVERSIONSTR:='6.33';
  WBSVERSIONSTR:='8.4.10.163';
  SPGATEVERSIONSTR:='6.1.23.316';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END; 
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.32-V6.33 END------------------------


-----------V6.33-V6.35 START------------------------
DECLARE COUNTNUM INT;
        DBVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  DBVERSIONSTR:='6.35';
  NUMNO:=1;
  TOTALINT:=1;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,1,'网关包更改');
    COMMIT;
  END IF;
END;
/

UPDATE LF_VERSION_HIS SET ISRELEASE=0 WHERE VERSION='6.5.0.342';
COMMIT;

/*V4.05.06-V4.05.07 START*/
CREATE OR REPLACE PROCEDURE GW_H_STATISTIV2(PROCESSFLAG IN NUMBER,ISP1 IN NUMBER,ISP2 IN NUMBER,ISP3 IN NUMBER,ISP4 IN NUMBER)
AUTHID CURRENT_USER
IS
   STR VARCHAR2(4000);
   TABLENAME VARCHAR2(20);
   ISEXIST NUMBER;
   MAXIYMD NUMBER;
   DIFFDATE NUMBER;
   CURPROCESSFLAG NUMBER;
BEGIN
  --------------------VER 3.2-------------------------------------
--删除临时
          TABLENAME :='TMEP_STATISTICS';
          ISEXIST:=0;
          SELECT COUNT(TABLE_NAME) INTO ISEXIST FROM USER_TABLES WHERE TABLE_NAME=UPPER(TABLENAME);
          IF(ISEXIST>0) THEN
            BEGIN
                  STR := 'DROP TABLE '||TABLENAME;
                  EXECUTE IMMEDIATE STR;
            END;
          END IF;
--创建临时表

      --  SPISUNCM NUMBER(11),
 STR :='CREATE GLOBAL TEMPORARY TABLE '|| TABLENAME ||'(
        USERID VARCHAR2(11),
        TASKID NUMBER(11),
        SPGATE VARCHAR2(21),
        SPISUNCM NUMBER(11),
        SPID VARCHAR2(32),
        SVRTYPE VARCHAR2(64),
        P1 VARCHAR2(64),
        P2 VARCHAR2(64),
        P3 VARCHAR2(64),
        P4 VARCHAR2(64),
        IYMD NUMBER(11),
        IYEAR NUMBER(11),
        IMONTH NUMBER(11),
        IHOUR NUMBER(11),
        ICOUNT NUMBER(11),
        SUCC NUMBER(11),
        FAIL NUMBER(11),
        NRET NUMBER(11),
        SENDTYPE NUMBER(11),
        MOBILEAREA NUMBER(11),
        BATCHID NUMBER(22),
        AREACODE NUMBER(11)

 )';

--DBMS_OUTPUT.PUT_LINE(STR);
 EXECUTE IMMEDIATE STR;
 --统计
  CURPROCESSFLAG:=PROCESSFLAG;
  SELECT NVL(MAX(IYMD),20000101) INTO MAXIYMD  FROM MT_DATAREPORT;
  DIFFDATE:= TO_DATE(TO_CHAR(SYSDATE-2,'YYYY-MM-DD'),'YYYY-MM-DD HH24:MI:SS')-to_date(MAXIYMD,'YYYY-MM-DD HH24:MI:SS') ;
  IF DIFFDATE>0 THEN
          CURPROCESSFLAG:=CURPROCESSFLAG+DIFFDATE;
  END IF;
 STR:= 'INSERT INTO  '|| TABLENAME ||' (USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IYEAR,IMONTH,IHOUR,ICOUNT,SUCC,FAIL,NRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)
               SELECT  USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE';
               IF ISP1=1 THEN
                  STR:=STR||',P1';
                ELSE
                  STR:=STR||','' '' AS P1';
                END IF;
               IF ISP2=1 THEN
                  STR:=STR||',P2';
                ELSE
                  STR:=STR||','' '' AS P2';
                END IF;
                IF ISP3=1 THEN
                  STR:=STR||',P3';
                ELSE
                  STR:=STR||','' '' AS P3';
                END IF;
                IF ISP4=1 THEN
                  STR:=STR||',P4';
                ELSE
                  STR:=STR||','' '' AS P4';
                END IF;

               STR:=STR||',
               TO_NUMBER(TO_CHAR(SENDTIME,''YYYYMMDD'')) AS IYMD,
               TO_NUMBER(TO_CHAR(SENDTIME,''YYYY'')) AS IYEAR,
               TO_NUMBER(TO_CHAR(SENDTIME,''MM'')) AS MON,
               TO_NUMBER(TO_CHAR(SENDTIME,''HH24'')) AS HOUR,
               COUNT(ID),
               NVL(COUNT(CASE TRIM(ERRORCODE) WHEN ''DELIVRD'' THEN 1 WHEN ''0'' THEN 1 ELSE NULL END),0),
               NVL(COUNT(CASE SUBSTR(ERRORCODE,1,3) WHEN ''E1:'' THEN 1 WHEN ''E2:'' THEN 1 ELSE NULL END),0),
               NVL(COUNT(CASE NVL(TRIM(ERRORCODE),''0'') WHEN ''0'' THEN 1 ELSE NULL END),0),
               SENDTYPE,
               MOBILEAREA,
               BATCHID,
               AREACODE
               FROM GW_MT_TASK_BAK
               WHERE  SENDTIME >=  '|| 'TO_DATE(TO_CHAR(SYSDATE-'||CURPROCESSFLAG||',''YYYY-MM-DD''),''YYYY-MM-DD HH24:MI:SS '') '|| ' AND SENDTIME < '|| 'TO_DATE(TO_CHAR(SYSDATE,''YYYY-MM-DD''),''YYYY-MM-DD HH24:MI:SS '')' ||'
               GROUP BY USERID,TASKID,SPGATE,UNICOM,SPID,SVRTYPE';
                 IF ISP1=1 THEN
                  STR:=STR||',P1';
                 END IF;
                IF ISP2=1 THEN
                  STR:=STR||',P2';
                 END IF;
                IF ISP3=1 THEN
                  STR:=STR||',P3';
                 END IF;
                 IF ISP4=1 THEN
                  STR:=STR||',P4';
                 END IF;
               STR:=STR||',SENDTYPE,MOBILEAREA,BATCHID,AREACODE,
               TO_NUMBER(TO_CHAR(SENDTIME,''YYYYMMDD'')),
               TO_NUMBER(TO_CHAR(SENDTIME,''YYYY'')),
               TO_NUMBER(TO_CHAR(SENDTIME,''MM'')),
               TO_NUMBER(TO_CHAR(SENDTIME,''HH24''))';
        -- DBMS_OUTPUT.PUT_LINE(STR);

 EXECUTE IMMEDIATE STR;
       --SELECT MIN(),MAX() INTO  FROM TMEP_STATISTICS 
 --插入或更新统计表
       STR:='DELETE FROM MT_DATAREPORT WHERE EXISTS (SELECT IYMD FROM '||TABLENAME||' A WHERE A.IYMD=MT_DATAREPORT.IYMD)';
      -- EXECUTE IMMEDIATE STR;
       
       --STR:='DELETE FROM MT_DATAREPORT WHERE IYMD BETWEEN CAST(TO_CHAR(SYSDATE-'||PROCESSFLAG||',''YYYYMMDD'') AS INT) AND CAST(TO_CHAR(SYSDATE,''YYYYMMDD'') AS INT)' ;
       EXECUTE IMMEDIATE STR;

       STR:='INSERT INTO MT_DATAREPORT M
       (USERID,TASKID,SPGATE,SPISUNCM,SPID,SVRTYPE,P1,P2,P3,P4,IYMD,IHOUR,IMONTH,Y,ICOUNT,RSUCC,RFAIL1,RFAIL2,RNRET,SENDTYPE,MOBILEAREA,BATCHID,AREACODE)
       SELECT T.USERID,T.TASKID,T.SPGATE,T.SPISUNCM,T.SPID,T.SVRTYPE,T.P1,T.P2,T.P3,T.P4,T.IYMD,T.IHOUR,T.IMONTH,T.IYEAR,T.ICOUNT,T.SUCC,T.FAIL,
       (T.ICOUNT-T.SUCC-T.FAIL-T.NRET),T.NRET,T.SENDTYPE,T.MOBILEAREA,T.BATCHID,T.AREACODE FROM '|| TABLENAME ||'  T';

--DBMS_OUTPUT.PUT_LINE(STR);
 EXECUTE IMMEDIATE STR;

 EXECUTE IMMEDIATE  'DROP TABLE '||TABLENAME;
 COMMIT;

END ;
/

-------------------增加版本信息-------------------------------------------
DECLARE
  VERSION INT;
BEGIN
  SELECT COUNT(*) INTO VERSION FROM VERSION_CMPP WHERE VERSION='4.05.07';
  IF VERSION < 1 THEN
    INSERT INTO VERSION_CMPP (VERSION,VERSIONDATE,UPGRADETIME)
    VALUES ('4.05.07',TO_CHAR(SYSDATE,'YYYY-MM-DD'),TO_CHAR(SYSDATE,'HH24:MI:SS'));
  END IF;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE COMPILE_PROCEDURE
AS
V_SQL VARCHAR2(2000);
BEGIN

  FOR V IN (SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('PROCEDURE','TRIGGER') AND STATUS='INVALID' AND OBJECT_NAME NOT LIKE '%BIN$%')
    LOOP
      V_SQL:= 'ALTER  '||V.OBJECT_TYPE||' '|| V.OBJECT_NAME||' COMPILE';
      EXECUTE IMMEDIATE V_SQL;
    END LOOP;
END;
/
CALL COMPILE_PROCEDURE();
/


/*V4.05.06-V4.05.07 END*/


--增加版本信息
DECLARE COUNTNUM INT;
        VERSIONSTR VARCHAR2(32);
        DBVERSIONSTR VARCHAR2(32);
        WBSVERSIONSTR VARCHAR2(32);
        SPGATEVERSIONSTR VARCHAR2(32);
        NUMNO INT;
        TOTALINT INT;
BEGIN
  VERSIONSTR:='6.6.0.343';
  DBVERSIONSTR:='6.35';
  WBSVERSIONSTR:='8.4.10.163';
  SPGATEVERSIONSTR:='6.1.23.316';
  NUMNO:=1;
  TOTALINT:=1;
  --EMP产品版本记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
   --EMP-WEB
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=VERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
   --EMP_GATEWARY
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=WBSVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT;
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
   --SMT_SPGATE
   INSERT INTO LF_VERSION(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
   VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION SET UPDATETIME=SYSDATE,VERSION=SPGATEVERSIONSTR WHERE PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT;
  
  --EMP产品版本历史记录
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  IF COUNTNUM=0 THEN
    --EMP-WEB
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO,ISRELEASE,VERSIONINFO)
    VALUES(1000,1000,VERSIONSTR,SYSDATE,SYSDATE,'EMP-WEB',1,'1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE,ISRELEASE=1,VERSIONINFO='1、EMP接入需支持SMPP3.4国际标准接口，包括客户侧接入和连接运营商侧；<br />2、支持手机上行指令加入全局黑名单，同时提供开关设置；<br />3、文件缓存优化；<br />4、查询接口调用频率限制；<br />5、LINUX系统下使用非root用户安装部署；<br />6、LINUX部署工具优化及增加进程守护。<br />' WHERE VERSION=VERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=1000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  IF COUNTNUM=0 THEN
    --EMP_GATEWARY
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,2000,WBSVERSIONSTR,SYSDATE,SYSDATE,'EMP_GATEWARY');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=WBSVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=2000;
  END IF;
  COMMIT; 
  
  SELECT COUNT(*) INTO COUNTNUM FROM LF_VERSION_HIS WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  IF COUNTNUM=0 THEN
    --SMT_SPGATE
    INSERT INTO LF_VERSION_HIS(PRODUCT_ID,PROCESS_ID,VERSION,UPDATETIME,CREATETIME,MEMO)
    VALUES(1000,3000,SPGATEVERSIONSTR,SYSDATE,SYSDATE,'SMT_SPGATE');
  ELSE
    UPDATE LF_VERSION_HIS SET UPDATETIME=SYSDATE WHERE VERSION=SPGATEVERSIONSTR AND PRODUCT_ID=1000 AND PROCESS_ID=3000;
  END IF;
  COMMIT; 

  SELECT COUNT(*) INTO COUNTNUM FROM LF_DB_SCRIPT WHERE VERSION=DBVERSIONSTR;
  IF COUNTNUM=0 THEN
    --EMP产品数据库版本信息表
    INSERT INTO LF_DB_SCRIPT(VERSION,UPDATETIME,CREATETIME,CURRENT_NO,TOTAL,STATE,MEMO)
    VALUES(DBVERSIONSTR,SYSDATE,SYSDATE,NUMNO,TOTALINT,2,'网关包更改');
  ELSE
    UPDATE LF_DB_SCRIPT SET STATE=2,UPDATETIME=SYSDATE WHERE  VERSION=DBVERSIONSTR AND CURRENT_NO=NUMNO AND TOTAL=TOTALINT;
  END IF;
  COMMIT;
END; 
/
--重新编译所有存储过程和触发器
CALL COMPILE_PROCEDURE();
/
-----------V6.33-V6.35 END------------------------